[["index.html", "R Chapter 1 Introducción", " R Cristian Benalcázar 2024-04-20 Chapter 1 Introducción Curso completo R Este material está licenciado bajo una Creative Commons Attribution 4.0 International License. Parte del material fue tomado de: https://bookdown.org/matiasandina/R-intro/ https://rpubs.com/hllinas/ https://isglobal-brge.github.io/curso_R/ https://aprendiendo-r-intro.netlify.app/ https://github.com/dadosdelaplace/curso-intro-R/ http://destio.us.es/calvo/asignaturas/ge_esco/tutorialusargitgithubrstudio/UsarGitGithubconRStudio.html "],["que-es-R.html", "Chapter 2 ¿Qué es R? 2.1 Historia de R 2.2 Comunidad de usuarios: paquetes 2.3 ¿Por qué Excel no es tu amigo? 2.4 Glosario", " Chapter 2 ¿Qué es R? Una vez que tenemos todo instalado vamos a dar nuestros primeros pasos en R, pero antes veamos un poco de su historia y de una particularidad: R es un lenguaje modular (¿modu…qué?) 2.1 Historia de R Veamos antes un poco de la historia de nuestra deidad. Allá por 1975, los laboratorios Bell (los que inventaron la radio moderna tal y como la conocemos), necesitaban una alternativa a los lenguajes más «rudos» y antiguos como C++ o Fortran, lenguajes rápidos en la ejecución pero complejos en su uso, con una gran curva de aprendizaje y con muy poca capacidad en la visualización de datos que se empezaba a necesitar. Así que en 1976 sacaron la primera versión del lenguaje conocido S (hasta entonces estaba de moda lo de llamar a los lenguajes con una sola inicial). En 1980 se empezó a distribuir la primera versión pública de S, más allá de los laboratorios Bell, y en 1988 se añadieron bastantes funcionalidades nuevas como poder aplicar funciones a otras funciones (los famosos apply() que ya veremos). Años más tarde, en 1991, dicho lenguaje se simplificó, reescribiendo muchas subrutinas de otros lenguajes más primitivos, para tener una versión muy parecida al actual R, permitiendo el usod de operadores, data.frames (que veremos) y otro tipo de objetos, sencillos en la programación pero muy versatiles. Sin embargo, salvo uso docente, S tenía licencia así que en 1992 Ross Ihaka y Robert Gentleman se lanzaron a crear una versión de S libre y gratuita, un trabajo de casi 8 años hasta que en el año 2000, ambos investigadores de la Universidad de Auckland en Nueva Zelanda lanzaron la primera versión estable del lenguaje. Tras dicho lanzamiento, se creó un equipo de expertos en estadística computacional (el conocido como R Development Core Team) que es el que se encarga de mantener toda la aerquitectura de R y los que se encargar de actualizar y mejorar el paquete {base}, una librería motor sobre la que se construye el resto de funciones. Y es precisamente ese hecho una de las principales diferencias entre Python y R: R fue creado por y para estadísticos. Te dejo esta entrada en el blog por si quieres curiosear las diferencias (aunque ambos pueden ser útiles para trabajos estadísticos muy generales). 2.2 Comunidad de usuarios: paquetes La pregunta del millón suele ser siempre la misma: ¿qué lenguaje elegir? Podríamos hacer una comparativa técnico de distintos lenguajes pero vamos a quedarnos con dos consejos fundamentales: prioriza el software libre y aquellos lenguajes que tienen una comunidad muy grande de usuarios trabajando en los problemas o campo para el que vas a usar dicho lenguaje. El lenguaje R (también Python) tiene 3 ventajas principales: Es un lenguaje creado por y para estadísticos/as. Es software libre (como C++, Python, Fortran, y otros tantos lenguajes). El software libre no solo tiene una ventaja evidente (es gratis, ok) sino que permite acceder libremente a código ajeno. Es un lenguaje modular: en la instalación que hemos realizado no se han instalado todas las funcionalidades, solo el mínimo para poder funcionar, de forma que se ahorra espacio en disco y en memoria. Al ser software libre, existen trozos de código hechos por otras personas llamados paquetes, que podemos ir instalando a nuestro gusto según los vayamos necesitando. Esto es una ventaja enorme ya que R tiene una comunidad de usuarios gigante para hacer estadística (Python tiene una enorme comunidad pero más enfocada al Machine Learning), con más de 17 000 paquetes: ¡hay más de 17 000 trozos de código, muchos de ellos programados por expertos/as en R, validados por la comunidad y la plataforma, y de forma gratuita! Figure 2.1: Paquetes disponibles en R. Esto nos ahorra muchísimo tiempo en nuestro día a día ya que casi todo lo que querramos hacer ya lo habrá querido hacer otra persona (y seguramente mejor que nosotros/as). Vamos a instalar, por ejemplo, un paquete gráfico ({ggplot2}) que necesitaremos en el futuro. Para ello, escribe en tu consola el siguiente código y pulsa enter. install.packages(&quot;ggplot2&quot;) Dicha orden (puede tardar un poco la primera vez, depende de tu conexión a internet) lo que hará será acceder a la web de R, bajarse a tu ordenador los trozos de código incluidos en el paquete llamado {ggplot2}, y dejarlos para siempre en él.   WARNING: La instalación de paquetes SOLO ES NECESARIA la primera vez que se usa dicho paquete en la vida del ordenador, no hace falta hacerlo cada vez que lo usas.   Una vez que tenemos los trozos de código (el paquete) en nuestro ordenador, en cada sesión de R que abramos (cada vez que cierres y abras RStudio) deberemos (si queremos) llamar a ese paquete que tenemos instalado, escribiendo el siguiente comando en consola library(ggplot2) Welcome to software libre 2.3 ¿Por qué Excel no es tu amigo? R es un lenguaje de programación, de alto nivel para el usuario y modular. Los lenguajes de alto nivel como R, Python (curso interactivo de Python en https://checkio.org/) o Matlab, facilitan la programación al usuario, teniendo que preocuparte solo de la tarea de programar. Son lenguajes con una menor curva de aprendizaje aunque suelen ser más lentos en su ejecución en comparación con lenguajes de bajo nivel (C, C++ o Fortran), lenguajes muy rápidos en su ejecución pero cuya programación requiere un mayor tiempo y formación, teniendo que además estar pendiente del tipo de variables, espacio en memoria, etc. Por su arquitectura, R es un lenguaje que puede ser usado para un propósito general pero que está especialmente diseñado para el análisis estadístico de datos. Su modularidad nos da la ventaja de que podemos instalar las funcionalidades que vayamos necesitando de forma progresiva. ¿Por qué no es recomendable usar Excel como base de datos ni para realizar análisis estadísticos complejos?   Software de pago: Excel, al igual que el resto de programas de Microsoft o SPSS (por desgracia programa estrella de nuestro sistema sanitario), es un programa de pago. A nivel individual, todos hemos tenido una versión que no hemos pagado, pero dicha evasión no se la puede permitir una empresa o administración, que debe de pagar altas cantidades de dinero anuales por las licencias, dinero que no sería necesario si los investigadores y trabajadores tuvieran formación (remunerada) en otras herramientas de software libre. Software cerrado: no solo es de pago sino que es cerrado, así que solo podemos hacer lo que Excel ha creído que interesante que podamos hacer. Incluso con la programación de MACROS, las funcionalidades de Excel siguen siendo mucho más limitadas ya que viene «programadas» de antemano Alto consumo de memoria: dicha programación predeterminada hace que Excel ocupe muchísimo espacio en el disco duro y tenga un alto consumo de memoria (la memoria es lo que te permite hacer varias tareas a la vez en tu ordenador). No es universal: no solo es de pago sino que además, dependiendo de la versión que tengas de Excel, tendrá un formato distinto para datos como fechas, teniendo incluso extensiones distintas, de forma que un archivo .xls abierto por un Excel moderno puede provocar errores en la carga. ¡ES SOLO UNA HOJA DE CÁLCULO!: el propio Microsoft desaconseja el uso de Excel para el análisis de grandes volúmenes de datos. El Excel es una herramienta maravillosa para ser usada como una sencilla hoja de cálculo: llevar las cuentas de tu familia, de tu pequeño negocio, una declaración de la Renta sencilla, planificar viajes, etc. Pero el programa NO ESTÁ DISEÑADO para ser una base de datos ni para análisis detallado, y muchos menos pensado para generar un entorno flexible para el análisis estadístico y la visualización de datos.   ¿Puedes ser el mejor partiendo un filete con una cuchara? Seguramente puedas (en Excel puedes hasta programar con macros), y si siempre lo hiciste así, acabarás normalizándolo, pero seguirás siendo una persona comiendo filete con cuchara. ¿Qué sucede si usamos la herramienta equivocada? Tres ejemplos: Problemas para codificar fechas: en 2016 se publicó una revisión de artículos en genética, descubriendo que 1 de cada 5 artículos contenían errores debido a una mala codificación de las fechas, conviertiendo por ejemplo los genes Septin-2 (conocido como SEPT2) en fechas, y al revés [@Ziemannetal16]. Figure 2.2: Excel en una noche loca. Problemas de memoria: un Excel permite por defecto una cantidad máxima de filas. Aunque dicha cantidad se puede ampliar, sigue siendo finita, por lo que cuando superas el umbral de filas, al añadir filas Excel te borra registros sin avisarte de que lo está haciendo. Esto es lo que sucedió con los registros de casos covid en Reino Unido. Figure 2.3: Cuando Excel dice basta. Problemas para codificar edades: una variable de tipo fecha, aunque nosotros la veamos con letras, en realidad es una variable numérica que representa los días que han pasado desde una fecha origen. En función de las distintas versiones de Excel, dicha fecha origen cambia. Además, si se codifica mal la fecha en formato dd-mm-YY, dicho formato cuando se exporta a otro excel en texto, no permite distinguir a un nacido en 1918 y a un nacido en 2018, así que podemos estar confundiendo personas de 103 años con niños de 3 años (y es lo que sucedió en España, observando unas tasas de mortalidad en niños muy pequeños equivalentes a personas mayores). Figure 2.4: Los centenarios con biberón. 2.4 Glosario GLOSARIO Paquete: trozos de código realizadas por otros usuarios de la comunidad (y validades por el equipo de CRAN si la descarga es mediante install.packages()) para ser usados. Una vez instalados (descargados) los trozos de código a nuestro ordenador, basta con «acudir» a ellos con library(). Haciendo una metáfora con la colección de libros que tengas en casa: con la instalación hemos comprado el libro y lo tenemos en nuestra estantería (para siempre), con la llamada al paquete, por ejemplo library(ggplot2), lo que hacemos es decidir, de entre todos los libros de la estantería, cuales queremos llevarnos de viaje (en cada maleta que hagamos). Los paquetes usados los verás denotados como {nombre_paquete} a lo largo del manual. "],["instalacionR.html", "Chapter 3 Instalación 3.1 Instalación de R 3.2 Primera operación en consola: sumar dos números 3.3 Instalación de RStudio 3.4 Instalación de paquetes 3.5 Glosario 3.6 Consejos 3.7  Ejercicios", " Chapter 3 Instalación 3.1 Instalación de R Al contrario que otros lenguajes de programación, la instalación será bastante sencilla gracias a su modularidad, ya que solo vamos a necesitar 3 pasos (y conexión a internet). 3.1.1 Paso 1 Entra en la web https://cran.r-project.org/ y en la pantalla de inicio selecciona la instalación acorde a tu sistema operativo (ver imagen 3.1) Figure 3.1: Pantalla inicial de la plataforma CRAN de R. 3.1.2 Paso 2 Para sistemas operativos Mac basta con que hacer click en el archivo .pkg, y abrirlo una vez descargado (ver imagen 3.2) Figure 3.2: Pantalla de instalación de R en Mac OS. Para sistemas operativos Windows, debemos clickar en install R for the first time (ver imagen 3.3) y en la siguiente pantalla hacer click en Download R for Windows (ver imagen 3.4). Una vez descargado, abrirlo como cualquier archivo. Figure 3.3: Pantalla previa de instalación de R en Windows. Figure 3.4: Pantalla final de instalación de R en Windows. 3.1.3 Paso 3 Tras su instalación tendrás en tu escritorio (Windows) o en tu Launchpad (Mac Os) un ejecutable de R para abrir. En Windows puede que tengas dos ejecutables i386 y x64 (como todo programa en Windows está la versión de 32 y de 64 bits, haz click preferiblemente - si lo tienes - en el de x64). Te saldrá algo parecido a lo que observas en la imagen 3.5, lo que se conoce como CONSOLA Figure 3.5: Primera pantalla al abrir el ejecutable de R. 3.2 Primera operación en consola: sumar dos números Para comprobar que R está correctamente instalado, abre R y prueba a escribir en la pantalla blanca inferior las siguientes órdenes (recuerda: los códigos/órdenes de este manual puedes copiarlos directamente de la cajita haciendo click en el botón de la esquina superior derecha de la misma) a &lt;- 1 b &lt;- 2 a + b [1] 3 Figure 3.6: Primera suma en la consola de R. ¡Enhorabuena! ¿Dónde hemos escrito ese código? Esa pantalla blanca donde hemos escrito el código se llama CONSOLA, y será donde ejecutaremos las órdenes. ¿Qué hemos hecho? Hemos hecho más de lo que parece. Primero, hemos definido dos variables a y b asignándole un valor numérico a cada una de ellas. Imagina que el símbolo &lt;- es visto en nuestra cabeza como una flecha: a una variable que llamamos a le asignamos el valor 1 (y se queda guardada en nuestro ordenador), y a una variable que llamamos b le asignamos el valor 2. Podemos verlo como \\(a = 1,~b = 2\\). Y tras definir ambas variables, las hemos usado en una operación aritmética a + b. Ya sabemos usar R como calculadora. ¿Cómo nos devuelve R el resultado de la operación? Si te ha devuelto el resultado correcta, en la consola debe aparecer [1] 3. El valor [1] aparecerá siempre ya que simplemente nos numera las líneas de la consola usadas; lo que viene detrás es realmente el resultado, es decir, \\(a + b = 3\\). ¿Por qué hemos escrito a + b al final? Un mantra de R, que veremos a lo largo de todo el curso, es que R intenta molestarte lo menos posible (eso es bueno cuando ya sabes usarlo, no tan bueno cuando empezamos a aprenderlo). Cuando asignamos los valores a &lt;- 1 y b &lt;- 2, R no nos muestra nada: si guardamos un resultado en una variable, no nos muestra nada por consola, simplemente lo guarda. Para obtener el resultado en la consola necesitamos escribir el nombre de las variables (u operaciones entre ellas, como a + b).   WARNING: Como habrás advertido, en R usaremos &lt;- para asignar valores en lugar de =, como una flecha. Usaremos = para indicarle el valor a los argumentos que usemos en funciones y == como operador de comparación: si escribimos 2 == 3, le estamos preguntando si 2 es igual a 3. 2 == 3 [1] FALSE   Bonita esta interfaz no es, así que la cerraremos y no la abriremos más. Tenemos nuestro lenguaje instalado, vamos a instalar nuestro Word para poder programar de forma cómoda. 3.3 Instalación de RStudio Para instalar RStudio deberemos ir a la web https://www.rstudio.com/products/rstudio/download/#download y seleccionar el ejecutable que te aperezca acorde a tu sistema operativo (ver imagen 3.7). Tras descargar el ejecutable, hay que abrirlo como otro cualquier otro ejecutable y dejar que termine la instalación. Figure 3.7: Descargar el ejecutable de RStudio para su posterior instalación. Tras instalar tendremos en el escritorio o Launchpad un ejecutable de RStudio que abriremos. Se nos aparecerá una pantalla similar a esta: Figure 3.8: Primer recibimiento de nuestro mejor amigo RStudio. Listo, tienes instalado (casi) todo correctamente. 3.4 Instalación de paquetes El lenguaje R tiene 3 ventajas principales: Es un lenguaje creado por y para estadísticos/as. Es software libre (como C, C++, Python, Fortran, y otros tantos lenguajes). El software libre no solo tiene una ventaja evidente (es gratis, ok) sino que permite acceder a código ajeno. Es un lenguaje modular: en la instalación no se instalan todas las funcionalidades salvo un mínimo para poder funcionar, de forma que se ahorra espacio en disco y en memoria. Al ser software libre, existen trozos de código hechos por otras personas llamados paquetes, que podemos ir instalando a nuestro gusto según los vayamos necesitando. Esto es una ventaja enorme ya que R tiene una comunidad de usuarios gigante, con más de 17 000 paquetes: ¡hay más de 17 000 trozos de código validados por la comunidad y la plataforma, de forma gratuita! Figure 3.9: Paquetes disponibles en R. Dichos paquetes son trozos de código realizadas por otros usuarios de la comunidad (y validados por el equipo de CRAN si la descarga es mediante install.packages()), listos para ser usados. Una vez instalados (descargados) los trozos de código, basta con «acudir» a ellos con library(). Haciendo una metáfora con la colección de libros que tengas en casa: con la instalación hemos comprado el libro (por ejemplo, install.packages(\"ggplot2\")) y lo tenemos en nuestra estantería (para siempre), con la llamada al paquete, por ejemplo library(ggplot2), lo que hacemos es decidir, de entre todos los libros de la estantería, cuales queremos llevarnos de viaje (en cada maleta que hagamos). 3.5 Glosario GLOSARIO Consola: es el nombre para llamar a esa ventana grande que te ocupa buena parte de tu pantalla. Prueba a escribir el mismo código que antes en ella (es el equivalente a la consola de R que hemos abierto al principio). a &lt;- 1 b &lt;- 2 a + b Figure 3.10: Lanzando a consola nuestras primeras órdenes en RStudio. La consola será donde ejecutaremos órdenes y mostraremos resultados Environment (entorno): la pantalla pequeña (puedes ajustar los márgenes con el ratón a tu gusto) que tenemos en la parte superior derecha se denomina environment o entorno de variables, donde como puedes ver, tras ejecutar el pequeño código en la consola, nos informa de que tenemos dos variables numéricas y su valor asignado. Nos mostrará las variables que tenemos definidas, el tipo y su valor. Figure 3.11: Environment de variables. Panel multiusos: la ventana que tenemos en la parte inferior derecha no servirá para buscar ayuda de comandos y órdenes, además de para visualizar gráficos. Lo veremos cuando sea necesario. Figure 3.12: Panel multiusos. Los paquetes usados los verás denotados como {nombre_paquete} a lo largo del manual. 3.6 Consejos CONSEJOS ¿Cómo saber cuando la orden lanzada en consola ha terminado? A veces R y RStudio son tan silenciosos que no sabemos si ha acabado la orden que acabamos de lanzar en la consola o no. Siempre que veas el símbolo &gt; como última línea en la consola significa que está listo para que le escribamos otra orden (es la forma cariñosa de decirte que ya ha acabado, ver imagen 3.13) Figure 3.13: Ejemplo de que la orden lanzada ha acabado.   ¿Cómo prevenir la fatiga programando? Estando delante de una pantalla de ordenador, con la vista muy fija mientras se programa, puede que acabes teniendo cierta fatiga visual en el trabajo. Te aconsejo que cambies en tu RStudio la tonalidad del fondo de tu programa, en tonos oscuros y no blancos (¿te has fijado que mis capturas tienen un azul cobalto oscuro de fondo mientras el tuyo es un blanco nuclear? Echa un vistazo a las imágenes 3.14 y 3.15) Figure 3.14: Menú de opciones de nuestro editor Figure 3.15: Personalizar el color de fondo de nuestro editor, la letra y el tamaño de fuente 3.7  Ejercicios (haz click en las flechas para ver soluciones) Ejercicio 1: abre R Studio y en tu consola (parte inferior de tu pantalla) asigna los valores 2 y 5 a dos variables a y b. Tras asignarles valores, multiplica los números en consola (haz click en la flecha para la solución propuesta). Solución: # Para poner comentarios en el código se usa # # Definición de variables a &lt;- 2 b &lt;- 5 # Multiplicación a * b [1] 10 Figure 3.16: Multiplicación de a y b.   Ejercicio 2: modifica el código inferior para definir dos variables c y d, con valores 3 y -1, y calcular la división c/d (haz click en la flecha para la solución propuesta). # Definición de variables c &lt;- d &lt;- # Operación (división) c ? d Solución: # Definición de variables c &lt;- 3 d &lt;- -1 # División c / d [1] -3   Ejercicio 3: repite el ejercicio 1 pero ahora guarda el resultado de la multiplicación final en una variable c. Para ver el resultado guardado en c escribe dicha variable en consola (haz click en la flecha para la solución propuesta). Solución: # Variables a &lt;- 2 b &lt;- 5 # Resultado c &lt;- a * b # Muestro en consola c [1] 10 Figure 3.17: Multiplicación de a y b guardando el resultado.   WARNING: No hace falta gastar una línea por cada orden que quieras ejecutar. Tampoco necesitas guardar cada paso intermedio que realices. Cuidado con la memoria: cada asignación que hagas es una variable guardada que consume recursos en tu ordenador. "],["primeros-pasos.html", "Chapter 4 Primeros pasos 4.1 Primeros pasos en R: calculadora 4.2 ¿Y dónde programamos? 4.3 Tipos de errores 4.4 Glosario 4.5 Consejos 4.6  Ejercicios", " Chapter 4 Primeros pasos Scripts usados: script04.R. Ver en https://github.com/Crisben/uleam-stat24/blob/main/scripts/script04.R   Ya hemos instalado lo necesario así que vamos a empezar por lo sencillo y recordando parte de lo que ya hemos realizado: ¿cómo usar R como una calculadora? 4.1 Primeros pasos en R: calculadora ¿Te acuerdas de lo que era la CONSOLA? En el caso de RStudio, la consola será esa pequeña pantalla que tenemos en la parte inferior (la pestaña Console). Vamos a trabajar de momento solo en esa ventana inferior. Figure 4.1: Lanzando a consola nuestras primeras órdenes en RStudio. Lo que ya hemos descubierto en los pasos de la instalación (ver imagen 4.1) es que la consola de R tiene una función muy básica y evidente: nos sirve de calculadora. Un ejemplo muy simple: si escribimos 3 en la consola y pulsamos ENTER, la consola nos mostrará el resultado de la suma 1 + 2 [1] 3   Pero entonces…¿cuál es la diferencia entre una calculadora y un lenguaje de programación? Imagina que dicha suma 3 la quisiéramos utilizar para un segundo cálculo: ¿y si en lugar de lanzarlo a la consola sin más lo almacenamos en alguna variable? Como hemos visto en la instalación de RStudio, para asignar valores a variables lo haremos con &lt;-, por ejemplo con la orden x &lt;- 1 + 2: una variable de nombre x va a tener asignada/guardada lo que valga la operación 1 + 2 x &lt;- 1 + 2 Como puedes comprobar, en tu parte superior derecha (nuestro entorno de variables), podrás ver como una nueva variable x es ahora visualizada, con su valor asignado (no se mostrará en consola salvo que escribas 3 en ella: R asume que no querías visualizarla en consola sino solo guardarla). Figure 4.2: Environment. y &lt;- x - 3 x [1] 3 y [1] 0 x * y [1] 0 Dicha variable x además podemos reciclarla para definir, por ejemplo, una nueva variable y, restándole una constante. De la misma manera que hemos hecho restas, sumas y multiplicaciones, R tiene todas las operaciones clásicas que podrías tener en una calculadora. Prueba a ejecutar en la consola las órdenes x^2, sqrt(x) o abs(y): R calculará las operaciones elevar al cuadrado, raíz cuadrada y valor absoluto (respectivaemnte) de la variable que tengan entre paréntesis. x^2 [1] 9 sqrt(x) [1] 1.732051 y &lt;- x - 5 abs(y) [1] 2   CONSEJO: Las órdenes sqrt() y abs() se llaman funciones, y la variable que tienen entre paréntesis se llama argumento de la función: una variable que toma de entrada la función y con la que opera internamente.   4.2 ¿Y dónde programamos? ¿Estás emocionado/a? Vamos a abrir nuestro primer script. Un script será el documento en el que programamos, nuestro .doc, pero aquí será un archivo con extensión .R, donde escribiremos las órdenes, que nos evitará estar lanzando todo a consola. ¿Por qué no abusar de la consola? Una máxima para no olvidar: TODO lo que no escribas en un script, cuando cierres RStudio, lo habrás perdido (cómo si en lugar de escribir en un Word y guardarlo, nunca guardases el documento). Para abrir nuestro primero script, haz click en el menú superior en File &lt;&lt; New File &lt;&lt; R Script como se muestra en la imagen 4.3 Figure 4.3: Abriendo nuestro primer script de R. Tras abrirlo tendremos una cuarta ventana: esta será la ventana de nuestros códigos, la ventana más importante ya que es donde escribiremos lo que queremos ejecutar. Escribe el código de la suma de arriba en ese script y guarda el archivo haciendo click en el botón Save current document a &lt;- 1 b &lt;-2 a + b [1] 3 Figure 4.4: Escribiendo y guardando nuestro primer script. Ese código no se ejecuta salvo que se lo digamos. Tenemos tres opciones para ejecutar código: Copiar y pegar el trozo de código en la consola (como hemos hecho al principio). Seleccionar líneas de código y clickar en Run (o con su atajo de teclado), lo que hará que se ejecute solo las líneas seleccionadas. Activar el cuadrado Source on save a la derecha del botón de guardar y volvemos a hacer click en el botón de guardar: siempre que esa opción esté activada, al guardar no solo es nos guarda el archivo .R sino que además se ejecuta el código completo que tengas en el script. 4.3 Tipos de errores Durante tu aprendizaje en R va a ser muy habitual que las cosas no salgan a la primera, apareciendo en consola mensajes en un color rojo. Un miedo muy habitual cuando se empieza a programar es pensar que si haces algo mal o aparece algún mensaje de error, el ordenador puede explotar en cualquier momento. A programar se aprende programando, así que haz las pruebas que quieras, lo peor que puede pasar es que necesites cerrar sesión en R Studio y abrirlo de nuevo, o en el peor de los casos, desintalarlo y volverlo a iinstalar. Dado que el \\(99.9\\%\\) de las veces tu código tendrá errores que deberás ir solventando, no está de más conocer los tipos de mensajes que R puede sacarte por consola. Los mensajes de ERROR irán precedidos de la frase «Error in…», dándote a veces incluso el tipo de error y la línea de código en la que se ha producido. Veamos un ejemplo intentando sumar un número a una cadena de texto. &quot;a&quot; + 1 Error in &quot;a&quot; + 1: argumento no-numérico para operador binario Los errores son aquellos fallos que seguramente impidan la ejecución del código. Un error muy habitual es intentar acceder a alguna función de algún paquete que, o bien no tenemos instalado, o bien no hemos llamado haciendo uso del library(): estás intentando leerte un libro de tu biblioteca pero ni siquiera has ido a la tienda a «comprarlo».   Los mensajes de WARNING irán precedidos de la frase «Warning in…», y son los fallos más delicados ya que son posibles errores o incoherencias que R detecta en tu código pero que no van a hacer que tu código deje de ejecutarse, aunque probablemente no lo haga como a ti te gustaría. Un ejemplo es cuando tratamos de hacer la raiz cuadrada de un número negativo. sqrt(-1) Warning in sqrt(-1): Se han producido NaNs [1] NaN ¿Ha ejecutado la orden? Sí, pero te advierte de que el resultado de la operación es un NaN, un valor que no existe (al menos dentro de los números reales), un Not A Number (ver Sección ??).   Los mensajes de CONTROL serán aquellos que aparecerán por consola sin empezar por «Error in…» ni «Warning:…». Dichos mensajes, que puedes incluir tú mismo en tu código con funciones como cat() para monitorizar la ejecución de códigos largos, no son errores ni problemas, son simplemente información que R considera útil aportarte.   4.4 Glosario GLOSARIO Paquete: trozos de código realizadas por otros usuarios de la comunidad (y validades por el equipo de CRAN si la descarga es mediante install.packages()) para ser usados. Una vez instalados (descargados) los trozos de código a nuestro ordenador, basta con «acudir» a ellos con library(). Haciendo una metáfora con la colección de libros que tengas en casa: con la instalación hemos comprado el libro y lo tenemos en nuestra estantería (para siempre), con la llamada al paquete, por ejemplo library(ggplot2), lo que hacemos es decidir, de entre todos los libros de la estantería, cuales queremos llevarnos de viaje (en cada maleta que hagamos). Los paquetes usados los verás denotados como {nombre_paquete} a lo largo del manual. 4.5 Consejos CONSEJOS   Panel de ayuda Si escribes en la consola ? nombre_funcion (por ejemplo, escribe en la consola ? sqrt), en el panel inferior derecho te aparecerá una documentación de ayuda de la función para saber que argumentos necesita, como puedes usar la función, qué es lo que te devuelve, ejemplos de uso, etc. ? sqrt Figure 4.5: Panel de ayuda.   ¿Cómo comentar el código? Probablemente lo más importante al programar es que te acostumbres a comentar lo máximo posible tu código. ¿Qué es un comentario? Es un texto que escribes entre el código precedido de #: todo lo que venga detrás no será interpretado por R como código. Es vital cuando programamos que nos acostumbremos a comentar lo que hacemos, tanto para nosotros como para otras personas que puedan leer nuestro código.   Índice en el código Puedes escribir comentarios en el código para que automáticamente se organice tu código en epígrafes, mostrándote un índice en el panel lateral (haz click en el icono de la esquina superior derecha del editor) y permitiendo minimizar partes del código. Para ello puedes comentar por ejemplo con # ----- título -----. Figure 4.6: Comentando el código para generar un índice.   4.6  Ejercicios (haz click en las flechas para ver soluciones) Ejercicio 1: asigna ahora los valores 1, -2, 3 a tres variables a, b y c distintas, y calcula la raíz cuadrada de cada uno (haz click en la flecha para la solución propuesta). Solución: # Variables a &lt;- 1 b &lt;- -2 c &lt;- 3 # Resultado sqrt(a) [1] 1 sqrt(b) [1] NaN sqrt(c) [1] 1.732051   Ejercicio 2: calcula en consola la suma de 3 más 4, y todo ello multiplicado por 10, y asígnalo a una variable x (haz click en la flecha para la solución propuesta). Imprime el valor por consola Solución: # Asignamos x &lt;- (3 + 4) * 10 # Imprimimos x [1] 70   Ejercicio 3: asigna un valor positivo a x y calcula su raíz cuadrada; asigna otro negativo y calcula su valor absoluto con la función abs() (haz click en la flecha para la solución propuesta). Solución: # Raíz cuadrada x &lt;- 73 # por ejemplo sqrt(x) [1] 8.544004 # Valor absoluto y &lt;- -19 # por ejemplo abs(y) [1] 19   Ejercicio 4: usando la variable x ya definida, completa/modifica el código inferior para guardar en una nueva variable z el resultado guardado en x menos 5 (haz click en la flecha para la solución propuesta). Solución: z &lt;- x - 5 z [1] 68 z &lt;- ? - ? z   Ejercicio 5: usando las variables x e y ya definidas, calcula el máximo de ambas (función max()), y guárdalo en una nueva variable t. (haz click en la flecha para la solución propuesta). Solución: t &lt;- max(x, y) t [1] 73   WARNING: No hace falta gastar una línea por cada orden que quieras ejecutar. Tampoco necesitas guardar cada paso intermedio que realices. Cuidado con la memoria: cada asignación que hagas es una variable guardada que consume recursos en tu ordenador. "],["var-num.html", "Chapter 5 Variables individuales: números y caracteres 5.1 Variables numéricas (individuales) 5.2 Variables de tipo caracter (texto) 5.3 Nuestra primera función: paste 5.4 Nuestro primer paquete: glue 5.5 Manejando textos: paquete stringr 5.6 Consejos 5.7  Ejercicios", " Chapter 5 Variables individuales: números y caracteres   Tras los primeros ejercicios planteados deberíamos saber más o menos usar R como una calculadora, definiendo variables que nos guardan números, como a &lt;- 1. Vamos a ir más allá: ¿existen variables más allá de los números? En este capítulo vamos a empezar a familiarizarnos con los tipos de datos que podemos necesitar. Piensa por ejemplo en los datos guardados de una persona en cualquier registro: La edad será un número (sin decimales) Su peso o estatura será otro número (ahora con decimales). Su nombre será una cadena de texto. Su fecha de nacimiento será precisamente eso, un dato de tipo fecha. A la pregunta «¿está usted soltero/a?» la respuesta será lo que llamamos una variable binaria o lógica: una variable que solo puede valer TRUE (si está soltero/a) y FALSE (en otro caso), guarada internamente como un 1 o 0. Existen más tipos de datos (por ejemplo, números complejos, listas, etc) pero con estos nos valdrá de momento. 5.1 Variables numéricas (individuales) Probablemente el dato más sencillo y obvio de entender sean los datos numéricos, datos que ya hemos usado en nuestros primeros pasos como calculadora. a &lt;- 1 b &lt;- 2 a + b [1] 3 En el código anterior, tanto a como b, como la suma a + b, son de tipo numérico, algo que podemos comprobar con la función class() (nos devuelve numeric). # Clase de las variables class(a) [1] &quot;numeric&quot; class(b) [1] &quot;numeric&quot; class(a + b) [1] &quot;numeric&quot; También podemos comprobar su naturaleza con typeof(), que nos devuelve la naturaleza del dato tal cual es guardada en R. # Tipología interna typeof(a) [1] &quot;double&quot; typeof(b) [1] &quot;double&quot; typeof(a + b) [1] &quot;double&quot; Aunque no es especialmente relevante profundizar en ello de momento, fíjate que ambas órdenes combinadas nos dicen que las variables son de tipo numérico pero concretamente de tipo double: dichas variables son entendidas internamente como números con decimales (aunque no los veamos), lo que en matemáticas se llaman números reales (por curiosidad: el término double viene de lenguajes de programación antiguos como C, que significa «doble precisión», para indicarle que reserve 8 bytes - 64 bits - de memoria). Durante el curso no distinguiremos entre distintos tipos de números, para nosotros serán siempre de clase numeric y de tipo double, pero podríamos definir números enteros o integer (sin decimales, ahorrando huecos en memoria). # Dato numérico (entero) a &lt;- 1L class(a) [1] &quot;integer&quot; typeof(a) [1] &quot;integer&quot; Con los datos numéricos podemos realizar todas las operaciones que se nos ocurriría hacer en una calculadora, como sumar (+), restar (-), multiplicar (*), dividir (/), raíz cuadrada (sqrt()), valor absoluto (abs()), elevar al cuadrado (^2), elevar al cubo (^3), etc. # Definimos dos variables numéricas a &lt;- 1 b &lt;- -2 # Suma y resta a + b [1] -1 a - b [1] 3 # Multiplicación y división a * b [1] -2 a / b [1] -0.5 # Raíz cuadrada sqrt(a) [1] 1 # Potencias a^2 [1] 1 b^3 [1] -8 5.2 Variables de tipo caracter (texto) Pero no solo de números viven los datos: imagina que además de la edad de una persona queremos guardar su nombre. edad &lt;- 32 nombre &lt;- &quot;Javier&quot; class(nombre) [1] &quot;character&quot; typeof(nombre) [1] &quot;character&quot; Fíjate que ahora tenemos guardado en la variable nombre una variable de tipo character, es decir, una cadena de texto (conocido en otros lenguajes como string o char): caracteres entre comillas. Es importante el concepto de las comillas, ya que todo lo que vaya entre comillas será un texto: \"1\" no representa un número, representa un texto (igual que \"hola\" o \"adios\") 5.3 Nuestra primera función: paste Las cadenas de texto son un tipo especial de dato, con los que obviamente no podremos hacer operaciones aritméticas, pero si podemos hacer operaciones propias de cadenas de texto como puede ser la función paste(). Dicha función nos permite pegar dos cadenas de caracteres. nombre &lt;- &quot;Cristian&quot; apellido &lt;- &quot;Crisben&quot; paste(nombre) [1] &quot;Cristian&quot; Si queremos pegar cadenas de texto sin ningún tipo de caracter en medio (ahora tenemos un espacio), existe una forma más abreviada y limpia de ejecutar la orden, usando la función paste0() paste0(nombre, apellido) # todo junto sin espacio [1] &quot;CristianCrisben&quot; Cuando hemos ejecutado paste() y paste0() estamos ejecutando lo que se conoce como una función: una palabra reservada que representa un conjunto de órdenes encapsuladas, y que se ejecuta a partir de unos argumentos de entrada. En este caso, solo hemos introducido como argumentos las cadenas de texto. ¿Qué sucededería si queremos pegar cadenas de texto usando el punto o la coma o cualquier otro caracter En el caso de la función paste(), podremos hacer uso de lo que se conoce como argumento opcional llamado sep, que podemos darle un valor en concreto o dejarlo sin especificar. Lo que hará R será tomar su valor por defecto igual a sep = \" \" (por defecto, la función paste() pega cadenas de texto con un espacio entre ellas porque en realidad ejecuta por defecto paste(..., sep = \" \")). paste(nombre, apellido, sep = &quot;&quot;) # todo junto [1] &quot;CristianCrisben&quot; paste(nombre, apellido, sep = &quot; &quot;) # separados por un espacio [1] &quot;Cristian Crisben&quot; paste(nombre, apellido, sep = &quot;.&quot;) # separados por un punto . [1] &quot;Cristian.Crisben&quot; paste(nombre, apellido, sep = &quot;,,&quot;) # separados por dos comas. [1] &quot;Cristian,,Crisben&quot; Prueba a ejecutar ? paste en consola para ver las opciones de la función en el panel de ayuda. 5.4 Nuestro primer paquete: glue Otra forma más intuitiva de trabajar con textos y variables numéricas es usar el paquete {glue}, que nos permite pegar cadenas de texto a variables numéricas de forma simbólica. install.packages(&quot;glue&quot;) # solo la primera vez library(glue) Recuerda que install.packages() es solo necesario la primera que «compramos el libro»: nos bajamos una serie de archivos a nuestro ordenador. Una vez que hemos comprado el libro, cada vez que queramos usarlo bastará con indicarle que nos traiga ese libro concreto con library(). El paquete {glue} nos permite pegar de una forma mucho más legible cadenas de texto. Por ejemplo, supongamos que queremos construir la frase \"La edad es de X años\", donde X será la edad guardada e una variable. edad &lt;- 32 paste(&quot;La edad es de&quot;, edad, &quot;años&quot;) [1] &quot;La edad es de 32 años&quot; Con paste() podemos mezclar texto y números pero de una forma un poco aparatosa ya que debemos de ir cerrando la frase con comillas. Para evitarlo, glue() nos proporciona una forma más cómoda, sin salirnos de la cadena de texto, encapsulando las variables en llaves. glue(&quot;La edad es de {edad} años&quot;) La edad es de 32 años unidades &lt;- &quot;años&quot; glue(&quot;La edad es de {edad} {unidades}&quot;) La edad es de 32 años También podemos hacer uso de dicha función sin tener los valores numéricos previamente guardados en variables. # Otra forma sin definir variables a priori glue(&quot;La edad es de {32} años&quot;) La edad es de 32 años 5.5 Manejando textos: paquete stringr Figure 5.1: Paquete stringr https://github.com/rstudio/cheatsheets/blob/main/strings.pdf El paquete {stringr} nos proporciona un abanico de funciones y utilidades para poder trabajar con variables de tipo texto, permitiendo desde la búsqueda hasta la extracción de cadenas de texto dentro de la variable. # install.packages(&quot;stringr&quot;) # solo la primera vez library(stringr) Aunque no es el objetivo de este manual introductorio adentrarnos en lo que se conoce como text mining o minería de textos, he aquí una lista de funciones útiles que podemos encontrar en dicho paquete La función str_length() nos proporciona la longitud de una cadena de caracteres (reminder: un espacio cuenta como caracter). str_length(&quot;hola&quot;) [1] 4 str_length(&quot;espejo&quot;) [1] 6 La función str_sub() nos permite extraer subcadenas de caracteres, indicándole no solo la cadena sino las posiciones iniciales y finales. x &lt;- &quot;ornitorrinco&quot; str_sub(x, 3, 3) # tercer caracter [1] &quot;n&quot; str_sub(x, 3, 5) # del tercero al quinto (ambos inclusive) [1] &quot;nit&quot; str_sub(x, 2, -3) # del segundo al antepenúltimo caracter [1] &quot;rnitorrin&quot; Dicha función se puede usar incluso para modificar subcadenas str_sub(x, 3, 6) &lt;- &quot;jeje&quot; # del tercero al sexto colamos un &quot;jeje&quot; x [1] &quot;orjejerrinco&quot; La función str_dup() nos permite duplicar cadenas de caracteres str_sub(&quot;ja&quot;, 2) # duplicamos 2 veces &quot;ja&quot; [1] &quot;a&quot; str_sub(&quot;ja&quot;, 5) # duplicamos 5 veces &quot;ja&quot; [1] &quot;&quot; La función str_remove() nos permite eliminar subcadenas de caracteres (reminder: el espacio porque cuenta como caracter) # eliminamos de la variable la subcadena o patrón &quot;DNI:&quot; str_remove(&quot;DNI: 41378292&quot;, &quot;DNI:&quot;) # nos deja ese espacio [1] &quot; 41378292&quot; La función str_trim() nos permite eliminar espacios en blanco que nos hayan quedado en el texto, algo bastante habitual cuando lees cadenas de caracteres de archivos o de internet. # eliminamos de la variable la subcadena o patrón &quot;DNI:&quot; x &lt;- str_remove(&quot;DNI: 41378292&quot;, &quot;DNI:&quot;) # nos deja ese espacio str_trim(x) # eliminamos ese espacio [1] &quot;41378292&quot; str_trim(&quot; calle mayor &quot;, side = &quot;left&quot;) # solo los de la izquierda [1] &quot;calle mayor &quot; str_trim(&quot; calle mayor &quot;, side = &quot;right&quot;) # solo los de la derecha [1] &quot; calle mayor&quot; str_trim(&quot; calle mayor &quot;, side = &quot;both&quot;) # ambos (pro defecto) [1] &quot;calle mayor&quot; La función str_pad() nos permite añadir espacios en blanco x &lt;- &quot;mochila&quot; # un espacio en la izquierda (cadena resultante de longitud dada) str_pad(x, 8) # longitud 8 ==&gt; mochila tiene 7, así que añade un espacio [1] &quot; mochila&quot; str_pad(x, 15) # longitud 15 ==&gt; mochila tiene 7, así que añade 8 espacios [1] &quot; mochila&quot; str_pad(x, 12, &quot;right&quot;) # a la derecha [1] &quot;mochila &quot; str_pad(x, 13, &quot;both&quot;) # a ambos lados [1] &quot; mochila &quot; La función str_to_upper() nos permite convertir un texto a mayúscula y str_to_title() pone en mayúscula solo la primera letra de cada palabra. La función str_to_lower() nos permite convertir un texto a minúscula x &lt;- &quot;Hola, me llamo Javi&quot; str_to_upper(x) [1] &quot;HOLA, ME LLAMO JAVI&quot; str_to_title(x) [1] &quot;Hola, Me Llamo Javi&quot; str_to_lower(&quot;¡PARA! No puedes pasar&quot;) [1] &quot;¡para! no puedes pasar&quot; La función str_detect() nos permite detectar subcadenas de caracteres subcadena &lt;- &quot;ministerio&quot; x &lt;- &quot;En un documento del Ministerio del Interior...&quot; str_detect(x, subcadena) # no lo detecta porque se sensitive a mayúsculas [1] FALSE str_detect(str_to_lower(x), subcadena) [1] TRUE Haciendo además uso de expresiones regulares podemos afinar nuestra búsqueda telefono &lt;- &quot;([2-9][0-9]{2})[- .]([0-9]{3})[- .]([0-9]{4})&quot; x &lt;- &quot;mi telefono es 219 733 8965&quot; y &lt;- &quot;mi telefono es 329-293-8753&quot; z &lt;- &quot;mi telefono es 32-293-87&quot; str_detect(x, telefono) [1] TRUE str_detect(y, telefono) [1] TRUE str_detect(z, telefono) [1] FALSE La función str_locate() nos permite localizar inicio y final donde se sitúan cadenas de caracteres str_locate(&quot;hola me llamo Javi&quot;, &quot;Javi&quot;) start end [1,] 15 18 La función str_replace() nos permite reemplazar subcadenas en base a un patrón pero solo lo hace con la primera que detecta. Con str_replace_all() podemos reemplazar todos str_replace(&quot;la vida del oso panda&quot;, &quot;panda&quot;, &quot;pardo&quot;) # reemplazamos panda por pardo [1] &quot;la vida del oso pardo&quot; str_replace(&quot;la vida del oso pardo y el oso polar&quot;, &quot;oso&quot;, &quot;delfín&quot;) [1] &quot;la vida del delfín pardo y el oso polar&quot; str_replace_all(&quot;la vida del oso pardo y el oso polar&quot;, &quot;oso&quot;, &quot;delfín&quot;) [1] &quot;la vida del delfín pardo y el delfín polar&quot; 5.6 Consejos CONSEJOS   Recuperar un comando y autocompletar Si haces click con el ratón en la consola y pulsas la flecha «arriba» del teclado, te irá apareciendo todo el historial de órdenes ejecutadas. Es una manera de ahorrar tiempo para ejecutar órdenes similares a las ya ejecutadas. Si empiezas a escribir el nombre de una variable pero no te acuerdas exactamente de su nombre, pulsando tabulador te autocompletará solo.   Convertir tipos de datos A veces la lectura de variables numéricas de nuestros archivos puede hacer que un número, por ejemplo 1, sea leído como la cadena de texto \"1\", con la que no podemos operar como un número. Las funciones as.numeric(), o as.character() nos permiten convertir una variable en tipo numérico, caracter o lógico, respectivamente. &quot;1&quot; + 1 Error in &quot;1&quot; + 1: argumento no-numérico para operador binario as.numeric(&quot;1&quot;) + 1 [1] 2 as.character(1) [1] &quot;1&quot;   5.7  Ejercicios (haz click en las flechas para ver soluciones) Ejercicio 1: define una variable edad que guarde tu edad y otra nombre con tu nombre. Solución: edad &lt;- 32 # tipo numeric nombre &lt;- &quot;Javier&quot; # tipo caracter edad [1] 32 nombre [1] &quot;Javier&quot;   Ejercicio 2: define otra variable con tus apellidos y junta las variables nombre y apellidos en una sola cadena de texto que guardes en nombre_completo. Solución: # Apellidos apellidos &lt;- &quot;Crisben&quot; # Pegamos nombre_completo &lt;- glue(&quot;{nombre} {apellidos}&quot;) nombre_completo Javier Crisben # Otra forma nombre_completo &lt;- paste(nombre, apellidos) nombre_completo [1] &quot;Javier Crisben&quot;   Ejercicio 3: define dos variables numéricas y realiza la suma de ambas. Obtén con class() la clase de dicha variable suma Solución: # Definimos dos variables numéricas a &lt;- 1 b &lt;- -2 a + b [1] -1 class(a + b) [1] &quot;numeric&quot;   Ejercicio 4: construye una frase que diga «Hola, me llamo … y tengo … años». Solución: edad &lt;- 32 glue(&quot;Hola, me llamo {nombre_completo} y tengo {edad} años&quot;) Hola, me llamo Javier Crisben y tengo 32 años   Ejercicio 5: define una cadena de texto con \"mi código postal es 28045\". Calcula la longitud de la cadena y extrae la subcadena del lugar 3 al 17 con str_sub() (guarda dicha subcadena en una variable y) Solución: x &lt;- &quot;mi código postal es 28045&quot; y &lt;- str_sub(x, 3, 17) y [1] &quot; código postal &quot;   Ejercicio 6: con la subcadena y del ejercicio anterior, elimina los espacios solo de la izquierda y convierte a mayúsculas Solución: # Todo en una línea str_to_upper(str_trim(y, side = &quot;left&quot;)) [1] &quot;CÓDIGO POSTAL &quot; # Paso a paso z &lt;- str_trim(y, side = &quot;left&quot;) str_to_upper(z) [1] &quot;CÓDIGO POSTAL &quot;   Ejercicio 7: con la cadena x original, sustituye la subcadena “código postal” por “cp”. Solución: str_sub(x, 4, 16) &lt;- &quot;cp&quot;   "],["vectores.html", "Chapter 6 Vectores 6.1 Vectores numéricos 6.2 Secuencias numéricas con un patrón 6.3 Vectores de caracteres (texto) 6.4 Vectores lógicos (TRUE/FALSE) 6.5 Consejos 6.6  Ejercicios", " Chapter 6 Vectores Scripts usados: script06.R. Ver en https://github.com/Crisben/uleam-stat24/blob/main/scripts/script06.R Hemos visto ya como poder almacenar elementos individuales como la edad de una persona (edad &lt;- 32) o su nombre (nombre &lt;- \"Javi\"). ¿Y si en lugar de querer almacenar un solo elemento, por ejemplo , tenemos una colección de elementos (las edades de toda nuestra familia, por ejemplo)? En este capítulo vamos a ver un clásico de cualquier lenguaje de programación: los vectores o arrays, que no son más que una concatenación de elementos del mismo tipo. De hecho un número individual (por ejemplo, x &lt;- 1) es en realidad un vector de longitud uno (un solo elemento). Es el tipo de dato que más vas a usar ya que las columnas de cualquier tabla funcionarán como una concatenación de valores. Un vector es lo que solemos representar como \\(\\overrightarrow{x} = \\left[1, 2, 3 \\right]\\) en matemáticas, pero no te preocupes si nunca has visto esta forma de representarlos. Vamos a empezar de cero. 6.1 Vectores numéricos La forma más sencilla de crear un vector en R es con el comando c() (para acordarte: letra c de Concatenar), y basta con introducir sus elementos entre paréntesis, y separados por comas. Por ejemplo, supongamos que queremos guardar la edad de 4 personas (como si tuvieramos una columna edad en una tabla de 4 filas). edades &lt;- c(32, 27, 60, 61) edades [1] 32 27 60 61 Como ves ahora en el environment (el entorno, arriba a la derecha) tenemos una colección de elementos guardada, con cuatro elementos en concreto, almacenados en una misma variable edades. La longitud de un vector se puede calcular con el comando length() (nos devolverá el número de elementos de la variable que le pasemos como argumento). length(edades) [1] 4 Además podemos concatenar a su vez vectores (uno tras otro): vamos a concatenar el vector edades consigo mismo, y añadiéndole al final un 8. c(edades, edades, 8) [1] 32 27 60 61 32 27 60 61 8 Esta última concatenación lo que nos ha dado son, primero, los cuatro elementos que ya teníamos en edades, después de nuevo los cuatro elementos, y por último un 8. 6.2 Secuencias numéricas con un patrón En muchas ocasiones querremos crear vectores numéricos de una forma mucho más rápida. Supongamos que queremos un vector que nos almacene el número del mes, desde el 1 hasta el 31. Si construyéramos el vector como antes, tendríamos que ejecutar el comando c(1, 2, 3, 4, 5, ...) hasta llegar al número 31. ¿Un poco largo, no? Hay un atajo: el comando seq() nos permite crear una secuencia desde un elemento inicial hasta un elemento final, avanzando de uno en uno. seq(1, 31) # secuencia desde 1 hasta 31 de uno en uno [1] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 Es importante que no perdamos el foco: programar es similar a escribir en un idioma, por lo que si hay algo que se puede decir de una forma más limpia y que se entienda mejor, ¿por qué no usarlo? Siempre que queramos definir secuencias entre dos números naturales (por ejemplo, entre 1 y un valor n), cuya distancia entre elementos consecutivos sea uno, el comando 1:n nos devuelve lo mismo que la orden seq(1, n). Además, si el elemento inicial es mayor que el final, R entenderá solo que la secuencia la queremos decreciente. n &lt;- 31 1:n # secuencia desde 1 hasta n (31) de uno en uno [1] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 n:1 # secuencia decreciente [1] 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1   También podemos definir otro tipo de distancia entre dos elementos consecutivos (distancia conocida como paso de discretización), por ejemplo de 0.5 en 0.5, o de 1.7 en 1.7 seq(1, 10, by = 0.5) # secuencia desde 1 a 10 de 0.5 en 0.5 [1] 1.0 1.5 2.0 2.5 3.0 3.5 4.0 4.5 5.0 5.5 6.0 6.5 7.0 7.5 8.0 8.5 9.0 9.5 10.0 seq(1, 21, by = 1.7) # secuencia desde 1 a 21 de 1.7 en 1.7 [1] 1.0 2.7 4.4 6.1 7.8 9.5 11.2 12.9 14.6 16.3 18.0 19.7 Otras veces nos interesará definir una secuencia entre un valor inicial y un valor final, pero nos dará igual la distancia entre cada elemento: solo nos importa que tenga un número concreto de elementos (y que sea R el que decida la distancia entre elementos consecutivos para conseguirlo). seq(1, 50, l = 11) # secuencia desde 1 a 50 de longitud 11 [1] 1.0 5.9 10.8 15.7 20.6 25.5 30.4 35.3 40.2 45.1 50.0 seq(1, 50, l = 8) # secuencia desde 1 a 50 de longitud 8 [1] 1 8 15 22 29 36 43 50   Otro atajo que podemos usar para definir secuencias de números con un patrón es definir vectores de elementos repetidos, por ejemplo un vector lleno de ceros. La función rep() nos permite repetir un elemento un número fijado de veces. rep(0, 7) # vector de 7 ceros [1] 0 0 0 0 0 0 0 No solo podemos repetir un número sino que podemos repetir vectores enteros. rep(c(0, 1, 2), 4) # repetimos el vector c(0, 1, 2) 4 veces [1] 0 1 2 0 1 2 0 1 2 0 1 2 Esa repetición además podemos definirla también de forma intercalada: en lugar de repetir c(0, 1, 2) cuatro veces seguidas, queremos cuatro 0, después cuatro 1, y después cuatro 2. rep(c(0, 1, 2), each = 4) # cuatro 0, luego cuatro 1, luego cuatro 2 [1] 0 0 0 0 1 1 1 1 2 2 2 2 6.3 Vectores de caracteres (texto) Un error común es asociar el concepto de vectores solo a números: un vector es una colección o concatenación de elementos del mismo tipo, pero no tienen porque ser necesariamente números. Vamos a crear una frase de ejemplo, un vector de 4 elementos de tipo texto (en R se llaman char): \"Mi\", \"nombre\", \"es\" \"Javier\". Como antes, las variables de tipo char o character van entre comillas dobles, ya que es un cadena de texto. mi_nombre &lt;- c(&quot;Mi&quot;, &quot;nombre&quot;, &quot;es&quot;, &quot;Javier&quot;) mi_nombre [1] &quot;Mi&quot; &quot;nombre&quot; &quot;es&quot; &quot;Javier&quot; Fíjate la diferencia entre tenerlo guardado en un vector o tenerlo como una cadena unida library(stringr) variable &lt;- &quot;Mi nombre es Javier&quot; class(variable) [1] &quot;character&quot; str_length(variable) [1] 19 vector &lt;- c(&quot;Mi&quot;, &quot;nombre&quot;, &quot;es&quot;, &quot;Javier&quot;) class(vector) [1] &quot;character&quot; str_length(vector) [1] 2 6 2 6 Cuando aplicamos la función str_length() a un vector de caracteres, del paquete {stringr} que hemos visto en el tema anterior, la función se aplica A CADA ELEMENTO del vector (dándonos un vector de longitudes, de cada cadena que tenemos concatenada en el vector). Lo veremos con más detalle en el próximo tema. str_to_lower(vector) [1] &quot;mi&quot; &quot;nombre&quot; &quot;es&quot; &quot;javier&quot; str_detect(vector, &quot;i&quot;) # TRUE --&gt; si tiene letra i [1] TRUE FALSE FALSE TRUE   Ya tenemos nuestro primer vector de texto de longitud 4, y en cada elemento tenemos un texto. Cuando usamos la función paste() con variables diferentes, usábamos sep = ... para decidir el caracter con el que pegamos dichas cadenas texto. Cuando la función paste() la aplicamos a un vector de caracteres, decidiremos que caracter queremos que vaya entre palabra con el argumento collapse =. paste(mi_nombre, collapse = &quot;&quot;) # todo junto [1] &quot;MinombreesJavier&quot; paste(mi_nombre, collapse = &quot; &quot;) # separados por un espacio [1] &quot;Mi nombre es Javier&quot; paste(mi_nombre, collapse = &quot;.&quot;) # separados por un punto . [1] &quot;Mi.nombre.es.Javier&quot; paste0(mi_nombre) # todo junto sin nada separando [1] &quot;Mi&quot; &quot;nombre&quot; &quot;es&quot; &quot;Javier&quot; Ahora que sabemos lo que es un vector de números, por ejemplo el vector 1:7 (el conjunto de naturales desde el 1 hasta el 7), podemos definir cadenas de texto que compartan por ejemplo un prefijo (persona_1, persona_2, …) paste0(&quot;persona&quot;, 1:7) # a la palabra «persona» le pegamos los números del 1 al 7 [1] &quot;persona1&quot; &quot;persona2&quot; &quot;persona3&quot; &quot;persona4&quot; &quot;persona5&quot; &quot;persona6&quot; &quot;persona7&quot; paste(&quot;persona&quot;, 1:7, sep = &quot;_&quot;) # separado por una barra baja [1] &quot;persona_1&quot; &quot;persona_2&quot; &quot;persona_3&quot; &quot;persona_4&quot; &quot;persona_5&quot; &quot;persona_6&quot; &quot;persona_7&quot; De igual manera podemos hacer uso del ya conocido paquete {glue}, combinando cadenas de texto y vectores numéricos, obteniendo vectores de frases. library(glue) edad &lt;- 10:13 # edades glue(&quot;La edad es de {edad} años&quot;) La edad es de 10 años La edad es de 11 años La edad es de 12 años La edad es de 13 años # Otra forma sin definir variables a priori glue(&quot;La edad es de {10:13} años&quot;) La edad es de 10 años La edad es de 11 años La edad es de 12 años La edad es de 13 años 6.4 Vectores lógicos (TRUE/FALSE) [X] Variables numéricas (individuales) [X] Vectores de números [X] Vectores de caracteres [ ] Vectores lógicos Veamos un último tipo de vectores muy importante en todo lenguaje de programación: los vectores de valores lógicos. Un valor lógico puede tomar tres valores: TRUE (guardado internamente como un 1). FALSE (guardado internamente como un 0). NA (dato ausente, son las siglas de not available, cuando pretendemos aplicar una comparación a un dato ya de por si ausente). Los valores lógicos suelen ser resultado de evaluar condiciones lógicas, de hacerle preguntas a los datos. Por ejemplo, imaginemos que definimos un vector de temperaturas x &lt;- c(15, 20, 23, 31, 27, 7, 29, 10). ¿Qué días hizo menos de 22 grados? Basta con que ejecutemos la orden x &lt; 22, que nos devolverá TRUE o FALSE en cada hueco, en función de si cumple (TRUE) o no (FALSE) la condición pedida. x &lt;- c(15, 20, 23, 31, 27, 7, 29, 10) x &lt; 22 [1] TRUE TRUE FALSE FALSE FALSE TRUE FALSE TRUE El primer, segundo, sexto y octavo día, la temperatura fue inferior (estrictamente) a 22, de ahí que en el primer, segundo, sexto y octavo día elemento aparezca un TRUE y en el resto un FALSE. Es importante recordar que al evaluar una condición lógica sobre un vector, la salida sigue siendo un vector de la misma longitud pero con valores lógicos. Dicha condición lógica puede hacerse con otros operadores como &lt;= (menor o igual), &gt; (mayor) o &gt;= (mayor igual). x &lt;= 22 [1] TRUE TRUE FALSE FALSE FALSE TRUE FALSE TRUE x &gt; 30 [1] FALSE FALSE FALSE TRUE FALSE FALSE FALSE FALSE x &gt;= 15 [1] TRUE TRUE TRUE TRUE TRUE FALSE TRUE FALSE También podemos comparar si es igual a otro elemento, para lo que usaremos el operador ==, pudiendo usar también su opuesto != («distinto de»). x == 15 [1] TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE x != 15 [1] FALSE TRUE TRUE TRUE TRUE TRUE TRUE TRUE Si tuviéramos un dato ausente (por error del aparato ese día), la condición evaluada también sería ausente y &lt;- c(15, 20, NA, 31, 27, 7, 29, 10) y &lt; 22 [1] TRUE TRUE NA FALSE FALSE TRUE FALSE TRUE Las condiciones pueden ser combinadas, principalmente de dos maneras: Intersección: todas las condiciones concatenadas se deben cumplir (conjunción y, operador &amp;) para devolver un TRUE. Unión: basta con que una de las condiciones concatenadas se cumpla (conjunción o, operador |) para devolver un TRUE. Por ejemplo, vamos a calcular qué elementos del vector de temperaturas sean menores que 30 pero (y) mayores que 15 x &lt; 30 &amp; x &gt; 15 [1] FALSE TRUE TRUE FALSE TRUE FALSE TRUE FALSE Fíjate lo que sucede si no lo pedimos como intersección (ambas deben cumplirse) sino como unión (basta con que alguna se cumple) x &lt; 30 | x &gt; 15 [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE 6.5 Consejos CONSEJOS   Expresiones regulares Dentro del entorno de paquetes {tidyverse}, el paquete {stringr} permite un manejo más complejo de cadenas de texo (como el uso de expresiones regulares). Figure 6.1: Paquete stringr para manejar cadenas de texto más complejas   6.6  Ejercicios (haz click en las flechas para ver soluciones) Ejercicio 1: modifica el código inferior para crear un vector de nombre vector_num que contenga los números 1, 5 y -7. Solución: # Vector de números vector_num &lt;- c(1, 5, -7) vector_num [1] 1 5 -7 # Vector de números vector_num &lt;- c(1) vector_num   Ejercicio 2: define un vector que contenga los números 1, 10, -1 y 2, y guárdalo en una variable llamada vector_num. Solución: # Vector de números vector_num &lt;- c(1, 10, -1, 2) vector_num [1] 1 10 -1 2   Ejercicio 3: obtén la longitud del vector anterior vector_num. Solución: # Longitud del vector length(vector_num) [1] 4   Ejercicio 4: crea un vector con las palabras “Hola”, “me”, “llamo” (y tu nombre y apellidos), y pega luego sus elementos de forma que la frase esté correctamente escrita en castellano. Tras hacerlo, añade “y tengo 30 años”. Solución: # Definiendo el vector vector_char &lt;- c(&quot;Hola&quot;, &quot;me&quot;, &quot;llamo&quot;, &quot;Cristian&quot;) # Pegamos frase &lt;- paste(vector_char, collapse = &quot; &quot;) frase [1] &quot;Hola me llamo Cristian&quot; # Añadimos frase glue(&quot;{frase} y tengo 30 años.&quot;) Hola me llamo Cristian y tengo 30 años. # Otra forma paste0(frase, &quot; y tengo 30 años.&quot;) [1] &quot;Hola me llamo Cristian y tengo 30 años.&quot; # Otra forma paste(frase, &quot;y tengo 30 años.&quot;) [1] &quot;Hola me llamo Cristian y tengo 30 años.&quot;   Ejercicio 5: el código inferior crea una secuencia de números, que empieza en -1, que acaba en 32, y que va saltando de 2 en 2. Modíficalo para que haga el salto de 3 en 3 y guárdalo en una variable llamada secuencia Solución: secuencia &lt;- seq(-1, 32, by = 3) secuencia [1] -1 2 5 8 11 14 17 20 23 26 29 32 length(secuencia) # longitud de la secuencia [1] 12 seq(-1, 32, by = 2)   Ejercicio 6: crea una secuencia de números, que empiece en -1, que acabe en 32, y que tenga longitud 12. Solución: secuencia &lt;- seq(-1, 32, l = 12) secuencia [1] -1 2 5 8 11 14 17 20 23 26 29 32 length(secuencia) # longitud de la secuencia [1] 12   Ejercicio 7: crea una secuencia que empiece en 1 y recorra todos los naturales hasta el 10. Después crea otra secuencia de longitud 7 que todos los números sean 3. Solución: 1:10 [1] 1 2 3 4 5 6 7 8 9 10 rep(3, 7) # secuencia repetida [1] 3 3 3 3 3 3 3   Ejercicio 8: crea una secuencia que repita 5 veces el patrón 1, 2, 3. Después crea otra que repita dicho patrón pero de forma intercalada, con 5 veces 1, después 5 veces 2 y después 5 veces 3. Solución: rep(c(1, 2, 3), 5) # repetimos patrón (1, 2, 3) 5 veces [1] 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 rep(c(1, 2, 3), each = 5) # repetimos patrón alternado [1] 1 1 1 1 1 2 2 2 2 2 3 3 3 3 3   Ejercicio 9: crea una variable x &lt;- c(\"oso pardo\", \"oso polar\", \"ballena\", \"grillo\", \"oso panda\", \"perro\"). Haciendo uso de str_length() calcula la longitud de cada cadena de texto. Haciendo uso de str_detect() detecta los animales que son un oso. Solución: x &lt;- c(&quot;oso pardo&quot;, &quot;Oso polar&quot;, &quot;ballena&quot;, &quot;grillo&quot;, &quot;OSO panda&quot;, &quot;perro&quot;) str_length(x) # longitud [1] 9 9 7 6 9 5 # OJO! antes hay que pasar todo a mayúscula o minúscula, nos da igual que sea oso, OSO, Oso, etc str_detect(str_to_lower(x), &quot;oso&quot;) [1] TRUE TRUE FALSE FALSE TRUE FALSE "],["operacionesvectores.html", "Chapter 7 Operaciones con vectores 7.1 Vectores numéricos 7.2 Seleccionar elementos 7.3 Nombrando vectores: añadiendo metainformación 7.4 Ordenar 7.5 Consejos 7.6  Ejercicios", " Chapter 7 Operaciones con vectores Scripts usados: script07.R. Ver en https://github.com/Crisben/uleam-stat24/blob/main/scripts/script07.R 7.1 Vectores numéricos 7.1.1 Operaciones aritméticas Hemos dicho ya que un número es un vector de longitud 1, así que toda operación aritmética (suma, resta, multiplicación, etc) que podamos hacer con un número la vamos a poder a hacer con un vector de números. Si hacemos por ejemplo la operación 2 * x, siendo x un vector, lo que sucederá es que la operación se realizará en CADA ELEMENTO del vector. Esto es una ventaja enorme ya podremos escribir una sola línea de código pero realizar operaciones en 10, 20, 1000 o 100000 elementos (tantos como tenga el vector). # Multiplicamos por 2 a CADA ELEMENTO del vector x &lt;- c(2, 4, 6) 2 * x [1] 4 8 12 El resultado es por tanto otro vector. De la misma manera sucede si sumamos o restamos una constante. # Sumamos 3 a CADA ELEMENTO DEL VECTOR x + 3 [1] 5 7 9 # Restamos 5 a CADA ELEMENTO DEL VECTOR x - 5 [1] -3 -1 1 Los vectores también pueden interactuar entre ellos, así que podemos definir sumas de vectores, como x + y, con y &lt;- c(1, 3, 5) (por ejemplo), raíces cuadradas sqrt(x) o elevar cada elemento al cuadrado x^2. y &lt;- c(1, 3, 5) x + y # suma de vectores [1] 3 7 11 sqrt(x) # Hacemos la raíz cuadrada de CADA ELEMENTO DEL VECTOR [1] 1.414214 2.000000 2.449490 x^2 # Elevamos al cuadrado CADA ELEMENTO DEL VECTOR [1] 4 16 36   En R, salvo que especifiquemos lo contrario, toda operación ARITMÉTICA que hagas a un vector será elemento a elemento. Esto último es bastante importante que no se te olvide ya que en otros lenguajes no siempre es así.   Dado que la operación (por ejemplo, una suma) se realiza elemento a elemento, ¿qué sucederá si sumamos dos vectores de distinta longitud? Prueba a definir un vector z con los 4 primeros impares, e intentar hacer la suma x + z (un vector de longitud 3 más un vector de longitud 4). z &lt;- c(1, 3, 5, 7) x + z [1] 3 7 11 9 R intenta molestarte lo menos posible, así que lo que hace es reciclar elementos: si tiene un vector de 4 elementos y le intentas sumar uno de 3 elementos, lo que hará será reciclar elementos del vector con menor longitud: hará 1 + 2, 3 + 4, 5 + 6 pero… 7 + 2 (vuelve al primero).   Como hemos comentado anteriormente, los valores lógicos TRUE/FALSE son guardados internamente como 0/1 por lo que podemos usar operaciones aritméticas con ellos. Por ejemplo, si queremos averiguar el número de elementos de un vector que cumplen una condición lógica (por ejemplo, &lt; 3), los que lo hagan tendrán asignado un 1 y los que no un 0, por lo que basta con sumar dicho vector lógico para obtener el número de elementos que cumplen dicha condición (elementos que son TRUE). sum(x &lt; 3) # sumamos el vector de TRUE/FALSE --&gt; número de valores TRUE [1] 1 7.1.2 Operaciones estadísticas Al igual que podemos ejecutar operaciones aritméticas, podemos realizar también operaciones estadísticas con los vectores, como calcular su suma (sum()), su media (mean()), su mediana (median()) o su suma acumulada (cumsum() cada elemento lo acumula al anterior). Hagamos antes un breve repaso de algunos términos estadísticos: Media: medida de centralización que consiste en sumar todos los elementos y dividirlos entre la cantidad de elementos sumados. A pesar de ser la más conocida, la media es muy poco robusta: dado un conjunto, si se introducen valores atípicos o outliers (valores muy grandes o muy pequeños), la media se perturbar con mucha facilidad (por ejemplo, el salario medio en un país con mucha desigualdad no tiene valor estadístico ya que está perturbado por las altas fortunas). Dado un vector de valores \\(x = (x_1, \\ldots, x_n)\\), se denota como \\(\\overline{x}\\). \\[\\overline{x} = \\frac{\\displaystyle \\sum_{i=1}^{n}x_i}{n}\\] Mediana: medida de centralización que consiste en, tras ordenar los datos de menor a mayor, quedarnos con el valor que ocupa el medio (deja tantos números por debajo como por encima). Más robusta que la media aunque menos que la moda. Dado un vector de valores \\(x = (x_1, \\ldots, x_n)\\), se denota como \\(Me_x\\). \\[Me_x = \\displaystyle \\arg \\min_{x_i} \\left\\lbrace F_i &gt; 0.5 \\right\\rbrace, \\quad F_i = \\frac{\\#\\left\\lbrace x_j \\leq x_i \\right\\rbrace}{n}\\] Moda: medida de centralización que consiste en encontrar el valor más repetido (el valor trending). Es la medida de centralización más robusta. Dado un vector de valores \\(x = (x_1, \\ldots, x_n)\\), se denota como \\(Mo_x\\). \\[Mo_x = \\displaystyle \\arg \\max_{x_i} f_i , \\quad f_i = \\frac{\\#\\left\\lbrace x_j = x_i \\right\\rbrace}{n}\\]   He aquí un ejemplo de algunas funciones estadísticas útiles sum(y) # suma [1] 9 mean(y) # media [1] 3 median(y) # mediana [1] 3 cumsum(y) # suma acumulada [1] 1 4 9 Otra operación útil en estadística es calcular los percentiles con la función quantiles(). y &lt;- c(1, 2, 5, 5, 8, 9, 10, 10, 10, 11, 13, 15, 20, 23, 24, 29) quantile(y) # Percentiles por defecto: cuartiles (0%-25%-50%-75%-100%) 0% 25% 50% 75% 100% 1.00 7.25 10.00 16.25 29.00 Recuerda que en R algunas funciones tienen argumentos por defecto, argumentos que no necesitan ser asignados un valor a priori. En el ejemplo de calcular los percentiles con quantile(), hay un argumento por defecto (con un valor ya asignado sino se especifica lo contrario) que es probs = c(0, 0.25, 0.5, 0.75, 1). Pero dicho argumento por defecto puede ser cambiado, por ejemplo, para sacar los percentiles 15%-30%-70%-90%. y &lt;- c(1, 2, 5, 5, 8, 9, 10, 10, 10, 11, 13, 15, 20, 23, 24, 29) quantile(y, probs = c(0.15, 0.3, 0.7, 0.9)) # Percentiles p15, p30, p70 y p90 15% 30% 70% 90% 5.0 8.5 14.0 23.5 7.1.3 Operaciones con ausentes Imagina que tenemos un vector de temperaturas pero varios de los días el aparato de medición no funcionaba, por lo que tenemos un ausente NA. x &lt;- c(21, NA, 13, NA, NA, 25, 36, 17, 19, 5) sum(x) [1] NA Dado que hay días que no tenemos disponibles, la suma de todos los días tampoco la podemos conocer (salvo que obviemos los días donde no tenemos dato). Para evitar que un dato ausente en nuestros datos nos impida hacer ciertas operaciones, en muchas funciones de R podemos añadir el argumento na.rm = TRUE: primero elimina los datos ausentes, y luego ejecuta la función. # eliminando datos ausentes antes de aplicar la función sum(x, na.rm = TRUE) [1] 136 mean(x, na.rm = TRUE) [1] 19.42857 7.2 Seleccionar elementos Ya sabemos definir variables que sean vectores (recuerda: colección de valores del mismo tipo). ¿Y si del vector original queremos EXTRAER UN SUBCONJUNTO del mismo, por ejemplo, los primeros 10 elementos? R tiene varias formas de hacer esto pero la más sencilla es entendiendo que si yo quiero acceder al elemento i-ésimo de un vector, deberé usar el operador de selección [i]. Veamos un ejemplo: definimos las edades de cinco personas y queremos saber la edad de la persona que ocupa el tercer lugar. edades &lt;- c(20, 30, 32, NA, 61) edades[3] # accedemos a la edad de la tercera persona en la lista [1] 32 edades[4] # accedemos a la edad de la cuarta persona (que no la tenemos guardada) [1] NA Un número no es más que un vector de longitud uno, así que esta operación también la podemos aplicar usando un vector de índices a seleccionar, de forma que le podemos indicar simultaneamente que valores que queremos (por ejemplo, al tercer y cuarto elemento de nuestras edades). edades[c(3, 4)] # queremos acceder a la vez al tercer y cuarto elemento [1] 32 NA Esta lógica para acceder a elementos de vectores también sirve para nuestros vectores de caracteres. y &lt;- c(&quot;hola&quot;, &quot;qué&quot;, &quot;tal&quot;, &quot;todo&quot;, &quot;ok&quot;, &quot;?&quot;) y[1:2] # Solo queremos acceder a los elementos en la posición 1 y 2 [1] &quot;hola&quot; &quot;qué&quot; Para acceder al último elemento de un vector podemos pasarle como índice la longitud de dicho vector (si el vector tiene longitud 6, el último elemento ocupará el lugar 6). # Accedemos a los elementos en la posición 1, 2 y además el # que ocupa la última posición y[c(1:2, length(y))] [1] &quot;hola&quot; &quot;qué&quot; &quot;?&quot; Otras veces no querremos seleccionar un elemento en concreto sino filtrar algunos elementos en concreto y no extraerlos, eliminarlos, para lo cual deberemos repetir la misma operación pero con el signo - delante: el operador [-i] no selecciona el elemento i-ésimo del vector sino que lo elimina en nuestro filtro. y [1] &quot;hola&quot; &quot;qué&quot; &quot;tal&quot; &quot;todo&quot; &quot;ok&quot; &quot;?&quot; y[-2] # Nos muestra todo y salvo el elemento que ocupa la segunda posición [1] &quot;hola&quot; &quot;tal&quot; &quot;todo&quot; &quot;ok&quot; &quot;?&quot;   Sin embargo, lo habitual es que dicho filtro lo hagamos en base a una condición lógica. Supongamos que edades_1 &lt;- c(7, 20, 18, 3, 19, 9, 13, 3, 45) e edades_2 &lt;- c(17, 21, 58, 33, 15, 59, 13, 1, 45) son las edades de dos grupos de personas y que queremos quedarnos solo con los mayores edad. ¿Tenemos que andar averiguando en que posición se encuentran para luego seleccionarlos? No, vamos a seleccionar los elementos que cumplen una condición dada. edades_1 &lt;- c(7, 20, 18, 3, 19, 9, 13, 3, 45) edades_2 &lt;- c(17, 21, 58, 33, 15, 59, 13, 1, 45) edades_1[edades_1 &gt;= 18] # mayores de 18 años del conjunto x [1] 20 18 19 45 edades_2[edades_2 &gt;= 18] # mayores de 18 años del conjunto y [1] 21 58 33 59 45 Lo que hemos hecho ha sido pasar como índices a seleccionar un vector lógico TRUE/FALSE: solo filtrará los lugares donde se guarde un TRUE, aquellos que cumplen la condición lógica introducida. edades_1 &gt;= 18 # donde haya TRUE, lo seleccionará [1] FALSE TRUE TRUE FALSE TRUE FALSE FALSE FALSE TRUE edades_1[edades_1 &gt;= 18] # mayores de 18 años del conjunto x [1] 20 18 19 45 Esto también nos puede servir para limpiar de datos ausentes, combinando la función is.na(), que nos localiza el lugar que ocupan los ausentes, con el operador !, que lo que hace es negar el valor lógico que venga detrás. x &lt;- c(7, NA, 20, 3, 19, 21, 25, 80, NA) x[is.na(x)] # solo valores ausentes [1] NA NA x[!is.na(x)] # sin valores ausentes: ! es el símbolo de la negación [1] 7 20 3 19 21 25 80 También podemos probar a combinar condiciones lógicas para nuestra selección. x[x &gt;= 18 &amp; x &lt;= 25] # los valores que cumplen ambas (&amp;): entre 18 y 25 años [1] NA 20 19 21 25 NA Como ves, si un valor está ausente (NA), la evaluación de una condición lógica sobre él (mayor o menor de 18 años) nos seguirá devolviendo NA en dicho lugar   7.2.1 which Hemos visto como seleccionar elementos de un vector que cumplen una condición, para a veces no queremos el elemento en sí, sino el lugar que ocupa: ¿qué valores de un vector cumplen una condición lógica, qué lugar ocupan? Para obtener dicho índice tenemos a nuestro disposición la función which(), que no nos devuelve el elemento en sí sino su lugar. x &lt;- c(7, NA, 20, 3, 19, 21, 25, 80, NA) x[x &gt;= 18] # Accedemos a los elementos que cumplen la condición [1] NA 20 19 21 25 80 NA which(x &gt;= 18) # Obtenemos los lugares que ocupan los elementos que cumplen la condición [1] 3 5 6 7 8 Esta función es muy útil especialmente cuando queremos averiguar el valor que ocupa el máximo/mínimo de una colección de valores, con las funciones which.max() y which.min(). x [1] 7 NA 20 3 19 21 25 80 NA max(x, na.rm = TRUE) # máximo de x (si no eliminamos NA, nos devolverá NA) [1] 80 min(x, na.rm = TRUE) # mínimo de x (si no eliminamos NA, nos devolverá NA) [1] 3 which.max(x) # Lugar que ocupa el máximo [1] 8 which.min(x) # Lugar que ocupa el mínimo [1] 4 7.2.2 NULL A veces además de NA y NaN, R nos muestra un dato llamado NULL. Cuando tenemos NA en alguna variable, el registro existe, pero no está relleno. Sin embargo, cuando tenemos un NULL significa que ese valor ni siquiera existe: no es un dato guardado pero cuyo valor desconocemos, es un dato que ni siquiera existe (por ejemplo, si guardamos datos de 7 personas, el dato de la octava persona no es NA, es que no hay octava persona directamente). x &lt;- c(1, NA, 3, NA, NA, 5, 6) x[2] # NA: el registro existe pero sin dato [1] NA names(x) # No hemos definido el nombre de las variables, así que devuelve NULL NULL 7.3 Nombrando vectores: añadiendo metainformación Además R nos permite dar significado léxico a nuestros valores (significan algo, no solo números), pudiendo poner nombres a los elementos de un vector. x &lt;- c(&quot;edad&quot; = 31, &quot;tlf&quot; = 613910687, &quot;cp&quot; = 33007) # cada número tiene un significado distinto x edad tlf cp 31 613910687 33007 Esto es una ventaja ya que nos permite su selección usando dichos nombres: ya no elegimos el tercer número o el primero, sino el número que representa el teléfono y el código postal de una persona. x[c(&quot;edad&quot;, &quot;cp&quot;)] # seleccionamos los elementos que tienen ese nombre asignado edad cp 31 33007 Con la función names() podemos, no solo consultar los nombres de una variable, sino cambiarlos a nuestro gusto. names(x) # Consultamos nombres [1] &quot;edad&quot; &quot;tlf&quot; &quot;cp&quot; names(x) &lt;- c(&quot;años&quot;, &quot;móvil&quot;, &quot;dirección&quot;) # Cambiamos nombres names(x) # Consultamos nuevos nombres [1] &quot;años&quot; &quot;móvil&quot; &quot;dirección&quot; x años móvil dirección 31 613910687 33007 Más adelante dejaremos introducidos un tipo de dato más apropiado para guardar datos en «formato tabla», que se compondrá de una concetenación de concatenaciones, una concatenación de columnas (de vectores). 7.4 Ordenar Una acción habitual al trabajar con datos es saber ordenarlos: de menor a mayor edad, datos más recientes vs antiguos, etc. Para ello tenemos la función sort(), que podemos usar directamente para ordenar de menor a mayor. Vamos a ordenar, por ejemplo, una colección de edades de diferentes personas. edades &lt;- c(81, 7, 25, 41, 65, 20, 32, 23, 77) sort(edades) # orden de joven a mayor [1] 7 20 23 25 32 41 65 77 81 Por defecto, sort() ordena de menor a mayor. Con el argumento opcional decreasing = TRUE podemos ordenar de mayor a menor. sort(edades, decreasing = FALSE) # orden de mayor a joven [1] 7 20 23 25 32 41 65 77 81 Otra forma de ordenar un vector es que R nos devuelva los índices de los elementos ordenados, y luego usar dichos índices para reorganizar los elementos, con la función order(). order(x) [1] 1 3 2 x[order(x)] # accedemos a los índices ordenados años dirección móvil 31 33007 613910687 7.5 Consejos CONSEJOS   Operaciones estadísticas Como has podido comprobar, las operaciones ESTADÍSTICAS no se realizan elemento a elemento: la media o la suma las realiza tomando todos los elementos del vector.   all, any Existen dos funciones muy útiles en R para saber si TODOS o ALGUNO de los elementos de un vector cumple una condición. Las funciones all() y any() nos devolverá un único valor lógico. Estas funciones son muy útiles al final de los códigos para comprobar que las condiciones que tienen que verificar los datos se cumplen, y asegurarnos que el proceso se ha ejecutado correctamente (por ejemplo, que todos los datos sean positivos o no haya datos ausentes). x &lt;- c(1, 2, 3, 4, 5, NA, 7) all(x &lt; 3) [1] FALSE any(x &lt; 3) [1] TRUE all(x &gt; 0) [1] NA all(na.omit(x) &gt; 0) [1] TRUE all(is.na(x)) [1] FALSE any(is.na(x)) [1] TRUE   Argumentos por defecto La función sort() es un buen ejemplo de que las funciones traen definidos argumentos por defecto (aunque no los veamos a priori). La orden sort(x) en realidad está ejecutando sort(x, decreasing = TRUE), pero como es su valor por defecto, nos podemos ahorrar incluirlo. Escribe ? help sort() en la consola y verás como en la cabecera de la función ya hay preasignado un decreasing = TRUE.   Diferencia de conjuntos Una función muy útil para ver las diferencias entre dos conjuntos es setdiff(), una función que nos devuelve los elementos distintos entre dos conjuntos. y &lt;- 1:10 z &lt;- c(1, 3, 7, 10) setdiff(y, z) # Elementos en y que no están en z [1] 2 4 5 6 8 9   Optimiza tu código Aunque parezca un tema menor, si tu código tarda 1 milisegundo más de lo que podría tardar de otra forma, si esa orden se repite muchas veces, ese milisegundo extra puede ser 5, 10 o 20 minutos más que tu código tardará en ejecutarse. Hay un paquete muy útil en R para medir tiempos de distintas órdenes que hacen lo mismo (el paquete {microbenchmark}), vamos a instalarlo. install.packages(&quot;microbenchmark&quot;) library(microbenchmark) Este paquete contiene una orden para comparar el tiempo de dos órdenes: necesita como primeros argumentos las dos órdenes cuyos tiempos vamos a comparar, y un argumento times en el que le indicamos el número de veces que ejecutará cada orden para realizar los tiempos medios. Vamos a comparar los comandos de ordenación order() y sort(). x &lt;- rnorm(1e3) # 1000 elementos aleatorias de una normal N(0, 1) microbenchmark(sort(x), # primera forma x[order(x)], # segunda forma times = 1e3) # se repetirá 1000 veces Unit: microseconds expr min lq mean median uq max neval sort(x) 59.9 61.8 65.9568 62.9 66.8 225.8 1000 x[order(x)] 39.2 41.2 43.8467 42.3 44.0 125.8 1000 Aunque a priori parezca contraintuitivo, es más corto obtener los índices ordenados de un vector, y luego reordenarlo en base a esos índices, que la ordenación directa a través del comando sort() (ya que usan algoritmos de ordenación distintos). 7.6  Ejercicios (haz click en las flechas para ver soluciones) Ejercicio 1: define el vector x como la concatenación de los números 1, 10, -1 y 2, y calcula su suma. Solución: # Vector de números x &lt;- c(1, 10, -1, 2) # Suma sum(x) [1] 12   Ejercicio 2: define otro vector y que contenga los números 5, -7, 8, -3, y haz la suma de x e y. Solución: # Vector de números y &lt;- c(5, -7, 8, -3) # Suma x + y [1] 6 3 7 -1   Ejercicio 3: calcula el número de elementos mayores que 0 del resultado de la suma de x + y. Solución: sum((x + y) &gt; 0) [1] 3 # Otra forma suma &lt;- x + y sum(suma &gt; 0) [1] 3   Ejercicio 4: calcula la versión ordenada del vector x. Solución: # Ordenamos el vector (con sort) sort(x) [1] -1 1 2 10 # Ordenamos el vector (con order) x[order(x)] [1] -1 1 2 10   Ejercicio 5: encuentra del vector x original el lugar (el índice) que ocupa su mínimo y su máximo. Solución: x&lt;- c(1, 10, -1, 2) # Encontrando el lugar que ocupa el máximo y mínimo which.max(x) [1] 2 which.min(x) [1] 3   Ejercicio 6: encuentra del vector x los elementos mayores que 1 y menores que 7. Encuentra una forma de averiguar si todos los elementos son o no positivos. Solución: # Vector lógico: mayores que 1 y menores que 7 x &gt; 1 &amp; x &lt; 7 [1] FALSE FALSE FALSE TRUE # ¿Son todos positivos? Mira también any() all(x &gt; 0) [1] FALSE   Ejercicio 7: define el vector c(-1, 0, 4, 5, -2), calcula la raíz cuadrada del vector y determina que lugares son ausente de tipo NaN. Solución: # Vector z &lt;- c(-1, 0, 4, 5, -2) # ¿Cuáles son ausentes tras aplicar la raíz cuadrada? is.nan(sqrt(z)) [1] TRUE FALSE FALSE FALSE TRUE   Ejercicio 8: define el vector de los primeros números impares (hasta el 21) y extrae los elementos que ocupan los lugares 1, 4, 5, 8. Elimina del vector el segundo elemento Solución: # Vector de impares (de 1 a 21 saltando de dos en dos) x &lt;- seq(1, 21, by = 2) # Seleccionamos elementos x[c(1, 4, 5, 8)] [1] 1 7 9 15 # Eliminamos elementos y &lt;- x[-2] y [1] 1 5 7 9 11 13 15 17 19 21   Ejercicio 9: define una cadena de caracteres texto &lt;- c(\"oso polar\", \"oso pardo\", \"salamandra\", \"buho\", \"lechuza\", \"oso malayo\"). Usa str_count() para contabilizar el número de osos. Usa str_starts() para saber que elemento del vector es un oso o no. Obten la longitud de cada cadena. Sustituye en todas las cadenas la o por * Solución: texto &lt;- c(&quot;oso polar&quot;, &quot;oso pardo&quot;, &quot;salamandra&quot;, &quot;buho&quot;, &quot;lechuza&quot;, &quot;oso malayo&quot;) # Cuenta el número de cadenas que contienen la palabra &quot;oso&quot; str_count(texto, &quot;oso&quot;) [1] 1 1 0 0 0 1 # Nos devuelve TRUE en las cadenas que empiecen por &quot;oso&quot; str_starts(texto, &quot;oso&quot;) [1] TRUE TRUE FALSE FALSE FALSE TRUE str_ends(texto, &quot;oso&quot;) # devuelve todo FALSE [1] FALSE FALSE FALSE FALSE FALSE FALSE # Longitud de cada cadena str_length(texto) [1] 9 9 10 4 7 10 # Sustituimos en todas las oes por * str_replace_all(texto, &quot;o&quot;, &quot;*&quot;) [1] &quot;*s* p*lar&quot; &quot;*s* pard*&quot; &quot;salamandra&quot; &quot;buh*&quot; &quot;lechuza&quot; &quot;*s* malay*&quot; "],["fechas.html", "Chapter 8 Fechas 8.1 Funciones de lubridate 8.2 Consejos 8.3  Ejercicios", " Chapter 8 Fechas Scripts usados: script08.R. Ver en https://github.com/Crisben/uleam-stat24/blob/main/scripts/script08.R Variables numéricas (individuales) Variables de caracteres Variables lógicas Variables de tipo fecha Dado que el objetivo final es trabajar con datos, vamos a ver un tipo de datos muy especial: los datos de tipo fecha. Una fecha podríamos que no tiene nada de especial ya que una simple cadena de texto \"2021-04-21\". Sin embargo, representa un instante en el tiempo, que deberíamos poder operar como tal. ¿Qué sucedería si sumamos un 1 (un día) a una fecha definida como una cadena de texto? # Cadena de texto fecha_char &lt;- &quot;2021-04-21&quot; class(fecha_char) [1] &quot;character&quot; fecha_char + 1 Error in fecha_char + 1: argumento no-numérico para operador binario Como ves, da error, ya que a un texto no le podemos sumar un número (no distingue entre dicha cadena de texto y, por ejemplo, \"oso panda\"). Por suerte contamos con el paquete {lubridate}, con diferentes funcionalidades para trabajar con fechas. Empecemos con la función as_date(), que nos convierte una cadena de texto en un dato de tipo fecha. # install.packages(&quot;lubridate&quot;) library(lubridate) Fíjate en la diferencia. # Fecha, mostrada como un texto pero guardada internamente como un número fecha_date &lt;- as_date(fecha_char) class(fecha_date) [1] &quot;Date&quot; fecha_date + 1 # día siguiente [1] &quot;2021-04-22&quot; fecha_date - 3 # 3 días antes [1] &quot;2021-04-18&quot; En el momento en que convertimos la cadena de texto a fecha, aunque se visualice como un texto, internamente es un número, por lo que podemos restar fechas (días entre ambas), podemos sumar números a fechas (fecha días después), etc. Como ya hemos dicho, las fechas y momentos temporales no serán meras cadenas de caracteres sino que tienen clases especiales asociadas. Las fechas serán guardadas internamente como el número de días transcurridos desde el 1 de enero de 1970, y las horas como número de segundos desde el 1 de enero de 1970 (para la clase POSIXct) o una lista de segundos, minutos y horas (para la clase POSIXlt).   La función as_date() tiene un argumento opcional, el formato en la que le estamos la fecha, que por defecto será \"yyyy-mm-dd\" (año en 4 cifras, guión, mes en dos cifras, guión, día en dos cifras. Si introducimos otro tipo de formato de fecha, debemos especificárselo en un segundo argumento format = ..., para R sepa el formato de fecha que le estamos pasando as_date(&quot;10-03-2020&quot;, format = &quot;%d-%m-%Y&quot;) # con día-mes-año (4 cifras) [1] &quot;2020-03-10&quot; as_date(&quot;10-03-20&quot;, format = &quot;%d-%m-%y&quot;) # con día-mes-año (2 cifras) [1] &quot;2020-03-10&quot; as_date(&quot;03-10-2020&quot;, format = &quot;%m-%d-%Y&quot;) # con mes-día-año (4 cifras) [1] &quot;2020-03-10&quot; as_date(&quot;Octubre 21, 1995 21:24&quot;, format = &quot;%B %d, %Y %H:%M&quot;) # fecha escrita [1] &quot;1995-10-21&quot;   ERROR: sin pasar a fecha no se puede operar Si tenemos una fecha como caracter, nunca podremos hacer operaciones (por ejemplo, restarle una unidad temporal, en este caso un día). &quot;2021-03-10&quot; - 1 # error Error in &quot;2021-03-10&quot; - 1: argumento no-numérico para operador binario Fíjate la diferencia cuando lo convertimos en fecha fecha &lt;- as_date(&quot;2021-03-10&quot;) - 1 # día previo fecha [1] &quot;2021-03-09&quot;   8.1 Funciones de lubridate No solo podemos convertir la fecha con as_date(), indicándole el formato. Para facilitar conversiones de formatos habituales, el paquete {lubridate} tiene a nuestra disposición diferentes funciones preparadas para directamente convertir fechas en distintos formatos, como la función ymd_hms() o ydm_hms() ymd_hms(&quot;2017-11-28 14:02:00&quot;) # convertir a fecha una cadena año-mes-día + hora [1] &quot;2017-11-28 14:02:00 UTC&quot; ydm_hms(&quot;2017-22-12 10:00:00&quot;) # convertir a fecha una cadena año-día-mes + hora [1] &quot;2017-12-22 10:00:00 UTC&quot; De la misma manera tenemos la función dmy_hms() dmy_hms(&quot;1 Jan 2017 23:59:59&quot;) # convertir a fecha una cadena textual de fecha + hora [1] &quot;2017-01-01 23:59:59 UTC&quot; También podemos hacerlo de forma muy simplifica con mdy() y ymd() mdy(&quot;July 4th, 2000&quot;) # convertir a fecha una cadena textual de fecha [1] &quot;2000-07-04&quot; ymd(20170131) [1] &quot;2017-01-31&quot;   Otra de las funcionalidades que nos proporciona dicho paquetees obtener automáticamente la fecha de hoy, haciendo uso de la función today() hoy &lt;- today() class(hoy) # de clase fecha [1] &quot;Date&quot; hoy + 7 # dentro de una semana [1] &quot;2024-04-27&quot; También podemos obtener el «hoy y ahora» con la función now(), obteniendo no solo la fecha sino la hora. now() [1] &quot;2024-04-20 03:05:46 -05&quot;   También tenemos disponibles en dicho paquete funciones para extraer facilmente algunas variables temporales como el día de la semana, el mes o el cuatrimestre, con las funciones year(), months(), day(), hour(), week(), etc. fecha &lt;- now() year(fecha) [1] 2024 month(fecha) [1] 4 day(fecha) [1] 20 hour(fecha) [1] 3 minute(fecha) [1] 5 second(fecha) [1] 46.35713 week(fecha) # Número de semana (del año) [1] 16 También disponemos de la función wday(), que nos devuelve el día de la semana en el que estamos (por defecto, la semana empieza el domingo, pero podemos cambiarlo con el argumento opcional week_start = ...) wday(fecha) [1] 7 wday(fecha, week_start = 1) # Día de la semana (empezando por el lunes) [1] 6 Además si usamos otro argumento opcional label = TRUE (por defecto está en FALSE), nos convertirá dichos días de la semana en los nombres (en lugar de números) wday(fecha, week_start = 1, label = TRUE) [1] sáb\\\\. Levels: lun\\\\. &lt; mar\\\\. &lt; mié\\\\. &lt; jue\\\\. &lt; vie\\\\. &lt; sáb\\\\. &lt; dom\\\\.   Las funciones de month(), year(), day(), etc, pueden ser usadas tanto para extraer el valor como para cambiarlo, asignándole uno distinto # Mantenemos la misma fecha que la actual pero solo cambiando el año year(fecha) &lt;- 1891   Al igual que podemos realizar operaciones aritméticas sencillas con las fechas, también podemos realizar comparaciones, por ejemplo, si el día actual es menor o mayor que otra fecha dada. fecha_actual &lt;- now() fecha_actual &gt; ymd(20170131) # Actual vs 2017-01-31 [1] TRUE fecha_actual &gt; ymd(21000131) # Actual vs 2100-01-31 [1] FALSE   Con la función leap_year() podremos saber si la fecha corresponde a un año bisiesto leap_year(as_date(ymd(20190131))) [1] FALSE leap_year(as_date(ymd(20160131))) [1] TRUE También podemos hacer uso de diferentes funciones para añadir intervalos de tiempo a una fecha dada (que no sean solo días). fecha &lt;- now() fecha + weeks(0:3) [1] &quot;2024-04-20 03:05:47 -05&quot; &quot;2024-04-27 03:05:47 -05&quot; &quot;2024-05-04 03:05:47 -05&quot; &quot;2024-05-11 03:05:47 -05&quot; fecha + seconds(0:3) [1] &quot;2024-04-20 03:05:47 -05&quot; &quot;2024-04-20 03:05:48 -05&quot; &quot;2024-04-20 03:05:49 -05&quot; &quot;2024-04-20 03:05:50 -05&quot; 8.2 Consejos CONSEJOS   Recuperar un comando y autocompletar Si haces click con el ratón en la consola y pulsas la flecha «arriba» del teclado, te irá apareciendo todo el historial de órdenes ejecutadas. Es una manera de ahorrar tiempo para ejecutar órdenes similares a las ya ejecutadas. Si empiezas a escribir el nombre de una variable pero no te acuerdas exactamente de su nombre, pulsando tabulador te autocompletará solo.   Convertir tipos de datos A veces la lectura de variables numéricas de nuestros archivos puede hacer que un número, por ejemplo 1, sea leído como la cadena de texto \"1\", con la que no podemos operar como un número. Las funciones as.numeric(), as.character() y as.logical() nos permiten convertir una variable en tipo numérico, caracter o lógico, respectivamente. &quot;1&quot; + 1 Error in &quot;1&quot; + 1: argumento no-numérico para operador binario as.numeric(&quot;1&quot;) + 1 [1] 2 as.character(1) [1] &quot;1&quot; as.logical(c(0, 1)) [1] FALSE TRUE   8.3  Ejercicios (haz click en las flechas para ver soluciones) Ejercicio 1: obten la fecha de hoy, define la fecha de tu cumpleaños, y calcula la diferencia de días. Solución: # Hoy hoy &lt;- today() # Cumple (diferentes formatos de entrada) cumple &lt;- as_date(&quot;1989-09-10&quot;) # por defecto cumple &lt;- as_date(&quot;10-09-1989&quot;, format = &quot;%d-%m-%Y&quot;) # Diferencia hoy - cumple Time difference of 12641 days   Ejercicio 2: define la fecha de tu cumpleaños y determina si fue año bisiesto. Súmale 1-2-3-4-5 semanas. Solución: cumple &lt;- as_date(&quot;1989-09-10&quot;) # por defecto # Bisiesto leap_year(cumple) [1] FALSE # Sumamos semanaes cumple + weeks(1:5) [1] &quot;1989-09-17&quot; &quot;1989-09-24&quot; &quot;1989-10-01&quot; &quot;1989-10-08&quot; &quot;1989-10-15&quot;   Ejercicio 3: extrae el mes, año y día de la semana de tu cumpleaños Solución: # Mes month(cumple) [1] 9 # Año year(cumple) [1] 1989 # wday wday(cumple, week_start = 1) [1] 7 wday(cumple, week_start = 1, label = TRUE) [1] dom\\\\. Levels: lun\\\\. &lt; mar\\\\. &lt; mié\\\\. &lt; jue\\\\. &lt; vie\\\\. &lt; sáb\\\\. &lt; dom\\\\.   Ejercicio 4: calcula los días que han pasado desde la fecha de tu nacimiento Solución: seconds(today() - cumple) [1] &quot;12641S&quot;   "],["datos.html", "Chapter 9 Datos estructurados 9.1 Matrices 9.2 Tablas: data.frames 9.3 Consejos 9.4  Ejercicios", " Chapter 9 Datos estructurados Scripts usados: script09.R. Ver en https://github.com/Crisben/uleam-stat24/blob/main/scripts/script09.R Ya sabemos un poco la gramática y ortografía de nuestro lenguaje, y algunas de las funcionalidades básicas de nuestro «Word». Vamos a introducir cómo escribir la mejor trama para la novela: hablemos por fin de datos (introducción muy reducida). 9.1 Matrices Hasta ahora, si quisiéramos trabajar con los datos de una persona y lo imaginamos en un Excel, hemos aprendido algunos tipos básicos que pueden tomar las celdas, y hemos aprendido a formar columnas (vectores, colecciones de elementos del mismo tipo). Pero hasta ahora cada columna la hemos tratado por separado: una colección de números, otra de caracteres, fechas, etc. Pero de momento solo hemos visto solo datos en una dimensión: una sola variable de \\(n\\) elementos. # Ejemplos de variables unidimensionales (vectores) c(1, 4, NA, -2, 0) [1] 1 4 NA -2 0 c(&quot;a&quot;, NA, &quot;b&quot;, &quot;c&quot;) [1] &quot;a&quot; NA &quot;b&quot; &quot;c&quot; c(TRUE, TRUE, FALSE, TRUE) [1] TRUE TRUE FALSE TRUE c(today() - 1, today(), today() + 1) [1] &quot;2024-04-19&quot; &quot;2024-04-20&quot; &quot;2024-04-21&quot; Pero cuando analizamos datos solemos tener varias variables distintas de cada individuo, por ejemplo, la estatura y el peso de una persona. Necesitamos una «tabla», una manera de unir distintas variables numéricas, todas de IGUAL longitud. Y ese conjunto de variables (del mismo tipo e igual longitud), dispuestas en columnas, es lo que conocemos como matrices: una «tabla» de valores del mismo tipo, con filas y columnas. Vamos a empezar definiendo una matriz sencilla: imagina que tenemos las estaturas y pesos de 5 personas. estaturas &lt;- c(150, 160, 170, 180, 190) pesos &lt;- c(60, 70, 80, 90, 100) ¿Cómo juntar las dos variables creando nuestro primer conjunto de datos? Vamos a crear una matriz, un conjunto de números organizado en 2 columnas (una por variable) y 5 filas o registros (una por persona). Para ello usaremos la función cbind(), que nos concatena vectores de igual longitud en columnas. datos_matriz &lt;- cbind(estaturas, pesos) # Construimos la matriz por columnas datos_matriz # nuestra primera matriz estaturas pesos [1,] 150 60 [2,] 160 70 [3,] 170 80 [4,] 180 90 [5,] 190 100 Nuestro primer conjunto de datos :) Podemos visualizar la matriz en un formato «excelizado» con la función View() View(datos_matriz) Figure 9.1: Nuestra primera matriz de datos También podemos construir la matriz por filas con el comando rbind(), que nos permite añadir filas a una matriz o construirla desde cero (aunque lo habitual y recomendable es tener cada variable en una columna y cada individuo en una fila). rbind(estaturas, pesos) # Construimos la matriz por filas [,1] [,2] [,3] [,4] [,5] estaturas 150 160 170 180 190 pesos 60 70 80 90 100 Para practicar vamos a definir otro ejemplo, con las edades, teléfonos y códigos postales de una serie de individuos (fíjate que hay adrede datos ausentes, ya que a veces no tendremos datos de algunas personas de algunas variables). edades &lt;- c(14, 24, 56, 31, 20, 87, 73) # vector numérico de longitud 7 tlf &lt;- c(NA, 683839390, 621539732, 618211286, NA, 914727164, NA) cp &lt;- c(33007, 28019, 37005, 18003, 33091, 25073, 17140) # Construimos la matriz por columnas datos_matriz &lt;- cbind(edades, tlf, cp) datos_matriz edades tlf cp [1,] 14 NA 33007 [2,] 24 683839390 28019 [3,] 56 621539732 37005 [4,] 31 618211286 18003 [5,] 20 NA 33091 [6,] 87 914727164 25073 [7,] 73 NA 17140 De nuevo tenemos una tabla de números: una columna por variable y una fila por registro. Los comandos cbind() y rbind() no solo nos permiten crear matrices desde cero sino también añadir filas o columnas a matrices existentes. # Añadimos una fila rbind(datos_matriz, c(27, 620125780, 28051)) edades tlf cp [1,] 14 NA 33007 [2,] 24 683839390 28019 [3,] 56 621539732 37005 [4,] 31 618211286 18003 [5,] 20 NA 33091 [6,] 87 914727164 25073 [7,] 73 NA 17140 [8,] 27 620125780 28051 # Añadimos una columna cbind(datos_matriz, &quot;estaturas&quot; = c(160, 155, 170, 181, 174, NA, 165)) edades tlf cp estaturas [1,] 14 NA 33007 160 [2,] 24 683839390 28019 155 [3,] 56 621539732 37005 170 [4,] 31 618211286 18003 181 [5,] 20 NA 33091 174 [6,] 87 914727164 25073 NA [7,] 73 NA 17140 165 Como ves, ahora nuestros datos están tabulados, tienen dos dimensiones. ¿Cómo saber las dimensiones que tiene una matriz? Prueba a ejecutar la función dim(). dim(datos_matriz) [1] 7 3 Fíjate que dim() devuelve un vector de 2 elementos (las dos dimensiones), por lo que para acceder al número de filas deberemos ejecutar dim(x)[1] (y dim(x)[2] para el número de columnas). dim(datos_matriz)[1] [1] 7 dim(datos_matriz)[2] [1] 3 También tenemos a nuestra disposición las funciones nrow() y ncol(), que nos devuelven directamente el número de filas y columnas. nrow(datos_matriz) [1] 7 ncol(datos_matriz) [1] 3 Igual que a veces es útil generar un vector de elementos repetidos, también podemos definir una matriz de números repetidos (por ejemplo, de ceros), con la función matrix(), indicándole el número de filas y columnas. matrix(0, nrow = 5, ncol = 3) # 5 filas, 3 columnas, todo 0&#39;s [,1] [,2] [,3] [1,] 0 0 0 [2,] 0 0 0 [3,] 0 0 0 [4,] 0 0 0 [5,] 0 0 0 También podemos definir una matriz a partir de un vector numérico, reorganizando los valores en forma de matriz (con una dimensión tal que filas * columnas = longitud del vector), sabiendo que los elementos se van colocando por columnas (primeros valores en la primera columna, de arriba a abajo). z &lt;- matrix(1:15, ncol = 5) # Matriz con el vector 1:5 con 5 columnas (ergo 3 filas) z [,1] [,2] [,3] [,4] [,5] [1,] 1 4 7 10 13 [2,] 2 5 8 11 14 [3,] 3 6 9 12 15   Dada una matriz también podemos «darle vuelta» (lo que se conoce como matriz transpuesta, donde filas pasan a ser columnas y viceversa) con la función t(). datos_matriz edades tlf cp [1,] 14 NA 33007 [2,] 24 683839390 28019 [3,] 56 621539732 37005 [4,] 31 618211286 18003 [5,] 20 NA 33091 [6,] 87 914727164 25073 [7,] 73 NA 17140 t(datos_matriz) # Matriz transpuesta [,1] [,2] [,3] [,4] [,5] [,6] [,7] edades 14 24 56 31 20 87 73 tlf NA 683839390 621539732 618211286 NA 914727164 NA cp 33007 28019 37005 18003 33091 25073 17140 Con las matrices sucede como con los vectores: cuando aplicamos una operación aritmética, se la estamos aplicando elemento a elemento, por ejemplo, dividir entre 5 o sumar una constante datos_matriz / 5 edades tlf cp [1,] 2.8 NA 6601.4 [2,] 4.8 136767878 5603.8 [3,] 11.2 124307946 7401.0 [4,] 6.2 123642257 3600.6 [5,] 4.0 NA 6618.2 [6,] 17.4 182945433 5014.6 [7,] 14.6 NA 3428.0 datos_matriz + 3 edades tlf cp [1,] 17 NA 33010 [2,] 27 683839393 28022 [3,] 59 621539735 37008 [4,] 34 618211289 18006 [5,] 23 NA 33094 [6,] 90 914727167 25076 [7,] 76 NA 17143 También podemos crear matrices de otros tipos de datos, siempre y cuando las columnas sean del mismo tipo e igual longitud, por ejemplo una matriz de caracteres o una matriz de valores lógicos # matriz de caracteres nombres &lt;- c(&quot;Javier&quot;, &quot;Carlos&quot;, &quot;María&quot;, &quot;Paloma&quot;) apellidos &lt;- c(&quot;Alvarez&quot;, &quot;García&quot;, &quot;Pérez&quot;, &quot;Liébana&quot;) cbind(nombres, apellidos) nombres apellidos [1,] &quot;Javier&quot; &quot;Alvarez&quot; [2,] &quot;Carlos&quot; &quot;García&quot; [3,] &quot;María&quot; &quot;Pérez&quot; [4,] &quot;Paloma&quot; &quot;Liébana&quot; # matriz de valores lógicos var1 &lt;- c(TRUE, TRUE, FALSE, FALSE, TRUE) var2 &lt;- c(TRUE, FALSE, FALSE, TRUE, TRUE) cbind(var1, var2) var1 var2 [1,] TRUE TRUE [2,] TRUE FALSE [3,] FALSE FALSE [4,] FALSE TRUE [5,] TRUE TRUE cbind(var1, var2) + 1 var1 var2 [1,] 2 2 [2,] 2 1 [3,] 1 1 [4,] 1 2 [5,] 2 2 9.1.1 Acceder a elementos Si recuerdas para los vectores, usábamos el operador [i] para acceder al elemento i-ésimo. x &lt;- c(1, 2, 10, 67, -1, 0) x[3] # accedemos al tercer elemento [1] 10 x[c(3, 5)] # accedemos al tercer y quinto elemento [1] 10 -1 x[1:4] # accedemos al primero, segundo, tercero, cuarto elemento [1] 1 2 10 67 En el caso de las matrices la lógica será la misma: para acceder a la fila i-ésima de la matriz se usa el operador [i, ] (dejando libre el índice de la columna), mientras que para acceder a la columna j-ésima de la matriz se usaría el operador [, j] (dejando libre el índice de la fila). Para acceder conjuntamente al elemento (i, j) (fila i, columna j) se usa el operador [i, j]. datos_matriz edades tlf cp [1,] 14 NA 33007 [2,] 24 683839390 28019 [3,] 56 621539732 37005 [4,] 31 618211286 18003 [5,] 20 NA 33091 [6,] 87 914727164 25073 [7,] 73 NA 17140 datos_matriz[1, 3] # elemento (1, 3) cp 33007 datos_matriz[2, 2] # elemento (1, 3) tlf 683839390 datos_matriz[1, ] # fila 1 edades tlf cp 14 NA 33007 datos_matriz[, 3] # columna 3 [1] 33007 28019 37005 18003 33091 25073 17140 Si las columnas tienen nombres también podemos hacer uso de ellos para acceder a las columnas datos_matriz[, c(&quot;edades&quot;, &quot;tlf&quot;)] edades tlf [1,] 14 NA [2,] 24 683839390 [3,] 56 621539732 [4,] 31 618211286 [5,] 20 NA [6,] 87 914727164 [7,] 73 NA Incluso podemos asignar nombres a las filas de una matriz con row.names() y acceder a filas y columnas por nombres. row.names(datos_matriz) &lt;- c(&quot;Javi&quot;, &quot;Laura&quot;, &quot;Patricia&quot;, &quot;Carlos&quot;, &quot;Juan&quot;, &quot;Luis&quot;, &quot;Carla&quot;) datos_matriz[&quot;Javi&quot;, &quot;edades&quot;] [1] 14 9.1.2 Operaciones por filas y columnas (apply) Normalmente, para explicar las operaciones con matrices en un lenguaje de programación al uso, necesitaríamos hablar de una herramienta llamada bucles. Lo mencionaremos más adelante pero no los vamos a necesitar de momento (y cuántos menos los usemos en R, mejor) Imagina que tuviésemos nuestra matriz de estaturas y pesos. datos_matriz &lt;- cbind(estaturas, pesos) datos_matriz estaturas pesos [1,] 150 60 [2,] 160 70 [3,] 170 80 [4,] 180 90 [5,] 190 100 ¿Cómo podemos aplicar una operación para cada una de las filas o columnas de una matriz? Imagina que queremos obtener la media de cada columna (media de las estaturas y media de los pesos). Lo haremos con la función apply(), y le indicaremos como argumentos la matriz el sentido de la operación (MARGIN = 1 hará la opearción por filas, MARGIN = 2 hará la opearción por columnas) la función a aplicar por filas (o por columnas) # Media (mean) por columnas (MARGIN = 2) apply(datos_matriz, MARGIN = 2, FUN = &quot;mean&quot;) estaturas pesos 170 80 El resultado es un vector de longitud 2 (la media de las estaturas y la media del peso). La misma operación la podemos realizar por filas con MARGIN = 1 (aunque en este caso no tiene mucho sentido hacer la media de variables con magnitudes distintas) # Media por filas (MARGIN = 1) apply(datos_matriz, MARGIN = 1, FUN = &quot;mean&quot;) [1] 105 115 125 135 145 Si la función a aplicar requiere de argumentos extras, por ejemplo indicarle que ignore los datos ausentes con na.rm = TRUE, se lo podemos indicar al final como argumento extra. estaturas_bis &lt;- c(150, NA, 170, 180, 190) pesos_bis &lt;- c(60, 70, 80, NA, 100) datos_matriz_bis &lt;- cbind(estaturas_bis, pesos_bis) # Nos devolverá ausente porque en ambas columnas tenemos apply(datos_matriz_bis, MARGIN = 2, FUN = &quot;mean&quot;) estaturas_bis pesos_bis NA NA # Media por columnas (MARGIN = 2) ignorando los ausentes apply(datos_matriz_bis, MARGIN = 2, FUN = &quot;mean&quot;, na.rm = TRUE) estaturas_bis pesos_bis 172.5 77.5 9.2 Tablas: data.frames Recapitulando: Hemos visto los tipos de datos que podemos tener en cada celda. Hemos aprendido a recolectar datos de distintos individuos (vectores de edades, vectores de fechas, vectores de nombres). Siempre que sean del mismo tipo y longitud, hemos aprendido a juntar en un mismo objeto (matrices) variables distintas (edades, estaturas, alturas, por ejemplo). Retomemos nuestra matriz de datos, en la que teníamos para cada individuo guardado las edades (edades), teléfonos (tlf) y códigos postales (cp), y probemos a ver que pasa cuando seleccionamos la columna de edades y le sumamos un año a todas las personas datos_matriz estaturas pesos [1,] 150 60 [2,] 160 70 [3,] 170 80 [4,] 180 90 [5,] 190 100 # Sumamos un año a todas las personas datos_matriz[, &quot;pesos&quot;] + 1 [1] 61 71 81 91 101 ¿Qué sucede si ahora añadimos una columna con los nombres (tipo caracter) de cada persona? nombres &lt;- c(&quot;Sonia&quot;, &quot;Carla&quot;, &quot;Pepito&quot;, &quot;Carlos&quot;, &quot;Lara&quot;, &quot;Sandra&quot;, &quot;Javi&quot;) datos_matriz_nueva &lt;- cbind(nombres, datos_matriz) ¿Has visto lo que ha sucedido? Como una matriz SOLO puede tener un tipo de dato (todo números, todo texto, todo lógicas, todo fechas, etc), al añadir una variable de tipo texto, R se ha visto obligado a convertir los números en texto poniéndole comillas a los datos que tenemos: hemos roto la integridad de los datos. De hecho, como ahora los números con caracteres, no podremos sumar un año a cada persona como antes. datos_matriz_nueva[, &quot;edades&quot;] + 1 Error in datos_matriz_nueva[, &quot;edades&quot;]: subíndice fuera de los límites   Las matrices nos permiten almacenar distintas variables SIEMPRE Y CUANDO tengan Misma longitud (todas las columnas deben tener la misma longitud). Mismo tipo de dato (o todo números o todo caracteres, pero sin mezclar). Esto es bastante limitante ya que en la vida real nuestros datos tendrán variables de todo tipo. Veamos un ejemplo real: supongamos que queremos guardar de 7 personas las variables de texto nombres y apellidos. # Nombres nombres &lt;- c(&quot;Sonia&quot;, &quot;Carla&quot;, &quot;Pepito&quot;, &quot;Carlos&quot;, &quot;Lara&quot;, &quot;Sandra&quot;, &quot;Javi&quot;) # Apellidos apellidos &lt;- c(NA, &quot;González&quot;, &quot;Fernández&quot;, &quot;Martínez&quot;, &quot;Liébana&quot;, &quot;García&quot;, &quot;Ortiz&quot;) Hasta aquí no habría ningún problema ya que podemos crear una matriz de caracteres. matriz &lt;- cbind(nombres, apellidos) matriz nombres apellidos [1,] &quot;Sonia&quot; NA [2,] &quot;Carla&quot; &quot;González&quot; [3,] &quot;Pepito&quot; &quot;Fernández&quot; [4,] &quot;Carlos&quot; &quot;Martínez&quot; [5,] &quot;Lara&quot; &quot;Liébana&quot; [6,] &quot;Sandra&quot; &quot;García&quot; [7,] &quot;Javi&quot; &quot;Ortiz&quot; De esas 7 personas también disponemos información de si están o no casadas (representado en un valor lógico, casado) y algunos valores numéricos (edades, cp y tlf). # Código postal cp &lt;- c(28019, 28001, 34005, 18410, 33007, 34500, 28017) # Edades edades &lt;- c(45, 67, NA, 31, 27, 19, 50) # Teléfono tlf &lt;- c(618910564, 914718475, 934567891, 620176565, NA, NA, 688921344) # Estado civil (no lo sabemos de una persona) casado &lt;- c(TRUE, FALSE, FALSE, NA, TRUE, FALSE, FALSE) Por último, vamos a añadir a cada persona una fecha de registro en el sistema (fecha_creacion, imagina que fuese la fecha de expedición del DNI). # Fecha de creación (fecha en el que esa persona entra en el sistema) # lo convertimos a tipo fecha fecha_creacion &lt;- as_date(c(&quot;2021-03-04&quot;, &quot;2020-10-12&quot;, &quot;1990-04-05&quot;, &quot;2019-09-10&quot;, &quot;2017-03-21&quot;, &quot;2020-07-07&quot;, &quot;2000-01-28&quot;)) En cada variable tenemos 7 registros, uno por persona, pero ahora tenemos un popurrí de variables, de la misma longitud pero de tipos distintos: (edades, tlf, cp) son variables numéricas. (nombres, apellidos) son variables de texto. casado es una variable lógica. fecha_creacion de tipo fecha. ¿Qué sucedería si intentamos mezclar todo en una matriz? Vamos a unir las columnas con cbind(). # Juntamos todo en una matriz (juntamos por columnas) datos_matriz &lt;- cbind(nombres, apellidos, edades, tlf, cp, casado, fecha_creacion) datos_matriz nombres apellidos edades tlf cp casado fecha_creacion [1,] &quot;Sonia&quot; NA &quot;45&quot; &quot;618910564&quot; &quot;28019&quot; &quot;TRUE&quot; &quot;18690&quot; [2,] &quot;Carla&quot; &quot;González&quot; &quot;67&quot; &quot;914718475&quot; &quot;28001&quot; &quot;FALSE&quot; &quot;18547&quot; [3,] &quot;Pepito&quot; &quot;Fernández&quot; NA &quot;934567891&quot; &quot;34005&quot; &quot;FALSE&quot; &quot;7399&quot; [4,] &quot;Carlos&quot; &quot;Martínez&quot; &quot;31&quot; &quot;620176565&quot; &quot;18410&quot; NA &quot;18149&quot; [5,] &quot;Lara&quot; &quot;Liébana&quot; &quot;27&quot; NA &quot;33007&quot; &quot;TRUE&quot; &quot;17246&quot; [6,] &quot;Sandra&quot; &quot;García&quot; &quot;19&quot; NA &quot;34500&quot; &quot;FALSE&quot; &quot;18450&quot; [7,] &quot;Javi&quot; &quot;Ortiz&quot; &quot;50&quot; &quot;688921344&quot; &quot;28017&quot; &quot;FALSE&quot; &quot;10984&quot; Dado que en una matriz solo podemos almacenar datos del mismo tipo, los números los convierte a texto, las variables lógicas las convierte a texto (TRUE ahora es un valor lógico, \"TRUE\" es un texto, como \"Pepito\", sin significado lógico de verdadero/falso) y las fechas las ha convertido a texto (aunque las veas igual, ya no son de tipo de fecha, son texto y no podemos operar con ellas). # Días entre la primera y el segundo elemento de fecha de creación fecha_creacion[1] - fecha_creacion[2] Time difference of 143 days datos_matriz[1, 7] - datos_matriz[2, 7] Error in datos_matriz[1, 7] - datos_matriz[2, 7]: argumento no-numérico para operador binario   Vamos a aprender cómo juntar variables de distinto tipo, sin cambiar su naturaleza, como lo haríamos en una tabla de Excel. El formato de tabla de datos en R que vamos a empezar a usar desde ya se llama data.frame, y no es más que una colección de variables de igual longitud pero cada una puede ser de un tipo distinto. Para crear un data.frame basta con usar la función data.frame(), pasándole como argumentos (separados por comas) las variables que queremos reunir. # Creamos nuestro primer data.frame tabla &lt;- data.frame(nombres, apellidos, edades, tlf, cp, casado, fecha_creacion) tabla nombres apellidos edades tlf cp casado fecha_creacion 1 Sonia &lt;NA&gt; 45 618910564 28019 TRUE 2021-03-04 2 Carla González 67 914718475 28001 FALSE 2020-10-12 3 Pepito Fernández NA 934567891 34005 FALSE 1990-04-05 4 Carlos Martínez 31 620176565 18410 NA 2019-09-10 5 Lara Liébana 27 NA 33007 TRUE 2017-03-21 6 Sandra García 19 NA 34500 FALSE 2020-07-07 7 Javi Ortiz 50 688921344 28017 FALSE 2000-01-28 class(tabla) [1] &quot;data.frame&quot; Al igual que con las matrices, podemos crearlas indicando además el nombre de las columnas. tabla &lt;- data.frame(&quot;nombre&quot; = nombres, &quot;apellido&quot; = apellidos, &quot;edad&quot; = edades, &quot;teléfono&quot; = tlf, &quot;cp&quot; = cp, &quot;casado&quot; = casado, &quot;fecha_registro&quot; = fecha_creacion) tabla nombre apellido edad teléfono cp casado fecha_registro 1 Sonia &lt;NA&gt; 45 618910564 28019 TRUE 2021-03-04 2 Carla González 67 914718475 28001 FALSE 2020-10-12 3 Pepito Fernández NA 934567891 34005 FALSE 1990-04-05 4 Carlos Martínez 31 620176565 18410 NA 2019-09-10 5 Lara Liébana 27 NA 33007 TRUE 2017-03-21 6 Sandra García 19 NA 34500 FALSE 2020-07-07 7 Javi Ortiz 50 688921344 28017 FALSE 2000-01-28 ¡TENEMOS NUESTRO PRIMER CONJUNTO DE DATOS! Puedes visualizarlo de nuevo escribiendo su nombre en consola o con la función View() View(tabla) 9.2.1 Selección de columnas y filas Si tenemos un data.frame ya creado y queremos añadir una columna es tan simple como usar la función data.frame() que ya hemos visto para concatenar la columna. Vamos añadir por ejemplo una nueva variable, el número de hermanos de cada individuo. # Añadimos una nueva columna con nº de hermanos/as hermanos &lt;- c(0, 0, 1, 5, 2, 3, 0) tabla &lt;- data.frame(tabla, &quot;n_hermanos&quot; = hermanos) tabla nombre apellido edad teléfono cp casado fecha_registro n_hermanos 1 Sonia &lt;NA&gt; 45 618910564 28019 TRUE 2021-03-04 0 2 Carla González 67 914718475 28001 FALSE 2020-10-12 0 3 Pepito Fernández NA 934567891 34005 FALSE 1990-04-05 1 4 Carlos Martínez 31 620176565 18410 NA 2019-09-10 5 5 Lara Liébana 27 NA 33007 TRUE 2017-03-21 2 6 Sandra García 19 NA 34500 FALSE 2020-07-07 3 7 Javi Ortiz 50 688921344 28017 FALSE 2000-01-28 0 Si queremos acceder a una columna, fila o elemento en concreto, los data.frame tienen las mismas ventajas que una matriz, así que bastaría con usar los mismos operadores. tabla[, 3] # Accedemos a la tercera columna [1] 45 67 NA 31 27 19 50 tabla[5, ] # Accedemos a la quinta fila nombre apellido edad teléfono cp casado fecha_registro n_hermanos 5 Lara Liébana 27 NA 33007 TRUE 2017-03-21 2 tabla[5, 3] # Accedemos a la tercera variable del quinto registro [1] 27 Un data.frame no solo tiene las ventajas de una matriz si no que también tiene las ventajas de una «base» de datos. Por ejemplo, podemos aceder a las variables por el índice de columna que ocupan pero también acceder a las columnas por su nombre, poniendo el nombre de la tabla, el símbolo $ y, con el tabulador, nos aparecerá un menú de columnas a elegir. Figure 9.2: Menú desplegable de variables (columnas) de un data.frame. 9.2.2 Primer análisis de datos: arrestos en EE. UU. Además del conjunto de datos tabla que hemos construido artificialmente, vamos a instalar (sino lo hemos hecho nunca en este ordenador) un paquete muy útil en R llamado {datasets}. # Paquetes necesarios # install.packages(&quot;datasets&quot;) # Descomentar si nunca se ha instalado library(datasets) Ahora si escribimos datasets:: y pulsamos tabulador, se nos abre un desplegable con distintos conjuntos de datos reales para ser usados: el paquete datasets nos proporciona data.frames de prueba para que podamos usarlos. Vamos a jugar con el conjunto de datos datasets::USArrests, que contiene estadísticas de arrestos en 1973 (por cada 100 000 habitantes) por agresión, asesinato y violación, en cada uno de los 50 estados de Estaods Unidos. datasets::USArrests View(USArrests) ¿Cómo visualizar la cabecera de la tabla? Con la función head(). head(USArrests) Murder Assault UrbanPop Rape Alabama 13.2 236 58 21.2 Alaska 10.0 263 48 44.5 Arizona 8.1 294 80 31.0 Arkansas 8.8 190 50 19.5 California 9.0 276 91 40.6 Colorado 7.9 204 78 38.7 ¿Cómo obtener el nombre de las variables? Con la función names(). names(USArrests) [1] &quot;Murder&quot; &quot;Assault&quot; &quot;UrbanPop&quot; &quot;Rape&quot; El conjunto contiene los 3 tipos de delito mencionados (para cada estado), y además el porcentaje de población que vive en áreas urbanas. Esto lo podemos saber ejecutando la ayuda con ? datasets::USArrests. ¿Cómo obtener el nombre de las filas (de los estados)? Con la función row.names(). row.names(USArrests) [1] &quot;Alabama&quot; &quot;Alaska&quot; &quot;Arizona&quot; &quot;Arkansas&quot; &quot;California&quot; &quot;Colorado&quot; &quot;Connecticut&quot; [8] &quot;Delaware&quot; &quot;Florida&quot; &quot;Georgia&quot; &quot;Hawaii&quot; &quot;Idaho&quot; &quot;Illinois&quot; &quot;Indiana&quot; [15] &quot;Iowa&quot; &quot;Kansas&quot; &quot;Kentucky&quot; &quot;Louisiana&quot; &quot;Maine&quot; &quot;Maryland&quot; &quot;Massachusetts&quot; [22] &quot;Michigan&quot; &quot;Minnesota&quot; &quot;Mississippi&quot; &quot;Missouri&quot; &quot;Montana&quot; &quot;Nebraska&quot; &quot;Nevada&quot; [29] &quot;New Hampshire&quot; &quot;New Jersey&quot; &quot;New Mexico&quot; &quot;New York&quot; &quot;North Carolina&quot; &quot;North Dakota&quot; &quot;Ohio&quot; [36] &quot;Oklahoma&quot; &quot;Oregon&quot; &quot;Pennsylvania&quot; &quot;Rhode Island&quot; &quot;South Carolina&quot; &quot;South Dakota&quot; &quot;Tennessee&quot; [43] &quot;Texas&quot; &quot;Utah&quot; &quot;Vermont&quot; &quot;Virginia&quot; &quot;Washington&quot; &quot;West Virginia&quot; &quot;Wisconsin&quot; [50] &quot;Wyoming&quot; ¿Cómo averiguar el número de registros y el número de variables? Con las funciones dim(), nrow() y ncol(). dim(USArrests) [1] 50 4 nrow(USArrests) [1] 50 ncol(USArrests) [1] 4 ¿Cómo seleccionar solo las columnas Murder y Assault para el segundo y el décimo estado? USArrests[c(2, 10), c(&quot;Murder&quot;, &quot;Assault&quot;)] Murder Assault Alaska 10.0 263 Georgia 17.4 211   ¿Cómo cambiar el nombre de las variables? Con la función names(). names(USArrests) &lt;- c(&quot;asesinato&quot;, &quot;agresion&quot;, &quot;pobl_urbana&quot;, &quot;violacion&quot;)   ¿Cómo seleccionar y filtrar datos? En el caso de los data.frame tenemos además a nuestro disposición una herramienta muy potente: la función subset(). Dicha función nos va a permitir seleccionar filas y columnas a la vez, tomando de entrada los siguientes argumentos x: una tabla de entrada, un data.frame de entrada. subset: la condición lógica que queramos usar para seleccionar registros (filas). select: un vector que contenga el nombre de las columnas que queremos seleccionar (a lo mejor solo queremos filtrar por filas pero quizás también por columnas). Por ejemplo, vamos a seleccionar solo los delitos de asesinato de aquellos estados cuyo porcentaje de población urbana sea superior al 70%. subset(USArrests, subset = pobl_urbana &gt; 70, select = c(&quot;asesinato&quot;)) asesinato Arizona 8.1 California 9.0 Colorado 7.9 Connecticut 3.3 Delaware 5.9 Florida 15.4 Hawaii 5.3 Illinois 10.4 Massachusetts 4.4 Michigan 12.1 Nevada 12.2 New Jersey 7.4 New York 11.1 Ohio 7.3 Pennsylvania 6.3 Rhode Island 3.4 Texas 12.7 Utah 3.2 Washington 4.0 Como sucedía en otros contextos, podemos combinar condiciones lógicas, seleccionando por ejemplo aquellos estados cuyo porcentaje de población urbana sea inferior al 70% y donde las agresiones sean superiores a 250 por cada 100 000 habitantes, pero luego seleccionando solo dos variables. subset(USArrests, subset = pobl_urbana &lt; 70 &amp; agresion &gt; 250, select = c(&quot;asesinato&quot;, &quot;violacion&quot;)) asesinato violacion Alaska 10.0 44.5 Maryland 11.3 27.8 Mississippi 16.1 17.1 North Carolina 13.0 16.1 South Carolina 14.4 22.5 9.3 Consejos CONSEJOS   Acceder a las funciones de los paquetes A veces puede que no queramos cargar todo un paquete sino solo una función del mismo, para lo que es suficiente nombre_paquete::nombre_funcion. Recuerda que instalar un paquete es cómo comprar un libro, cargar el paquete con library() es cómo traer el libro comprado de la estantería a tu mesa, y usar solo una función con nombre_paquete::nombre_funcion es cómo pedirle a alguien que te arranque solo una página y te la traiga a la mesa.   9.4  Ejercicios (haz click en las flechas para ver soluciones) Ejercicio 1: modifica el código para definir una matriz x de ceros de 3 filas y 7 columnas. Solución: # Matriz x &lt;- matrix(0, nrow = 3, ncol = 7) x [,1] [,2] [,3] [,4] [,5] [,6] [,7] [1,] 0 0 0 0 0 0 0 [2,] 0 0 0 0 0 0 0 [3,] 0 0 0 0 0 0 0 # Matriz x &lt;- matrix(0, nrow = 2, ncol = 3) x   Ejercicio 2: a la matriz anterior, suma un 1 a cada número de la matriz y divide el resultado entre 5. Solución: (x + 1) / 5 [,1] [,2] [,3] [,4] [,5] [,6] [,7] [1,] 0.2 0.2 0.2 0.2 0.2 0.2 0.2 [2,] 0.2 0.2 0.2 0.2 0.2 0.2 0.2 [3,] 0.2 0.2 0.2 0.2 0.2 0.2 0.2   Ejercicio 3: tras definir la matriz x calcula su transpuesta y obtén sus dimensiones Solución: # Transpuesta t(x) [,1] [,2] [,3] [1,] 0 0 0 [2,] 0 0 0 [3,] 0 0 0 [4,] 0 0 0 [5,] 0 0 0 [6,] 0 0 0 [7,] 0 0 0 # Dimensiones transpuesta: pasa de ser 3x7 a 7x3 dim(t(x)) [1] 7 3 ncol(t(x)) # número de columnas de la transpuesta [1] 3 nrow(t(x)) # número de filas de la transpuesta [1] 7   Ejercicio 4: el siguiente código define una matriz de dimensiones 4 x 3 y calcula la suma por columnas. Modifica el código para que realice la suma por filas. Solución: # Matriz matriz &lt;- matrix(1:12, nrow = 4) # Suma por filas apply(matriz, MARGIN = 1, FUN = &quot;sum&quot;) [1] 15 18 21 24 # Matriz matriz &lt;- matrix(1:12, nrow = 4) # Suma por columnas apply(matriz, MARGIN = 2, FUN = &quot;sum&quot;) [1] 10 26 42   Ejercicio 5: con la matriz anterior definida como matrix(1:12, nrow = 4), calcula la media de todos los elementos, la media de cada fila y la media de cada columna. Solución: # Matriz matriz &lt;- matrix(1:12, nrow = 4) # media de todos mean(matriz) [1] 6.5 # Media por filas (MARGIN = 1 ya que es una operación por filas) apply(matriz, MARGIN = 1, FUN = &quot;mean&quot;) [1] 5 6 7 8 # Media por filas (MARGIN = 2 ya que es una operación por filas) apply(matriz, MARGIN = 2, FUN = &quot;mean&quot;) [1] 2.5 6.5 10.5   Ejercicio 6: el data.frame llamado airquality, del paquete {datasets}, contiene variables de la calidad del aire de la ciudad de Nueva York desde mayo hasta septiembre de 1973. Obtén el nombre de las variables. Solución: library(datasets) names(airquality) [1] &quot;Ozone&quot; &quot;Solar.R&quot; &quot;Wind&quot; &quot;Temp&quot; &quot;Month&quot; &quot;Day&quot;   Ejercicio 7: obtén las dimensiones del conjunto de datos. ¿Cuántas variables hay? ¿Cuántos días se han medido? Solución: # Dimensiones dim(airquality) [1] 153 6 nrow(airquality) [1] 153 ncol(airquality) [1] 6   Ejercicio 8: modifica el código inferior para que nos filtre solo los datos del mes de julio. Solución: # Filtramos filas filtro_fila &lt;- subset(airquality, subset = Month == 7) filtro_fila Ozone Solar.R Wind Temp Month Day 62 135 269 4.1 84 7 1 63 49 248 9.2 85 7 2 64 32 236 9.2 81 7 3 65 NA 101 10.9 84 7 4 66 64 175 4.6 83 7 5 67 40 314 10.9 83 7 6 68 77 276 5.1 88 7 7 69 97 267 6.3 92 7 8 70 97 272 5.7 92 7 9 71 85 175 7.4 89 7 10 72 NA 139 8.6 82 7 11 73 10 264 14.3 73 7 12 74 27 175 14.9 81 7 13 75 NA 291 14.9 91 7 14 76 7 48 14.3 80 7 15 77 48 260 6.9 81 7 16 78 35 274 10.3 82 7 17 79 61 285 6.3 84 7 18 80 79 187 5.1 87 7 19 81 63 220 11.5 85 7 20 82 16 7 6.9 74 7 21 83 NA 258 9.7 81 7 22 84 NA 295 11.5 82 7 23 85 80 294 8.6 86 7 24 86 108 223 8.0 85 7 25 87 20 81 8.6 82 7 26 88 52 82 12.0 86 7 27 89 82 213 7.4 88 7 28 90 50 275 7.4 86 7 29 91 64 253 7.4 83 7 30 92 59 254 9.2 81 7 31 # Filtramos filas filtro_fila &lt;- subset(., subset = Month &lt; 6) filtro_fila   Ejercicio 9: del conjunto airquality selecciona aquellos datos que no sean ni de julio ni de agosto. Solución: # Filtramos filas filtro_fila &lt;- subset(airquality, subset = !(Month %in% c(7, 8))) filtro_fila Ozone Solar.R Wind Temp Month Day 1 41 190 7.4 67 5 1 2 36 118 8.0 72 5 2 3 12 149 12.6 74 5 3 4 18 313 11.5 62 5 4 5 NA NA 14.3 56 5 5 6 28 NA 14.9 66 5 6 7 23 299 8.6 65 5 7 8 19 99 13.8 59 5 8 9 8 19 20.1 61 5 9 10 NA 194 8.6 69 5 10 11 7 NA 6.9 74 5 11 12 16 256 9.7 69 5 12 13 11 290 9.2 66 5 13 14 14 274 10.9 68 5 14 15 18 65 13.2 58 5 15 16 14 334 11.5 64 5 16 17 34 307 12.0 66 5 17 18 6 78 18.4 57 5 18 19 30 322 11.5 68 5 19 20 11 44 9.7 62 5 20 21 1 8 9.7 59 5 21 22 11 320 16.6 73 5 22 23 4 25 9.7 61 5 23 24 32 92 12.0 61 5 24 25 NA 66 16.6 57 5 25 26 NA 266 14.9 58 5 26 27 NA NA 8.0 57 5 27 28 23 13 12.0 67 5 28 29 45 252 14.9 81 5 29 30 115 223 5.7 79 5 30 31 37 279 7.4 76 5 31 32 NA 286 8.6 78 6 1 33 NA 287 9.7 74 6 2 34 NA 242 16.1 67 6 3 35 NA 186 9.2 84 6 4 36 NA 220 8.6 85 6 5 37 NA 264 14.3 79 6 6 38 29 127 9.7 82 6 7 39 NA 273 6.9 87 6 8 40 71 291 13.8 90 6 9 41 39 323 11.5 87 6 10 42 NA 259 10.9 93 6 11 43 NA 250 9.2 92 6 12 44 23 148 8.0 82 6 13 45 NA 332 13.8 80 6 14 46 NA 322 11.5 79 6 15 47 21 191 14.9 77 6 16 48 37 284 20.7 72 6 17 49 20 37 9.2 65 6 18 50 12 120 11.5 73 6 19 51 13 137 10.3 76 6 20 52 NA 150 6.3 77 6 21 53 NA 59 1.7 76 6 22 54 NA 91 4.6 76 6 23 55 NA 250 6.3 76 6 24 56 NA 135 8.0 75 6 25 57 NA 127 8.0 78 6 26 58 NA 47 10.3 73 6 27 59 NA 98 11.5 80 6 28 60 NA 31 14.9 77 6 29 61 NA 138 8.0 83 6 30 124 96 167 6.9 91 9 1 125 78 197 5.1 92 9 2 126 73 183 2.8 93 9 3 127 91 189 4.6 93 9 4 128 47 95 7.4 87 9 5 129 32 92 15.5 84 9 6 130 20 252 10.9 80 9 7 131 23 220 10.3 78 9 8 132 21 230 10.9 75 9 9 133 24 259 9.7 73 9 10 134 44 236 14.9 81 9 11 135 21 259 15.5 76 9 12 136 28 238 6.3 77 9 13 137 9 24 10.9 71 9 14 138 13 112 11.5 71 9 15 139 46 237 6.9 78 9 16 140 18 224 13.8 67 9 17 141 13 27 10.3 76 9 18 142 24 238 10.3 68 9 19 143 16 201 8.0 82 9 20 144 13 238 12.6 64 9 21 145 23 14 9.2 71 9 22 146 36 139 10.3 81 9 23 147 7 49 10.3 69 9 24 148 14 20 16.6 63 9 25 149 30 193 6.9 70 9 26 150 NA 145 13.2 77 9 27 151 14 191 14.3 75 9 28 152 18 131 8.0 76 9 29 153 20 223 11.5 68 9 30   Ejercicio 10: modifica el siguiente código para quedarte solo con las variable Ozone y Temp. Solución: # Filtramos columnas filtro_col &lt;- subset(airquality, select = c(&quot;Ozone&quot;, &quot;Temp&quot;)) filtro_col Ozone Temp 1 41 67 2 36 72 3 12 74 4 18 62 5 NA 56 6 28 66 7 23 65 8 19 59 9 8 61 10 NA 69 11 7 74 12 16 69 13 11 66 14 14 68 15 18 58 16 14 64 17 34 66 18 6 57 19 30 68 20 11 62 21 1 59 22 11 73 23 4 61 24 32 61 25 NA 57 26 NA 58 27 NA 57 28 23 67 29 45 81 30 115 79 31 37 76 32 NA 78 33 NA 74 34 NA 67 35 NA 84 36 NA 85 37 NA 79 38 29 82 39 NA 87 40 71 90 41 39 87 42 NA 93 43 NA 92 44 23 82 45 NA 80 46 NA 79 47 21 77 48 37 72 49 20 65 50 12 73 51 13 76 52 NA 77 53 NA 76 54 NA 76 55 NA 76 56 NA 75 57 NA 78 58 NA 73 59 NA 80 60 NA 77 61 NA 83 62 135 84 63 49 85 64 32 81 65 NA 84 66 64 83 67 40 83 68 77 88 69 97 92 70 97 92 71 85 89 72 NA 82 73 10 73 74 27 81 75 NA 91 76 7 80 77 48 81 78 35 82 79 61 84 80 79 87 81 63 85 82 16 74 83 NA 81 84 NA 82 85 80 86 86 108 85 87 20 82 88 52 86 89 82 88 90 50 86 91 64 83 92 59 81 93 39 81 94 9 81 95 16 82 96 78 86 97 35 85 98 66 87 99 122 89 100 89 90 101 110 90 102 NA 92 103 NA 86 104 44 86 105 28 82 106 65 80 107 NA 79 108 22 77 109 59 79 110 23 76 111 31 78 112 44 78 113 21 77 114 9 72 115 NA 75 116 45 79 117 168 81 118 73 86 119 NA 88 120 76 97 121 118 94 122 84 96 123 85 94 124 96 91 125 78 92 126 73 93 127 91 93 128 47 87 129 32 84 130 20 80 131 23 78 132 21 75 133 24 73 134 44 81 135 21 76 136 28 77 137 9 71 138 13 71 139 46 78 140 18 67 141 13 76 142 24 68 143 16 82 144 13 64 145 23 71 146 36 81 147 7 69 148 14 63 149 30 70 150 NA 77 151 14 75 152 18 76 153 20 68 filtro_col &lt;- subset(., select = c(&quot;Ozone&quot;)) filtro_col   Ejercicio 11: del conjunto airquality selecciona los datos de temperatura y viento de agosto. Solución: # Todo de una vez filtro &lt;- subset(airquality, subset = Month == 8, select = c(&quot;Temp&quot;, &quot;Wind&quot;)) filtro Temp Wind 93 81 6.9 94 81 13.8 95 82 7.4 96 86 6.9 97 85 7.4 98 87 4.6 99 89 4.0 100 90 10.3 101 90 8.0 102 92 8.6 103 86 11.5 104 86 11.5 105 82 11.5 106 80 9.7 107 79 11.5 108 77 10.3 109 79 6.3 110 76 7.4 111 78 10.9 112 78 10.3 113 77 15.5 114 72 14.3 115 75 12.6 116 79 9.7 117 81 3.4 118 86 8.0 119 88 5.7 120 97 9.7 121 94 2.3 122 96 6.3 123 94 6.3   Ejercicio 12: calcula el número de filas borradas del ejercicio anterior. Tras hacer todo ello, traduce a castellano el nombre de las columnas del data.frame filtrado. Solución: # Filas borradas nrow(airquality) - nrow(filtro) [1] 122 # Cambiamos nombres a castellano del conjunto filtrado names(filtro) &lt;- c(&quot;temperatura&quot;, &quot;viento&quot;)   Ejercicio 13: añade a los datos originales una columna con la fecha completa (recuerda que es del año 1973 todas las observaciones. Solución: # Construimos las fechas (pegamos año-mes-día con &quot;-&quot;) fechas &lt;- as_date(paste(&quot;1973&quot;, airquality$Month, airquality$Day, sep = &quot;-&quot;)) # Añadimos data.frame(airquality, fechas) Ozone Solar.R Wind Temp Month Day fechas 1 41 190 7.4 67 5 1 1973-05-01 2 36 118 8.0 72 5 2 1973-05-02 3 12 149 12.6 74 5 3 1973-05-03 4 18 313 11.5 62 5 4 1973-05-04 5 NA NA 14.3 56 5 5 1973-05-05 6 28 NA 14.9 66 5 6 1973-05-06 7 23 299 8.6 65 5 7 1973-05-07 8 19 99 13.8 59 5 8 1973-05-08 9 8 19 20.1 61 5 9 1973-05-09 10 NA 194 8.6 69 5 10 1973-05-10 11 7 NA 6.9 74 5 11 1973-05-11 12 16 256 9.7 69 5 12 1973-05-12 13 11 290 9.2 66 5 13 1973-05-13 14 14 274 10.9 68 5 14 1973-05-14 15 18 65 13.2 58 5 15 1973-05-15 16 14 334 11.5 64 5 16 1973-05-16 17 34 307 12.0 66 5 17 1973-05-17 18 6 78 18.4 57 5 18 1973-05-18 19 30 322 11.5 68 5 19 1973-05-19 20 11 44 9.7 62 5 20 1973-05-20 21 1 8 9.7 59 5 21 1973-05-21 22 11 320 16.6 73 5 22 1973-05-22 23 4 25 9.7 61 5 23 1973-05-23 24 32 92 12.0 61 5 24 1973-05-24 25 NA 66 16.6 57 5 25 1973-05-25 26 NA 266 14.9 58 5 26 1973-05-26 27 NA NA 8.0 57 5 27 1973-05-27 28 23 13 12.0 67 5 28 1973-05-28 29 45 252 14.9 81 5 29 1973-05-29 30 115 223 5.7 79 5 30 1973-05-30 31 37 279 7.4 76 5 31 1973-05-31 32 NA 286 8.6 78 6 1 1973-06-01 33 NA 287 9.7 74 6 2 1973-06-02 34 NA 242 16.1 67 6 3 1973-06-03 35 NA 186 9.2 84 6 4 1973-06-04 36 NA 220 8.6 85 6 5 1973-06-05 37 NA 264 14.3 79 6 6 1973-06-06 38 29 127 9.7 82 6 7 1973-06-07 39 NA 273 6.9 87 6 8 1973-06-08 40 71 291 13.8 90 6 9 1973-06-09 41 39 323 11.5 87 6 10 1973-06-10 42 NA 259 10.9 93 6 11 1973-06-11 43 NA 250 9.2 92 6 12 1973-06-12 44 23 148 8.0 82 6 13 1973-06-13 45 NA 332 13.8 80 6 14 1973-06-14 46 NA 322 11.5 79 6 15 1973-06-15 47 21 191 14.9 77 6 16 1973-06-16 48 37 284 20.7 72 6 17 1973-06-17 49 20 37 9.2 65 6 18 1973-06-18 50 12 120 11.5 73 6 19 1973-06-19 51 13 137 10.3 76 6 20 1973-06-20 52 NA 150 6.3 77 6 21 1973-06-21 53 NA 59 1.7 76 6 22 1973-06-22 54 NA 91 4.6 76 6 23 1973-06-23 55 NA 250 6.3 76 6 24 1973-06-24 56 NA 135 8.0 75 6 25 1973-06-25 57 NA 127 8.0 78 6 26 1973-06-26 58 NA 47 10.3 73 6 27 1973-06-27 59 NA 98 11.5 80 6 28 1973-06-28 60 NA 31 14.9 77 6 29 1973-06-29 61 NA 138 8.0 83 6 30 1973-06-30 62 135 269 4.1 84 7 1 1973-07-01 63 49 248 9.2 85 7 2 1973-07-02 64 32 236 9.2 81 7 3 1973-07-03 65 NA 101 10.9 84 7 4 1973-07-04 66 64 175 4.6 83 7 5 1973-07-05 67 40 314 10.9 83 7 6 1973-07-06 68 77 276 5.1 88 7 7 1973-07-07 69 97 267 6.3 92 7 8 1973-07-08 70 97 272 5.7 92 7 9 1973-07-09 71 85 175 7.4 89 7 10 1973-07-10 72 NA 139 8.6 82 7 11 1973-07-11 73 10 264 14.3 73 7 12 1973-07-12 74 27 175 14.9 81 7 13 1973-07-13 75 NA 291 14.9 91 7 14 1973-07-14 76 7 48 14.3 80 7 15 1973-07-15 77 48 260 6.9 81 7 16 1973-07-16 78 35 274 10.3 82 7 17 1973-07-17 79 61 285 6.3 84 7 18 1973-07-18 80 79 187 5.1 87 7 19 1973-07-19 81 63 220 11.5 85 7 20 1973-07-20 82 16 7 6.9 74 7 21 1973-07-21 83 NA 258 9.7 81 7 22 1973-07-22 84 NA 295 11.5 82 7 23 1973-07-23 85 80 294 8.6 86 7 24 1973-07-24 86 108 223 8.0 85 7 25 1973-07-25 87 20 81 8.6 82 7 26 1973-07-26 88 52 82 12.0 86 7 27 1973-07-27 89 82 213 7.4 88 7 28 1973-07-28 90 50 275 7.4 86 7 29 1973-07-29 91 64 253 7.4 83 7 30 1973-07-30 92 59 254 9.2 81 7 31 1973-07-31 93 39 83 6.9 81 8 1 1973-08-01 94 9 24 13.8 81 8 2 1973-08-02 95 16 77 7.4 82 8 3 1973-08-03 96 78 NA 6.9 86 8 4 1973-08-04 97 35 NA 7.4 85 8 5 1973-08-05 98 66 NA 4.6 87 8 6 1973-08-06 99 122 255 4.0 89 8 7 1973-08-07 100 89 229 10.3 90 8 8 1973-08-08 101 110 207 8.0 90 8 9 1973-08-09 102 NA 222 8.6 92 8 10 1973-08-10 103 NA 137 11.5 86 8 11 1973-08-11 104 44 192 11.5 86 8 12 1973-08-12 105 28 273 11.5 82 8 13 1973-08-13 106 65 157 9.7 80 8 14 1973-08-14 107 NA 64 11.5 79 8 15 1973-08-15 108 22 71 10.3 77 8 16 1973-08-16 109 59 51 6.3 79 8 17 1973-08-17 110 23 115 7.4 76 8 18 1973-08-18 111 31 244 10.9 78 8 19 1973-08-19 112 44 190 10.3 78 8 20 1973-08-20 113 21 259 15.5 77 8 21 1973-08-21 114 9 36 14.3 72 8 22 1973-08-22 115 NA 255 12.6 75 8 23 1973-08-23 116 45 212 9.7 79 8 24 1973-08-24 117 168 238 3.4 81 8 25 1973-08-25 118 73 215 8.0 86 8 26 1973-08-26 119 NA 153 5.7 88 8 27 1973-08-27 120 76 203 9.7 97 8 28 1973-08-28 121 118 225 2.3 94 8 29 1973-08-29 122 84 237 6.3 96 8 30 1973-08-30 123 85 188 6.3 94 8 31 1973-08-31 124 96 167 6.9 91 9 1 1973-09-01 125 78 197 5.1 92 9 2 1973-09-02 126 73 183 2.8 93 9 3 1973-09-03 127 91 189 4.6 93 9 4 1973-09-04 128 47 95 7.4 87 9 5 1973-09-05 129 32 92 15.5 84 9 6 1973-09-06 130 20 252 10.9 80 9 7 1973-09-07 131 23 220 10.3 78 9 8 1973-09-08 132 21 230 10.9 75 9 9 1973-09-09 133 24 259 9.7 73 9 10 1973-09-10 134 44 236 14.9 81 9 11 1973-09-11 135 21 259 15.5 76 9 12 1973-09-12 136 28 238 6.3 77 9 13 1973-09-13 137 9 24 10.9 71 9 14 1973-09-14 138 13 112 11.5 71 9 15 1973-09-15 139 46 237 6.9 78 9 16 1973-09-16 140 18 224 13.8 67 9 17 1973-09-17 141 13 27 10.3 76 9 18 1973-09-18 142 24 238 10.3 68 9 19 1973-09-19 [ reached &#39;max&#39; / getOption(&quot;max.print&quot;) -- omitted 11 rows ]   "],["listas.html", "Chapter 10 Listas 10.1 Introducción a purrr 10.2  Ejercicios", " Chapter 10 Listas Scripts usados: script10.R. Ver en https://github.com/Crisben/uleam-stat24/blob/main/scripts/script10.R.R Veamos un pequeño resumen de los datos que conocemos: vectores: colección de elementos de igual tipo. Pueden ser números, caracteres o valores lógicos, entre otros. matrices: colección BIDIMENSIONAL de elementos de igual tipo e igual longitud. data.frame: colección BIDIMENSIONAL de elementos de igual longitud pero de cualquier tipo, lo más parecido a lo que conocemos como una tabla en Excel. Con todos estos ingredientes estamos preparados/as para ver el que probablemente sea el tipo de dato más importante en R: las listas. Las listas son colecciones de variables de diferente tipo (ya lo teníamos con data.frame) pero además también de diferente longitud, con estructuras totalmente heterógeneas, todo guardado en la misma variable (incluso una lista puede tener dentro a su vez otra lista). Vamos a crear nuestra primera lista con tres elementos: el nombre de nuestros padres/madres, nuestro lugar de nacimiento y edades de nuestros hermanos. variable_1 &lt;- c(&quot;Paloma&quot;, &quot;Gregorio&quot;) variable_2 &lt;- &quot;Madrid&quot; variable_3 &lt;- c(25, 30, 26) lista &lt;- list(&quot;progenitores&quot; = variable_1, &quot;lugar_nacimiento&quot; = variable_2, &quot;edades_hermanos&quot; = variable_3) lista $progenitores [1] &quot;Paloma&quot; &quot;Gregorio&quot; $lugar_nacimiento [1] &quot;Madrid&quot; $edades_hermanos [1] 25 30 26 length(lista) [1] 3 Si observas el objeto que hemos definido como lista, su longitud del es de 3 ya que tenemos guardados tres elementos un vector de caracteres (de longitud 2) un caracter (vector de longitud 1) un vector de números (de longitud 3) Tenemos guardados elementos de distinto tipo (algo que ya podíamos con los data.frame pero, además, de longitudes dispares). dim(lista) # devolverá NULL al no tener dos dimensiones NULL length(lista) [1] 3 class(lista) # de tipo lista [1] &quot;list&quot; Si los juntásemos con un data.frame, al tener distinta longitud, obtendríamos un error: arguments imply differing number of rows. data.frame(&quot;progenitores&quot; = variable_1, &quot;lugar_nacimiento&quot; = variable_2, &quot;edades_hermanos&quot; = variable_3) Error in data.frame(progenitores = variable_1, lugar_nacimiento = variable_2, : arguments imply differing number of rows: 2, 1, 3 Para acceder a un elemento de la lista tenemos dos opciones: Acceder por índice: con el operador [[i]] accedemos al elemento i-ésimo de la lista. Acceder por nombre: con el operador $nombre_elemento accedemos al elemento por su nombre # Accedemos por índice lista[[1]] [1] &quot;Paloma&quot; &quot;Gregorio&quot; # Accedemos por nombre lista$progenitores [1] &quot;Paloma&quot; &quot;Gregorio&quot; Dada su heterogeneidad y flexibilidad, para acceder a un elemento particular, las listas tienen una forma peculiar de acceder (con el corchete doble, en contraposición con el corchete simple que nos permite acceder a varios elementos a la vez) # Varios elementos lista[1:2] $progenitores [1] &quot;Paloma&quot; &quot;Gregorio&quot; $lugar_nacimiento [1] &quot;Madrid&quot; Las listas nos dan tanta flexibilidad que es el formato de dato natural para guardar datos que no están estructurados, como pueden ser los datos almacenados en el registro de una persona. Vamos a definir, por ejemplo, los datos que tendría un instituto de un alumno. nacimiento: una fecha. notas_insti: un data.frame. teléfonos: vector de números. nombre_padres: vector de texto. # Fecha de nacimiento fecha_nacimiento &lt;- as_date(&quot;1989-09-10&quot;) # Notas de asignaturas en primer y segundo parcial notas &lt;- data.frame(&quot;biología&quot; = c(5, 7), &quot;física&quot; = c(4, 5), &quot;matemáticas&quot; = c(8, 9.5)) row.names(notas) &lt;- # Nombre a las filas c(&quot;primer_parcial&quot;, &quot;segundo_parcial&quot;) # Números de teléfono tlf &lt;- c(&quot;914719567&quot;, &quot;617920765&quot;, &quot;716505013&quot;) # Nombres padres &lt;- c(&quot;Juan&quot;, &quot;Julia&quot;) # Guardamos TODO en una lista (con nombres de cada elemento) datos &lt;- list(&quot;nacimiento&quot; = fecha_nacimiento, &quot;notas_insti&quot; = notas, &quot;teléfonos&quot; = tlf, &quot;nombre_padres&quot; = padres) datos $nacimiento [1] &quot;1989-09-10&quot; $notas_insti biología física matemáticas primer_parcial 5 4 8.0 segundo_parcial 7 5 9.5 $teléfonos [1] &quot;914719567&quot; &quot;617920765&quot; &quot;716505013&quot; $nombre_padres [1] &quot;Juan&quot; &quot;Julia&quot; Hemos creado una lista algo más compleja de 4 elementos, a los cuales podemos acceder por índice o por nombre. datos[[1]] [1] &quot;1989-09-10&quot; datos$nacimiento [1] &quot;1989-09-10&quot; datos[[2]] biología física matemáticas primer_parcial 5 4 8.0 segundo_parcial 7 5 9.5 datos$notas_insti biología física matemáticas primer_parcial 5 4 8.0 segundo_parcial 7 5 9.5 Como hemos comentado, también podemos hacer listas con otras listas dentro, de forma que para acceder a cada nivel deberemos usar el operador [[]]. lista_de_listas &lt;- list(&quot;lista_1&quot; = datos[3:4], &quot;lista_2&quot; = datos[1:2]) names(lista_de_listas) # Nombres de los elementos del primer nivel [1] &quot;lista_1&quot; &quot;lista_2&quot; names(lista_de_listas[[1]]) # Nombres de los elementos guardados en el primer elemento, que es a su vez una lista [1] &quot;teléfonos&quot; &quot;nombre_padres&quot; lista_de_listas[[1]][[1]] # Elemento 1 de la lista guardada como elemento 1 de la lista superior [1] &quot;914719567&quot; &quot;617920765&quot; &quot;716505013&quot; ¡Nos permiten guardar «datos n-dimensionales»!. Es un formato muy habitual para devolver argumentos en funciones. Imagina que la función igualdad_nombres que hemos definido en el Ejercicio 4   WARNING: operaciones aritméticas con listas Una lista no se puede vectorizar de forma inmediata, por lo cualquier operación aritmética aplicada a una lista dará error (para ello está disponible la función lapply(), o con las funciones del paquete {purrr}, cuyo uso avanzado corresponderá a otro manual pero que veremos a continuación una pequeña introducción). datos &lt;- list(&quot;a&quot; = 1:5, &quot;b&quot; = 10:20) datos / 2 Error in datos/2: argumento no-numérico para operador binario lapply(datos, FUN = function(x) { x / 2}) $a [1] 0.5 1.0 1.5 2.0 2.5 $b [1] 5.0 5.5 6.0 6.5 7.0 7.5 8.0 8.5 9.0 9.5 10.0   10.1 Introducción a purrr Dada su heterogeneidad, una lista no se puede vectorizar de forma inmediata, por lo cualquier operación aritmética aplicada a una lista dará error, como vemos a continuación con un ejemplo sencillo. datos &lt;- list(&quot;a&quot; = 1:5, &quot;b&quot; = 10:20) datos / 2 Error in datos/2: argumento no-numérico para operador binario Para operar con listas, una de las opciones más habituales es hacer uso de la familia lapply(), con un funcionamiento similar a la familia apply() que ya hemos visto con matrices. Dicha función lapply() necesita como primer argumento la lista a la que aplicar la operación, y como segundo argumento FUN = ... la función que querramos aplicar a cada elemento de la lista. lapply(datos, FUN = function(x) { x / 2}) $a [1] 0.5 1.0 1.5 2.0 2.5 $b [1] 5.0 5.5 6.0 6.5 7.0 7.5 8.0 8.5 9.0 9.5 10.0 Fíjate que la salida de lapply(), por defecto, siempre será otra lista de igual longitud (cada elemento será la función aplicada a cada elemento original de la lista).   Una opción más flexible y versatil de aparición «reciente» es hacer uso del paquete {purrr} del entorno {tidyverse}. # install.packages(&quot;purrr&quot;) library(purrr) Dicho paquete contiene diversa funciones que pretenden imitar la programación funcional de otros lenguajes como Scala o la estrategia map-reduce de Hadoop (de Google). La función más simple del paquete {purrr} es la función map(), que nos aplica una función vectorizada a cada uno de los elementos de una lista. library(microbenchmark) x &lt;- 1:1000 y &lt;- sqrt(x) # vectorizado # bucle for (i in 1:1000) { y[i] &lt;- sqrt(x[i]) } microbenchmark(sqrt(x), for (i in 1:1000) { y[i] &lt;- sqrt(x[i]) }, times = 1e3) Unit: microseconds expr min lq mean median uq max neval sqrt(x) 4.1 4.60 5.8087 5.20 5.60 130.1 1000 for (i in 1:1000) { y[i] &lt;- sqrt(x[i]) } 1869.7 2011.25 2846.6620 2092.75 2239.75 509356.3 1000 En vectores disponemos de una vectorización por defecto porque R realiza operaciones elemento a elemento. Con map() podemos «mapear» cada lista y aplicar la función elemento a elemento (si fuese el caso). library(purrr) x &lt;- rep(list(1:2), 3) x [[1]] [1] 1 2 [[2]] [1] 1 2 [[3]] [1] 1 2 # purrr map(x, sqrt) [[1]] [1] 1.000000 1.414214 [[2]] [1] 1.000000 1.414214 [[3]] [1] 1.000000 1.414214 # otro ejemplo x &lt;- list(rnorm(n = 1e3, mean = 0, sd = 1), rnorm(n = 1e3, mean = 2, sd = 1)) map(x, mean) [[1]] [1] -0.007770925 [[2]] [1] 1.995241 x &lt;- rep(list(rnorm(n = 1e3, mean = 0, sd = 1)), 1000) # Medimos tiempos entre map y lapply microbenchmark(map(x, .f = function(x) { mean(x^2) }), lapply(x, FUN = function(x) { mean(x^2) }), times = 1e3) Unit: milliseconds expr min lq mean median uq max neval map(x, .f = function(x) { mean(x^2) }) 6.8513 7.77875 9.532887 8.85855 9.69095 66.3664 1000 lapply(x, FUN = function(x) { mean(x^2) }) 6.6999 7.67670 9.568770 8.65995 9.74995 166.6341 1000   Además de ser más legible y eficiente, el la vectorización de las listas con el paquete {purrr} nos permitirá decidir el formato de salida tras la operación (por ejemplo, en formato de vector con map_dbl() para números - en general - y map_int() para enteros), sin necesidad de hacer uso de unlist() (deshace el formato de lista original). # lista de 1000 valores de dos normales x &lt;- list(rnorm(n = 1e3, mean = 0, sd = 1), rnorm(n = 1e3, mean = 2, sd = 1)) # media de cada una, devuelto en formato vector map_dbl(x, mean) [1] 0.030613 1.970675 Una de las opciones más habituales, y una de las principales ventajas, es pasar como argumento un número en lugar de una función, lo cual nos devolverá el elemento i-ésimo de cada lista de forma inmediata. c(x[[1]][3], x[[2]][3]) [1] -0.9206154 2.6781562 map_dbl(x, 3) # equivalente a lo anterior [1] -0.9206154 2.6781562   Aunque no es el objetivo de este manual introductorio profundizar en dicho paquete (te lo recomiendo), mencionar que además nos permite la opción de pasar más de un argumento, realizando operaciones binarias, con la función map2() x &lt;- list(&quot;a&quot; = 1:3, &quot;b&quot; = 4:7) y &lt;- list(&quot;c&quot; = c(-1, 4, 0), &quot;b&quot; = c(5, -4, -1, 2)) # dos listas como argumentos map2(x, y, .f = function(x, y) { x^2 + y^2}) $a [1] 2 20 9 $b [1] 41 41 37 53 10.2  Ejercicios Ejercicio 1: define una lista de 4 elementos de tipos distintos y accede al segundo de ellos (yo incluiré uno que sea un data.frame para que veas que en una lista cabe de todo). Solución: # Ejemplo: lista con texto, numérico, lógico y un data.frame lista_ejemplo &lt;- list(&quot;nombre&quot; = &quot;Cristian&quot;, &quot;cp&quot; = 28019, &quot;soltero&quot; = TRUE, &quot;notas&quot; = data.frame(&quot;mates&quot; = c(7.5, 8, 9), &quot;lengua&quot; = c(10, 5, 6))) lista_ejemplo $nombre [1] &quot;Cristian&quot; $cp [1] 28019 $soltero [1] TRUE $notas mates lengua 1 7.5 10 2 8.0 5 3 9.0 6 # Longitud length(lista_ejemplo) [1] 4 # Accedemos al elemento dos lista_ejemplo[[2]] [1] 28019   Ejercicio 2: accede a los elementos que ocupan los lugares 1 y 4 de la lista definida anteriormente. Solución: # Accedemos al 1 y al 4 lista_ejemplo[c(1, 4)] $nombre [1] &quot;Cristian&quot; $notas mates lengua 1 7.5 10 2 8.0 5 3 9.0 6 Otra opción es acceder con los nombres # Accedemos al 1 y al 4 lista_ejemplo$nombre [1] &quot;Cristian&quot; lista_ejemplo$notas mates lengua 1 7.5 10 2 8.0 5 3 9.0 6 lista_ejemplo[c(&quot;nombre&quot;, &quot;notas&quot;)] $nombre [1] &quot;Cristian&quot; $notas mates lengua 1 7.5 10 2 8.0 5 3 9.0 6   Ejercicio 3: define una lista de 4 elementos que contenga, en una sola variable, tu nombre, apellido, edad y si estás soltero/a. Solución: # Creamos lista: con lubridate calculamos la diferencia de años desde la fecha de nuestro nacimiento hasta hoy (sea cuando sea hoy) lista_personal &lt;- list(&quot;nombre&quot; = &quot;Cristian&quot;, &quot;apellidos&quot; = &quot;Crisben&quot;, &quot;edad&quot; = 30, &quot;soltero&quot; = TRUE) lista_personal $nombre [1] &quot;Cristian&quot; $apellidos [1] &quot;Crisben&quot; $edad [1] 30 $soltero [1] TRUE "],["if-else.html", "Chapter 11 Estructuras de control: if-else 11.1 if 11.2 if - else 11.3 if - else anidados 11.4 ifelse () vectorizado 11.5 Consejos 11.6  Ejercicios", " Chapter 11 Estructuras de control: if-else Scripts usados: script11.R. Ver en https://github.com/Crisben/uleam-stat24/blob/main/scripts/script11.R Hasta ahora hemos trasteado con datos: hemos empezado desde una celda, para luego construir columnas (vectores), y luego juntarlas en algo parecido a una base de datos (tablas o data.frame). Pero para poder manejarnos con soltura con dichos datos es importante que conozcamos cómo se usan las expresiones de control más típicas. Una expresión de control será un conjunto de órdenes que nos permiten decidir por dónde queremos que avance nuestro programa: ¿qué hacemos si sucede A? ¿Y si sucede B? Si has programado en algún otro lenguaje, estarás familiarizado/a con elementos como un if (blabla) {...} else {...} (que los usaremos a veces) o bucles for y while (que intentaremos no usarlos en R). Si es la primera que programas en algún lenguaje, no te preocupes, las empezamos desde cero, empezando por las estructuras condicionales 11.1 if Una de las estructuras de control más famosas de cualquier lenguaje de programación es la estructura if: SI las condiciones impuestas se cumplen (TRUE), ejecuta las órdenes que tengamos dentro. if (x == 1) { código A }: si condición (por ejemplo, x == 1) es cierta, se ejecuta código A; en caso contrario, no hace nada. Definamos por ejemplo una variable sencilla, las edades de 8 personas. edades &lt;- c(14, 17, 24, 56, 31, 20, 87, 73) Para comprobar cuales son menores de edades podemos aplicar lo aprendido en temas anteriores, realizando una comparación lógica: si es menor de edad, devuelve un TRUE; en caso contrario, devuelve un FALSE. edades &lt; 18 [1] TRUE TRUE FALSE FALSE FALSE FALSE FALSE FALSE Con las funciones any() y all() podemos saber si todos o alguno de los elementos de un vector cumplen una condición. all(edades &gt;= 18) # todos mayores de edad [1] FALSE any(edades &lt; 18) # existe algun menor de edad [1] TRUE Con dichos elementos vamos a construir nuestra primera estructura condicional: queremos que, SI existe algún menor de edad, nos imprima un mensaje. if (any(edades &lt; 18)) { # TRUE si al menos una persona mayor de edad print(&quot;existe alguna persona mayor de edad&quot;) } [1] &quot;existe alguna persona mayor de edad&quot; En caso de que no se cumplan las condiciones dentro del if() (condiciones que devuelvan un FALSE), no sucederá nada. Podemos hacer lo mismo cambiando la condición: SI todos son mayores de edad, imprime el mensaje. if (all(edades &gt;= 18)) { # TRUE si TODOS son mayores de edad print(&quot;todas las personas son mayores de edad&quot;) } Fíjate que en este caso no hemos obtenido ningún mensaje porque la condición all(edades &gt;= 18) no es cierta (no son todos mayores de 18 años), así que no ha ejecutado el código interno. 11.2 if - else La estructura if (condicion) { } puede ser combinada con un else { }: cuando la condición del if no se cumpla (como en el último ejemplo), se ejecutará el código que haya dentro del else { }, permitiéndonos decidir que sucede cuando SÍ se cumple y cuando NO se cumple. if (x == 1) { código A } else { código B }: si condición (por ejemplo, x == 1) es cierta, se ejecuta código A; si es falsa, se ejecuta código B. Siguiendo con el ejemplo de las edades, queremos nos imprima un mensaje SI todos son mayores de edad, y un mensaje diferente en caso de que dicha condición no se cumpla. if (all(edades &gt;= 18)) { # TRUE si TODOS son mayores de edad print(&quot;todas las personas son mayores de edad&quot;) } else { # si hay alguno menor de edad print(&quot;existe alguna persona menor de edad&quot;) } [1] &quot;existe alguna persona menor de edad&quot; Podemos ya complicar un poco el código con lo que hemos aprendido de temas anteriores. Por ejemplo, en caso de que no se cumpla (es decir, que haya alguno menor de edad), queremos extraer la edad por pantalla de esos menores (con edades[edades &lt; 18] extraeremos las edades que cumplen la condición de ser menor de edad). if (all(edades &gt;= 18)) { # TRUE si TODOS son mayores de edad print(&quot;todas las personas son mayores de edad&quot;) } else { # si hay alguno menor de edad print(glue(&quot;Existen menores de edad. Sus edades son: {paste(edades[edades &lt; 18], collapse = &#39;-&#39;)} años&quot;)) } Existen menores de edad. Sus edades son: 14-17 años 11.3 if - else anidados Dicha estructura if - else puede anidarse, de forma que vayamos concatenando dichas estructuras, como en el ejemplo que tenemos debajo. Imagina que queremos realizar una acción si todos fuesen mayores de edad; en caso contrario, pero si todos los menores de edad tienen 16 años o más, realizar otra acción; en caso contrario, otra acción if (all(edades &gt;= 18)) { # TRUE si TODOS son mayores de edad print(&quot;todas las personas son mayores de edad&quot;) } else if (all(edades &gt;= 16)) { # si todos los menores de edad tienen &gt;=16 print(&quot;Existe alguna persona menor de edad pero todos con 16 años o más&quot;) } else { print(&quot;Existe alguna persona menor de 16 años&quot;) } [1] &quot;Existe alguna persona menor de 16 años&quot; 11.4 ifelse () vectorizado Esta estructura condicional puede ser vectorizada, de forma que podamos reunir en una sola fila un número elevado de estructuras de comparación la función ifelse(), cuyos argumentos de entrada serán la condición a evaluar, lo que sucede cuando se cumple y lo que no, que aplicará a cada elemento del vector de entrada. Con el ejemplo de las edades, vamos a dejar el dato ausente si son menores de edad, y si son mayores de edad se queda como está (recuerda: primero la condición, después lo que devuelve cuando es TRUE, y por último lo que devuelve cuando es FALSE) # NA si no cumple la condición, la edad si se cumple. ifelse(edades &gt;= 18, edades, NA) [1] NA NA 24 56 31 20 87 73 Todas estas estructuras no solo sirven para datos numéricos. Vamos a definir un vector de nombres con algunos ausentes (NA), y vamos a sustituir los ausentes por el texto \"nombre_desconocido\" (los que no sean ausentes, es decir los que is.na() devuelva FALSE, se quedan como están). nombres &lt;- c(&quot;Juan&quot;, &quot;María&quot;, NA, NA, &quot;Lucía&quot;, &quot;Carmen&quot;, &quot;Javier&quot;, NA, &quot;Carlos&quot;, NA, &quot;Gregorio&quot;, &quot;Paloma&quot;) # Si tiene ausente --&gt; &quot;nombre_desconocido&quot; # Si no tiene ausente --&gt; nombres originales nombres &lt;- ifelse(is.na(nombres), &quot;nombre_desconocido&quot;, nombres) nombres [1] &quot;Juan&quot; &quot;María&quot; &quot;nombre_desconocido&quot; &quot;nombre_desconocido&quot; &quot;Lucía&quot; &quot;Carmen&quot; [7] &quot;Javier&quot; &quot;nombre_desconocido&quot; &quot;Carlos&quot; &quot;nombre_desconocido&quot; &quot;Gregorio&quot; &quot;Paloma&quot; Esta función ifelse() es muy util para codificar variables o averiguar cuales cumplen una condición. 11.5 Consejos CONSEJOS   Rainbow parentheses Uno de los errores más habituales, y que seguirás cometiendo aunque lleves años programando, es no cerrar un paréntesis que has abierto, por lo que el programa no sabe si has acabado de llamar a una orden o no. Para ello en las nuevas versiones de RStudio, en el menú Tools &lt; Global Options &lt; Code &lt; Display podemos habilitar la opción Rainbow Parentheses que nos escribe cada par de () de un color distinto Figure 11.1: Activando Rainbow Parentheses.   Minimiza estructuras de control en el código Puedes colapsar las estructuras de control pulsando en la flecha que aparece a la izquierda de ellas en tu script.   11.6  Ejercicios (haz click en las flechas para ver soluciones) Ejercicio 1: modifica el código inferior para imprimir un mensaje por pantalla si todos los datos del conjunto airquality son de meses que no sean enero. Solución: # install.packages(&quot;dataset&quot;) # solo la primera vez library(datasets) # paquete con los datos mes &lt;- airquality$Month if (all(mes != 1)) { # todos con mes distinto de 1 print(&quot;Ningún dato es del mes de enero&quot;) } [1] &quot;Ningún dato es del mes de enero&quot; # install.packages(&quot;dataset&quot;) # solo la primera vez library(datasets) # paquete con los datos mes &lt;- airquality$Month if (mes == 2) { print(&quot;Ningún dato es del mes de enero&quot;) }   Ejercicio 2: modifica el código inferior para guardar en una variable temperatura_alta un valor TRUE si alguno de los registros tiene una temperatura mayor a 90 (están en Farenheit) y un FALSE en caso contrario. Solución: temperatura &lt;- airquality$Temp temperatura_alta &lt;- FALSE # por defecto FALSE if (any(temperatura &gt; 90)) { temperatura_alta &lt;- TRUE # si se cumple la condición, a TRUE } temperatura &lt;- airquality$Temp if (temperatura == 100) { print(&quot;Alguno de los registros tiene temperatura superior a 90 Farenheit&quot;) }   Ejercicio 3: modifica el código inferior para imprimir un mensaje por pantalla si alguno de los días supera la temperatura de 100. Solución: temperatura &lt;- airquality$Temp if (any(temperatura &gt; 100)) { # nos basta con uno print(&quot;Alguno de los registros tiene temperatura superior a 100 Farenheit&quot;) } No debería imprimar nada porque ninguno cumple la condición. temperatura &lt;- airquality$Temp if (all(temperatura &lt; 50)) { print(&quot;Alguno de los registros tiene temperatura superior a 100 Farenheit&quot;) }   Ejercicio 4: del paquete {lubridate}, la función hour() nos devuelve la hora de una fecha dada, y la función now() nos devuelve fecha y hora del momento actual. Con ambas funciones, y usando if, imprime por pantalla \"buenas noches\" solo a partir de las 21 horas. Solución: # Cargamos librería library(lubridate) # Fecha-hora actual fecha_actual &lt;- now() # Estructura if if (hour(fecha_actual) &gt; 21) { cat(&quot;Buenas noches&quot;) # print/cat dos formas de imprimir por pantalla }   Ejercicio 5: con las funciones del ejercicio anterior, y usando una estructura if-else, imprime por pantalla (con cat() o print()) los mensajes \"buenos días\" (de 6 a 14 horas), \"buenas tardes\" (de 14 a 21 horas) o \"buenas noches\" (de las 21 a las 6 horas). Solución: # Fecha actual fecha_actual &lt;- now() # Estructura if-else if (hour(fecha_actual) &gt; 6 &amp; hour(fecha_actual) &lt; 14) { cat(&quot;Buenos días&quot;) } else if (hour(fecha_actual) &gt; 14 &amp; hour(fecha_actual) &lt; 21) { cat(&quot;Buenas tardes&quot;) } else { cat(&quot;Buenas noches&quot;) } Buenas noches   Ejercicio 6: realiza el ejercicio anterior pero sin estructura de llaves, de forma concisa con ifelse(). Mira la ayuda si la necesitases poniendo ? ifelse en consola. Solución: # Fecha actual fecha_actual &lt;- now() # Estructura if-else cat(ifelse(hour(fecha_actual) &gt; 6 &amp; hour(fecha_actual) &lt; 14, &quot;Buenos días&quot;, ifelse(hour(fecha_actual) &gt; 14 &amp; hour(fecha_actual) &lt; 21, &quot;Buenas tardes&quot;, &quot;Buenas noches&quot;))) Buenas noches   "],["bucles.html", "Chapter 12 Estructuras de control: bucles 12.1 for 12.2 while 12.3 break/next 12.4 repeat 12.5 Consejos 12.6  Ejercicios", " Chapter 12 Estructuras de control: bucles Scripts usados: script12.R. Ver en https://github.com/Crisben/uleam-stat24/blob/main/scripts/script12.R Aunque la mayoría de veces son sustituibles por otras expresiones más legibles y eficientes, es importante que conozcamos otra archiconocida expresion de control: los bucles. for: permite repetir el mismo código un número fijo (y conocido a priori) de veces (normalmente en función de un índice). while: permite repetir el mismo código un número indeterminado de veces, hasta que una condición dada se deje de cumplir. 12.1 for Aunque la mayoría de las veces los bucles pueden ser sustituidos por expresiones mucho más eficientes (fíjate que ya hemos filtrado columnas, filas y aplicado operaciones por filas y columnas, sin necesitarlo), a veces no nos quedará más remedio que usarlos por lo que nunca viene mal conocer su estructura. Un bucle for{} es una estructura que nos permite repetir un conjunto de órdenes un número finito y conocido de veces: dado un conjunto de índices, el bucle irá recorriendo cada uno de ellos, y para cada uno ejecutará lo que tenga dentro de las llaves. Veamos un ejemplo muy sencillo. Vamos a definir un vector de números de longitud 4, por ejemplo x &lt;- c(0, -7, 1, 4). Si quisiéramos devolver el primer elemento al cuadrado escribiríamos x[1]^2 (accedemos con [1] al primer elemento y lo elevamos al cuadrado). Si quisiéramos devolver el segundo elemento al cuadrado escribiríamos x[2]^2. Si lo quisiéramos hacer en general, para el elemento i-ésimo (el que ocupa la posición i), escribiríamos x[i]^2. Lo que haremos dentro del for (...) {} es indicarle que valores irá tomando i: creamos un vector de índices, en este caso 1:4, para que i vaya tomando sus valores (primero i=1, luego i=2, etc) x &lt;- c(0, -7, 1, 4) for (i in 1:4) { print(x[i]^2) # que lo imprima } [1] 0 [1] 49 [1] 1 [1] 16 Lo que tenemos dentro de los paréntesis, en la línea del for, no es más que la secuencia de números que hemos aprendido a construir. 1:4 [1] 1 2 3 4 Si quisiéramos que haga lo mismo pero excluyendo por ejemplo el segundo elemento bastaría con definir los índices a recorrer como c(1, 3, 4) o c(1, 3:4) for (i in c(1, 3, 4)) { print(x[i]^2) # que lo imprima } [1] 0 [1] 1 [1] 16 Podemos definir también una variable y &lt;- rep(0, 4) (un vector de la misma longitud pero, de momento, lleno de ceros), y hacer que elemento i-ésimo del vector y se defina como x[i]^2 y &lt;- rep(0, 4) for (i in 1:4) { y[i] &lt;- x[i]^2 } y [1] 0 49 1 16 Fíjate que, dado que las operaciones en R ya se hacen por defecto de forma vectorial, elemento a elemento, lo anterior es equivalente a esto y &lt;- x^2 y [1] 0 49 1 16 No solo es equivalente sino que además, haciendo uso del paquete {microbenchmark} podemos comprobar como el bucle, amén de no ser necesario, es menos eficiente (de ahí que la mayoría de veces los intentemos evitar si existe otra alternativa) # install.packages(&quot;microbenchmark) library(microbenchmark) # Le pasamos dos conjuntos de códigos, y le indicamos con # times el número de simulaciones a realizar para luego obtener # un promedio de tiempos microbenchmark(x^2, for (i in 1:4) { y[i] &lt;- x[i]^2 }, times = 1000) Unit: nanoseconds expr min lq mean median uq max neval x^2 0 100 540.6 300 800 19900 1000 for (i in 1:4) { y[i] &lt;- x[i]^2 } 1689800 1821700 2237997.1 1873450 1925850 158642300 1000   Veamos otro ejemplo: vamos a definir de nuevo un vector de edades y nombres, y vamos a recorrer cada uno imprimiento un mensaje por pantalla. library(glue) nombres &lt;- c(&quot;Javi&quot;, &quot;Laura&quot;, &quot;Carlos&quot;, &quot;Lucía&quot;, &quot;Mar&quot;) edades &lt;- c(32, 51, 18, 43, 29) # Recorremos cada uno de los 5 elementos e imprimimos un # mensaje que depende de ese índice i for (i in 1:5) { print(glue(&quot;{nombres[i]} tiene {edades[i]} años&quot;)) } Javi tiene 32 años Laura tiene 51 años Carlos tiene 18 años Lucía tiene 43 años Mar tiene 29 años Fíjate que si no nos queremos preocupar de si añadimos otra persona, podemos hacer que el bucle empiece en 1 y termine en el último lugar (sea el que sea), usando length() for (i in 1:length(nombres)) { print(glue(&quot;{nombres[i]} tiene {edades[i]} años&quot;)) } Javi tiene 32 años Laura tiene 51 años Carlos tiene 18 años Lucía tiene 43 años Mar tiene 29 años Aunque normalmente el conjunto que recorre el bucle suelen ser índices numéricos, podemos recorrer cualquier tipo de objeto, por ejemplo días e la semana library(stringr) dias_semana &lt;- c(&quot;lunes&quot;, &quot;martes&quot;, &quot;miércoles&quot;, &quot;jueves&quot;, &quot;viernes&quot;, &quot;sábado&quot;, &quot;domingo&quot;) for (dias in dias_semana) { # dias recorre los días de la semana print(str_to_upper(dias)) # Imprimimos en mayúsculas el día } [1] &quot;LUNES&quot; [1] &quot;MARTES&quot; [1] &quot;MIÉRCOLES&quot; [1] &quot;JUEVES&quot; [1] &quot;VIERNES&quot; [1] &quot;SÁBADO&quot; [1] &quot;DOMINGO&quot; Como hemos visto, además de imprimir por pantalla podemos asignar valores a variables o cambiarlas. Por ejemplo, vamos a recorrer nuestro conjunto swiss de {datasets} y vamos a pasar a dato ausente todos los valores de fertilidad superiores a 80. Para ello recorreremos cada fila para después ejecutar un if. for (i in 1:nrow(swiss)) { # si cumple la condición dicha fila, ponemos ausente. if (swiss$Fertility[i] &gt; 80) { swiss$Fertility[i] &lt;- NA } } swiss Fertility Agriculture Examination Education Catholic Infant.Mortality Courtelary NA 17.0 15 12 9.96 22.2 Delemont NA 45.1 6 9 84.84 22.2 Franches-Mnt NA 39.7 5 5 93.40 20.2 Moutier NA 36.5 12 7 33.77 20.3 Neuveville 76.9 43.5 17 15 5.16 20.6 Porrentruy 76.1 35.3 9 7 90.57 26.6 Broye NA 70.2 16 7 92.85 23.6 Glane NA 67.8 14 8 97.16 24.9 Gruyere NA 53.3 12 7 97.67 21.0 Sarine NA 45.2 16 13 91.38 24.4 Veveyse NA 64.5 14 6 98.61 24.5 Aigle 64.1 62.0 21 12 8.52 16.5 Aubonne 66.9 67.5 14 7 2.27 19.1 Avenches 68.9 60.7 19 12 4.43 22.7 Cossonay 61.7 69.3 22 5 2.82 18.7 Echallens 68.3 72.6 18 2 24.20 21.2 Grandson 71.7 34.0 17 8 3.30 20.0 Lausanne 55.7 19.4 26 28 12.11 20.2 La Vallee 54.3 15.2 31 20 2.15 10.8 Lavaux 65.1 73.0 19 9 2.84 20.0 Morges 65.5 59.8 22 10 5.23 18.0 Moudon 65.0 55.1 14 3 4.52 22.4 Nyone 56.6 50.9 22 12 15.14 16.7 Orbe 57.4 54.1 20 6 4.20 15.3 Oron 72.5 71.2 12 1 2.40 21.0 Payerne 74.2 58.1 14 8 5.23 23.8 Paysd&#39;enhaut 72.0 63.5 6 3 2.56 18.0 Rolle 60.5 60.8 16 10 7.72 16.3 Vevey 58.3 26.8 25 19 18.46 20.9 Yverdon 65.4 49.5 15 8 6.10 22.5 Conthey 75.5 85.9 3 2 99.71 15.1 Entremont 69.3 84.9 7 6 99.68 19.8 Herens 77.3 89.7 5 2 100.00 18.3 Martigwy 70.5 78.2 12 6 98.96 19.4 Monthey 79.4 64.9 7 3 98.22 20.2 St Maurice 65.0 75.9 9 9 99.06 17.8 Sierre NA 84.6 3 3 99.46 16.3 Sion 79.3 63.1 13 13 96.83 18.1 Boudry 70.4 38.4 26 12 5.62 20.3 La Chauxdfnd 65.7 7.7 29 11 13.79 20.5 Le Locle 72.7 16.7 22 13 11.22 18.9 Neuchatel 64.4 17.6 35 32 16.92 23.0 Val de Ruz 77.6 37.6 15 7 4.97 20.0 ValdeTravers 67.6 18.7 25 7 8.65 19.5 V. De Geneve 35.0 1.2 37 53 42.34 18.0 Rive Droite 44.7 46.6 16 29 50.43 18.2 Rive Gauche 42.8 27.7 22 29 58.33 19.3 Esto sería exactamente equivalente al ifelse vectorizado que vimos en el tema anterior data(&quot;swiss&quot;) # lo cargamos de 0 swiss$Fertility &lt;- ifelse(swiss$Fertility &gt; 80, NA, swiss$Fertility) swiss Fertility Agriculture Examination Education Catholic Infant.Mortality Courtelary NA 17.0 15 12 9.96 22.2 Delemont NA 45.1 6 9 84.84 22.2 Franches-Mnt NA 39.7 5 5 93.40 20.2 Moutier NA 36.5 12 7 33.77 20.3 Neuveville 76.9 43.5 17 15 5.16 20.6 Porrentruy 76.1 35.3 9 7 90.57 26.6 Broye NA 70.2 16 7 92.85 23.6 Glane NA 67.8 14 8 97.16 24.9 Gruyere NA 53.3 12 7 97.67 21.0 Sarine NA 45.2 16 13 91.38 24.4 Veveyse NA 64.5 14 6 98.61 24.5 Aigle 64.1 62.0 21 12 8.52 16.5 Aubonne 66.9 67.5 14 7 2.27 19.1 Avenches 68.9 60.7 19 12 4.43 22.7 Cossonay 61.7 69.3 22 5 2.82 18.7 Echallens 68.3 72.6 18 2 24.20 21.2 Grandson 71.7 34.0 17 8 3.30 20.0 Lausanne 55.7 19.4 26 28 12.11 20.2 La Vallee 54.3 15.2 31 20 2.15 10.8 Lavaux 65.1 73.0 19 9 2.84 20.0 Morges 65.5 59.8 22 10 5.23 18.0 Moudon 65.0 55.1 14 3 4.52 22.4 Nyone 56.6 50.9 22 12 15.14 16.7 Orbe 57.4 54.1 20 6 4.20 15.3 Oron 72.5 71.2 12 1 2.40 21.0 Payerne 74.2 58.1 14 8 5.23 23.8 Paysd&#39;enhaut 72.0 63.5 6 3 2.56 18.0 Rolle 60.5 60.8 16 10 7.72 16.3 Vevey 58.3 26.8 25 19 18.46 20.9 Yverdon 65.4 49.5 15 8 6.10 22.5 Conthey 75.5 85.9 3 2 99.71 15.1 Entremont 69.3 84.9 7 6 99.68 19.8 Herens 77.3 89.7 5 2 100.00 18.3 Martigwy 70.5 78.2 12 6 98.96 19.4 Monthey 79.4 64.9 7 3 98.22 20.2 St Maurice 65.0 75.9 9 9 99.06 17.8 Sierre NA 84.6 3 3 99.46 16.3 Sion 79.3 63.1 13 13 96.83 18.1 Boudry 70.4 38.4 26 12 5.62 20.3 La Chauxdfnd 65.7 7.7 29 11 13.79 20.5 Le Locle 72.7 16.7 22 13 11.22 18.9 Neuchatel 64.4 17.6 35 32 16.92 23.0 Val de Ruz 77.6 37.6 15 7 4.97 20.0 ValdeTravers 67.6 18.7 25 7 8.65 19.5 V. De Geneve 35.0 1.2 37 53 42.34 18.0 Rive Droite 44.7 46.6 16 29 50.43 18.2 Rive Gauche 42.8 27.7 22 29 58.33 19.3   ¿Te acuerdas de las operaciones por filas y columnas que hicimos con los apply()? Podemos hacer lo mismo (aunque menos eficiente) con un bucle: vamos a sumar las filas del conjunto swiss. Para ello antes definiremos una variable llena de ceros que luego rellenaremos, de tamaño igual al número de filas, con suma &lt;- rep(0, nrow(swiss)) suma &lt;- rep(0, nrow(swiss)) for (i in 1:nrow(swiss)) { suma[i] &lt;- sum(swiss[i, ]) } suma [1] NA NA NA NA 178.16 244.57 NA NA NA NA NA 184.12 176.77 187.73 179.52 206.30 154.00 161.41 [19] 133.45 188.94 180.53 164.02 173.34 157.00 180.10 183.33 165.06 171.32 168.46 166.50 281.21 286.68 292.30 285.06 272.72 275.76 [37] NA 283.33 172.72 147.69 154.52 188.92 162.17 146.45 186.54 204.93 199.13   12.2 while Otra manera de diseñar un bucle es con la estructura while{}, que ejecutará el bucle un número de veces pero que a priori es desconocido, lo hará hasta que la condición impuesta deje de ser TRUE (en el for sabemos de antemano el número de iteraciones). Por ejemplo, vamos a inicializar una variable ciclos &lt;- 1, y en cada paso aumentaremos una unidad ciclos, y no saldremos del bucle hasta que ciclos &gt; 5 ciclos &lt;- 1 # Mientras el número de ciclos sea inferior 5, imprime while(ciclos &lt;= 5) { print(paste(&quot;Todavía no, vamos por el ciclo &quot;, ciclos)) # Pegamos la frase al número de ciclo por el que vayamos con paste ciclos &lt;- ciclos + 1 } [1] &quot;Todavía no, vamos por el ciclo 1&quot; [1] &quot;Todavía no, vamos por el ciclo 2&quot; [1] &quot;Todavía no, vamos por el ciclo 3&quot; [1] &quot;Todavía no, vamos por el ciclo 4&quot; [1] &quot;Todavía no, vamos por el ciclo 5&quot; ¿Y qué sucede cuando la condición nunca llega a ser FALSE? Compruébalo tú mismo/a. while (1 &gt; 0) { # Nunca va a dejar de ser cierto print(&quot;Presiona ESC para salir del bucle&quot;) } 12.3 break/next En R tenemos dos comandos reservados para poder abortar un bucle o avanzar forzosamente un bucle: dichas palabras son break y next. La primera nos habilita para parar un bucle aunque no haya llegado al final de su conjunto de índices a recorrer (o se siga cumpliendo la condición del while{}). Vamos a hacer un bucle de 1 a 10: cuando el índice i es igual a 7, el bucle se para. for(i in 1:10) { if (i == 7) { break # si i es 7, el bucle frena aquí (nunca llegará a imprimir el 7 ni los sucesivos) } print(i) } [1] 1 [1] 2 [1] 3 [1] 4 [1] 5 [1] 6 Mientras que la segunda, el next obliga al bucle a avanzar a la siguiente interacción, abortando la iteración actual en la que se encuentra. Vamos ahora a hacer un bucle de 1 a 10: cuando el índice i es igual a 7, el bucle salta al i = 8. for(i in 1:10) { if (i == 7) { next # si i es 7, la iteración frenará aquí y pasará a la siguiente por lo que imprimirá todos menos el 7 } print(i) } [1] 1 [1] 2 [1] 3 [1] 4 [1] 5 [1] 6 [1] 8 [1] 9 [1] 10 12.4 repeat Aunque es una opción muy poco usada, existe una estructura de control llamada repeat{} que nos ejecuta un bucle de forma infinita hasta que le ordenemos parar con un break. conteo &lt;- 0 repeat { conteo &lt;- conteo + 1 if (conteo &gt;= 100) { break } } conteo [1] 100   WARNING: cuidado con los bucles infinitos Las estucturas while{} y repeat{} son de las menos usadas por su peligrosidad, ya que si no incluimos un break o la condición nunca llega a ser TRUE, el bucle seguirá ejecutándose de forma infinita y solo podrá ser detenido abortando la ejecución con la tecla ESC.   12.5 Consejos CONSEJOS   Evita bucles (si puedes) Recuerda: por lo general, di no a los bucles en R (intenta evitarlos, en la mayoría de casos hay una alternativa mejor).   Evita bucles (parte II) Evita al máximo los bucles en R: suele existir una forma más eficiente de programarlo. Veamos un ejemplo muy sencillo: dado un vector de índices idx, queremos calcular su cuadrado y guardarlo. Vamos a comparar como sería con un sencillo bucle y de forma vectorial, repitiéndolo 1000 veces para sacar tiempos medios, haciendo uso del paquete {microbenchmark}. idx &lt;- 1:10000 x &lt;- y &lt;- rep(0, length(idx)) microbenchmark::microbenchmark(x &lt;- idx^2, for (i in idx) { y[i] &lt;- idx[i]^2}, times = 1e3) Unit: microseconds expr min lq mean median uq max neval x &lt;- idx^2 12.6 14.15 18.6952 17.00 19.2 64.2 1000 for (i in idx) { y[i] &lt;- idx[i]^2 } 2129.0 2319.35 2762.9928 2433.75 2581.1 65055.0 1000 Una tarea tan sencilla, programada en un bucle (segunda fila), tarda 40 veces más que hacerlo de forma vectorial (primera fila) (elevando cada elemento al cuadrado, iterando internamente, sin necesidad de implementar un bucle). 12.6  Ejercicios (haz click en las flechas para ver soluciones) Ejercicio 1: modifica el código inferior para diseñar un bucle for de 5 iteraciones que recorra los 5 primeros impares y les sume uno. Solución: # Una forma for (i in seq(1, 9, by = 2)) { print(i + 1) } [1] 2 [1] 4 [1] 6 [1] 8 [1] 10 # Otra for (i in c(1, 3, 5, 7, 9)) { print(i + 1) } [1] 2 [1] 4 [1] 6 [1] 8 [1] 10 for (i in 1:5) { print(i) } [1] 1 [1] 2 [1] 3 [1] 4 [1] 5   Ejercicio 2: modifica el código inferior para diseñar un bucle while que parta con una variable conteo &lt;- 1 y pare cuando llegue a 6. Solución: conteo &lt;- 1 while (conteo &lt; 6) { print(conteo) conteo &lt;- conteo + 1 } [1] 1 [1] 2 [1] 3 [1] 4 [1] 5 conteo &lt;- 1 while (conteo == 2) { print(conteo) }   Ejercicio 3: construye un bucle que recorra las primeras 8 filas del conjunto de datos datasets::airquality y que imprima un mensaje con la temperatura Solución: for (i in 1:8) { print(glue(&quot;La temperatura es de {airquality$Temp[i]}ºF&quot;)) } La temperatura es de 67ºF La temperatura es de 72ºF La temperatura es de 74ºF La temperatura es de 62ºF La temperatura es de 56ºF La temperatura es de 66ºF La temperatura es de 65ºF La temperatura es de 59ºF   Ejercicio 4: diseña un bucle for de 200 iteraciones que, empezando en un valor inicial de 100 (euros), te sume 3€ si el número actual es par y te reste 5€ si es impar. Un número par o impar: un número par será todo aquel número que al dividir entre 2, la división es exacta, es decir, que su resto es nulo. Por ejemplo, al dividir 5 entre 2, el resto es 1, pero al dividir 12 entre 2 el resto es 0. Para calcula ese resto usaremos la función %%. Solución: # pares e impares 5 %% 2 [1] 1 12 %% 2 [1] 0 23 %% 2 [1] 1 46 %% 2 [1] 0 # dinero inicial dinero &lt;- 100 # Bucle for for (i in 1:200) { dinero &lt;- ifelse(dinero %% 2 == 0, dinero + 3, dinero - 5) } dinero [1] -100   Ejercicio 5: diseña el anterior bucle pero guardando el dinero de cada iteración. Solución: # vector de importes dinero &lt;- rep(0, 201) dinero[1] &lt;- 100 # dinero inicial # Bucle for for (i in 2:201) { # si dinero[i - 1] es par o impar dinero[i] &lt;- ifelse(dinero[i - 1] %% 2 == 0, dinero[i - 1] + 3, dinero[i - 1] - 5) } dinero [1] 100 103 98 101 96 99 94 97 92 95 90 93 88 91 86 89 84 87 82 85 80 83 78 81 76 79 [27] 74 77 72 75 70 73 68 71 66 69 64 67 62 65 60 63 58 61 56 59 54 57 52 55 50 53 [53] 48 51 46 49 44 47 42 45 40 43 38 41 36 39 34 37 32 35 30 33 28 31 26 29 24 27 [79] 22 25 20 23 18 21 16 19 14 17 12 15 10 13 8 11 6 9 4 7 2 5 0 3 -2 1 [105] -4 -1 -6 -3 -8 -5 -10 -7 -12 -9 -14 -11 -16 -13 -18 -15 -20 -17 -22 -19 -24 -21 -26 -23 -28 -25 [131] -30 -27 -32 -29 -34 -31 -36 -33 -38 -35 -40 -37 -42 -39 -44 -41 -46 -43 -48 -45 -50 -47 -52 -49 -54 -51 [157] -56 -53 -58 -55 -60 -57 -62 -59 -64 -61 -66 -63 -68 -65 -70 -67 -72 -69 -74 -71 -76 -73 -78 -75 -80 -77 [183] -82 -79 -84 -81 -86 -83 -88 -85 -90 -87 -92 -89 -94 -91 -96 -93 -98 -95 -100   Ejercicio 6: diseña el bucle del ejercicio 4 parando cuando no nos quede dinero. Solución: dinero &lt;- 100 # dinero inicial # Bucle while while (dinero &gt; 0) { dinero &lt;- ifelse(dinero %% 2 == 0, dinero + 3, dinero - 5) } dinero [1] 0 "],["funs.html", "Chapter 13 Funciones 13.1 Primera función 13.2 Variables locales/globales 13.3  Ejercicios", " Chapter 13 Funciones Scripts usados: script13.R. Ver en https://github.com/Crisben/uleam-stat24/blob/main/scripts/script13.R En R no solo podemos usar las funciones predeterminadas que vienen ya cargadas, o las de los paquetes que instalamos, como sum() o mean(). Además podemos crear nuestras propias funciones para automatizar tareas que vayamos a repetir a lo largo de nuestro código. ¿Cómo crear nuestra propia función? Veamos su esquema básico. Para crear una función necesitamos Un nombre, por ejemplo nombre_funcion (sin espacios ni caracteres extraños) A dicho nombre le asignamos &lt;- la palabra reservada function(). Dentro de function() definimos los argumentos de entrada que usará la función. Dentro de {} incluiremos la órdenes. Finalizaremos la función con return() indicando los argumentos de salida # No ejecutar --&gt; esquema conceptual nombre_funcion &lt;- function(argumento_1, argumento_2, ... ) { # Código que queramos ejecutar en la función código # Salida return(variable_salida) } En el esquema anterior argumento_1, argumento_2, …: serán los argumentos de entrada, los argumentos que toma la función para ejecutar el código que tiene dentro código: líneas de código que queramos que ejecute la función. IMPORTANTE: todas las variables que definamos dentro de la función son variables locales, solo existirán dentro de la función salvo que especifiquemos lo contrario. return(variable_salida): dentro del comando return() se introducirán los argumentos de salida, que puede ser un número, un data.frame, un caracter, una gráfica, una matriz… 13.1 Primera función Veamos un ejemplo muy simple de función para calcular el área de un rectángulo. ¿Qué se necesita para calcular el área? Dado que el área de un rectángulo se calcula como el producto de sus lados, necesitaremos precisamente eso, sus lados: esos serán los argumentos de entrada (lado_1 y lado_2). el valor a devolver será justo su área, calculada como lado_1 * lado_2. Nombre –&gt; calcular_area Argumentos –&gt; lado_1, lado_2 Código –&gt; area &lt;- lado_1 * lado_2 Salida –&gt; return(area) # Definición del nombre de función y argumentos de entrada calcular_area &lt;- function(lado_1, lado_2) { # Cuerpo de la función (lo que hace) area &lt;- lado_1 * lado_2 # Resultado (lo que devuelve) return(area) } También podemos hacer una definición directa, sin almacenar variables por el camino # Definición del nombre de función y argumentos de entrada calcular_area &lt;- function(lado_1, lado_2) { # Resultado que devolvemos return(lado_1 * lado_2) } ¿Cómo aplicar la función? Haciendo uso del nombre y los valores de los argumentos, usamos calcular_area() y le pasamos los dos argumentos de entrada. # Aplicación de la función con los parámetros por defecto calcular_area(5, 3) # área de un rectángulo 5 x 3 [1] 15 calcular_area(1, 5) # área de un rectángulo 1 x 5 [1] 5 calcular_area(3, 3) # área de un rectángulo 3 x 3 [1] 9 Imagina ahora que nos damos cuenta que el 90% de las veces usamos dicha función para calcular el área de un cuadrado (es decir, solo necesitamos un argumento, un lado, ya que en un cuadrado lado_1 = lado_2). Para ello, R nos permite definir argumentos por defecto en la función (tomarán dicho valor salvo que le asignemos otro, como nos ha pasado con el argumento na.rm para operar con datos ausentes). ¿Por qué no asignar lado_2 = lado_1 por defecto, para ahorrar líneas de código y tiempo? # Definición del nombre de función y argumentos de entrada # por defecto lado_2 = lado_1 calcular_area &lt;- function(lado_1, lado_2 = lado_1) { # Cuerpo de la función area &lt;- lado_1 * lado_2 # Resultado que devolvemos return(area) } Ahora, si no indicamos nada, por defecto el segundo lado será igual al primero (un cuadrado), y si se lo añadimos usará ambos. calcular_area(lado_1 = 5) # cuadrado: si no indicamos nada, lado_2 = lado_1 [1] 25 calcular_area(lado_1 = 5, lado_2 = 7) # rectángulo [1] 35   Compliquemos un poco la función y añadamos en la salida los valores de cada lado, etiquetados como lado_1 y lado_2, empaquetando la salida en una lista. # Definición del nombre de función y argumentos de entrada calcular_area &lt;- function(lado_1, lado_2 = lado_1) { # Cuerpo de la función area &lt;- lado_1 * lado_2 # Resultado return(list(&quot;area&quot; = area, &quot;lado_1&quot; = lado_1, &quot;lado_2&quot; = lado_2)) } Veamos que nos devuelve ahora salida &lt;- calcular_area(5, 3) salida $area [1] 15 $lado_1 [1] 5 $lado_2 [1] 3 salida[&quot;area&quot;] $area [1] 15 salida[&quot;lado_1&quot;] $lado_1 [1] 5 salida[&quot;lado_2&quot;] $lado_2 [1] 3 Antes nos daba igual el orden de los argumentos pero ahora no, ya que en la salida incluimos lado_1 y lado_2. Es altamente recomendable hacer la llamada a la función indicando explícitamente los argumentos argumento_1 = valor_1 para mejorar la legibilidad e interpretabilidad de nuestro código (recuerda: programa como escribirías en castellano). # Equivalente a calcular_area(5, 3) calcular_area(lado_1 = 5, lado_2 = 3) $area [1] 15 $lado_1 [1] 5 $lado_2 [1] 3 Parece una tontería lo que hemos hecho pero hemos cruzado una frontera importante: hemos pasado de consumir conocimiento (código de otros paquetes, elaborado por otros/as), a generar conocimiento, creando nuestras propias funciones. En este caso no ganaremos el Nobel por nuestro aporte, pero en un futuro… Si la Unión Europea lo ganó, hay opciones :) 13.2 Variables locales/globales Un aspecto importante sobre el que reflexionar con las funciones: ¿qué sucede si nombramos a una variable dentro de una función que se nos ha olvidado asignar un valor dentro de la misma? Debemos ser cautos al usar funciones en R, ya que debido a la «regla lexicográfica», si una variable no se define dentro de la función, R buscará dicha variable en el entorno de variables. Construyamos una función de ejemplo que no toma ningún argumento de entrada: solo imprime el valor de x. Como dentro de la función x no está definida, usará el valor definido fuera de la función. x &lt;- 1 funcion_ejemplo &lt;- function() { print(x) # No devuelve nada per se, solo realiza la acción de imprimir en consola } funcion_ejemplo() [1] 1 Si una variable ya está definida fuera de la función (entorno global), y además es usada dentro de la misma cambiando su valor, el valor de dicha variable solo cambia dentro de la función pero no en el entorno global. x &lt;- 1 funcion_ejemplo &lt;- function() { x &lt;- 2 print(x) # lo que vale dentro } funcion_ejemplo() # lo que vale dentro [1] 2 print(x) # lo que vale fuera [1] 1 Si queremos que además de cambiar localmente lo haga globalmente deberemos usar la doble asignación (&lt;&lt;-). x &lt;- 1 y &lt;- 2 funcion_ejemplo &lt;- function() { x &lt;- 3 # no cambia globalmente, solo localmente y &lt;&lt;- 0 # cambia globalmente print(x) print(y) } funcion_ejemplo() # lo que vale dentro [1] 3 [1] 0 x # lo que vale fuera [1] 1 y # lo que vale fuera [1] 0 13.3  Ejercicios (haz click en las flechas para ver soluciones) Ejercicio 1: modifica el código inferior para definir una función llamada funcion_suma, de forma que dados dos elementos, devuelve su suma. Solución: # Definimos función funcion_suma &lt;- function(x, y) { # Sumamos suma &lt;- x + y # Devolvemos la salida return(suma) } # Aplicamos la función funcion_suma(3, 7) [1] 10 # Definimos función nombre &lt;- function(x, y) { # Sumamos suma &lt;- # código a ejecutar # ¿Qué devolvemos? return() } # Aplicamos la función suma(3, 7)   Ejercicio 2: modifica el código inferior para definir una función llamada funcion_producto, de forma que dados dos elementos, devuelve su producto. Solución: # Definimos función funcion_producto &lt;- function(x, y) { # Multiplicamos producto &lt;- x * y # Devolvemos la salida return(producto) } # Aplicamos la función funcion_producto(3, -7) [1] -21 # Definimos función nombre &lt;- function(x, y) { # Multiplicamos producto &lt;- # código de la multiplicación # ¿Qué devolvemos? return() } # Aplicamos la función producto(3, -7)   Ejercicio 3: modifica el código inferior para definir una función llamada funcion_producto, de forma que dados dos elementos, devuelve su producto, pero que por defecto calcule el cuadrado (es decir, por defecto un solo argumento, y el resultado sea el número por sí mismo) Solución: # Definimos función funcion_producto &lt;- function(x, y = x) { # Multiplicamos producto &lt;- x * y # Devolvemos la salida return(producto) } # Aplicamos la función funcion_producto(3) # por defecto x = 3, y = 3 [1] 9 funcion_producto(3, -7) [1] -21 # Definimos función nombre &lt;- function(x, y) { # Multiplicamos producto &lt;- # código de la multiplicación # ¿Qué devolvemos? return() } # Aplicamos la función solo con un argumento producto(3) # Aplicamos la función con dos argumentos producto(3, -7)   Ejercicio 4: define una función llamada igualdad_nombres que, dados dos nombres persona_1 e persona_2, nos diga si son iguales o no. Hazlo considerando importantes las mayúsculas, y sin que importen las mayúsculas. Recuerda que con toupper() podemos pasar todo un texto a mayúscula. Solución: # Distinguiendo mayúsculas igualdad_nombres &lt;- function(persona_1, persona_2) { return(persona_1 == persona_2) } igualdad_nombres(&quot;Javi&quot;, &quot;javi&quot;) [1] FALSE igualdad_nombres(&quot;Javi&quot;, &quot;Lucía&quot;) [1] FALSE # Sin importar mayúsculas igualdad_nombres &lt;- function(persona_1, persona_2) { return(toupper(persona_1) == toupper(persona_2)) } igualdad_nombres(&quot;Javi&quot;, &quot;javi&quot;) [1] TRUE igualdad_nombres(&quot;Javi&quot;, &quot;Lucía&quot;) [1] FALSE   Ejercicio 5: define una función llamada pares que, dados dos números x e y, nos diga si la suma de ambos es par o no. Recuerda que con %% podemos obtener el resto de un número al dividir entre 2. 2 %% 2 # par, resto 0 [1] 0 3 %% 2 # impar, resto 1 [1] 1 Solución: # Definimos función pares &lt;- function(x, y) { # Sumamos suma &lt;- x + y # Comprobamos si es par par &lt;- suma %% 2 == 0 # Devolvemos la salida return(par) } # Aplicamos la función pares(1, 3) # suma 4 (par) [1] TRUE pares(2, 7) # suma 9 (impar) [1] FALSE   Ejercicio 6: define una función llamada pasar_a_celsius que, dada una temperatura \\(x\\) en Fahrenheit, la convierta a grados Celsius (\\(ºC = (ºF - 32) * \\frac{5}{9}\\)). Aplica la función a la columna Temp del conjunto airquality, e incorpórala al fichero en una nueva columna Temp_Celsius. Solución: # Definimos función pasar_a_celsius &lt;- function(x) { # Temperatura en Celsius x_celsius &lt;- (x - 32) * (5 / 9) # Devolvemos la salida return(x_celsius) } # Aplicamos la función pasar_a_celsius(0) [1] -17.77778 pasar_a_celsius(80) [1] 26.66667 # Aplicamos data.frame(airquality, &quot;Temp_Celsius&quot; = pasar_a_celsius(airquality$Temp)) Ozone Solar.R Wind Temp Month Day Temp_Celsius 1 41 190 7.4 67 5 1 19.44444 2 36 118 8.0 72 5 2 22.22222 3 12 149 12.6 74 5 3 23.33333 4 18 313 11.5 62 5 4 16.66667 5 NA NA 14.3 56 5 5 13.33333 6 28 NA 14.9 66 5 6 18.88889 7 23 299 8.6 65 5 7 18.33333 8 19 99 13.8 59 5 8 15.00000 9 8 19 20.1 61 5 9 16.11111 10 NA 194 8.6 69 5 10 20.55556 11 7 NA 6.9 74 5 11 23.33333 12 16 256 9.7 69 5 12 20.55556 13 11 290 9.2 66 5 13 18.88889 14 14 274 10.9 68 5 14 20.00000 15 18 65 13.2 58 5 15 14.44444 16 14 334 11.5 64 5 16 17.77778 17 34 307 12.0 66 5 17 18.88889 18 6 78 18.4 57 5 18 13.88889 19 30 322 11.5 68 5 19 20.00000 20 11 44 9.7 62 5 20 16.66667 21 1 8 9.7 59 5 21 15.00000 22 11 320 16.6 73 5 22 22.77778 23 4 25 9.7 61 5 23 16.11111 24 32 92 12.0 61 5 24 16.11111 25 NA 66 16.6 57 5 25 13.88889 26 NA 266 14.9 58 5 26 14.44444 27 NA NA 8.0 57 5 27 13.88889 28 23 13 12.0 67 5 28 19.44444 29 45 252 14.9 81 5 29 27.22222 30 115 223 5.7 79 5 30 26.11111 31 37 279 7.4 76 5 31 24.44444 32 NA 286 8.6 78 6 1 25.55556 33 NA 287 9.7 74 6 2 23.33333 34 NA 242 16.1 67 6 3 19.44444 35 NA 186 9.2 84 6 4 28.88889 36 NA 220 8.6 85 6 5 29.44444 37 NA 264 14.3 79 6 6 26.11111 38 29 127 9.7 82 6 7 27.77778 39 NA 273 6.9 87 6 8 30.55556 40 71 291 13.8 90 6 9 32.22222 41 39 323 11.5 87 6 10 30.55556 42 NA 259 10.9 93 6 11 33.88889 43 NA 250 9.2 92 6 12 33.33333 44 23 148 8.0 82 6 13 27.77778 45 NA 332 13.8 80 6 14 26.66667 46 NA 322 11.5 79 6 15 26.11111 47 21 191 14.9 77 6 16 25.00000 48 37 284 20.7 72 6 17 22.22222 49 20 37 9.2 65 6 18 18.33333 50 12 120 11.5 73 6 19 22.77778 51 13 137 10.3 76 6 20 24.44444 52 NA 150 6.3 77 6 21 25.00000 53 NA 59 1.7 76 6 22 24.44444 54 NA 91 4.6 76 6 23 24.44444 55 NA 250 6.3 76 6 24 24.44444 56 NA 135 8.0 75 6 25 23.88889 57 NA 127 8.0 78 6 26 25.55556 58 NA 47 10.3 73 6 27 22.77778 59 NA 98 11.5 80 6 28 26.66667 60 NA 31 14.9 77 6 29 25.00000 61 NA 138 8.0 83 6 30 28.33333 62 135 269 4.1 84 7 1 28.88889 63 49 248 9.2 85 7 2 29.44444 64 32 236 9.2 81 7 3 27.22222 65 NA 101 10.9 84 7 4 28.88889 66 64 175 4.6 83 7 5 28.33333 67 40 314 10.9 83 7 6 28.33333 68 77 276 5.1 88 7 7 31.11111 69 97 267 6.3 92 7 8 33.33333 70 97 272 5.7 92 7 9 33.33333 71 85 175 7.4 89 7 10 31.66667 72 NA 139 8.6 82 7 11 27.77778 73 10 264 14.3 73 7 12 22.77778 74 27 175 14.9 81 7 13 27.22222 75 NA 291 14.9 91 7 14 32.77778 76 7 48 14.3 80 7 15 26.66667 77 48 260 6.9 81 7 16 27.22222 78 35 274 10.3 82 7 17 27.77778 79 61 285 6.3 84 7 18 28.88889 80 79 187 5.1 87 7 19 30.55556 81 63 220 11.5 85 7 20 29.44444 82 16 7 6.9 74 7 21 23.33333 83 NA 258 9.7 81 7 22 27.22222 84 NA 295 11.5 82 7 23 27.77778 85 80 294 8.6 86 7 24 30.00000 86 108 223 8.0 85 7 25 29.44444 87 20 81 8.6 82 7 26 27.77778 88 52 82 12.0 86 7 27 30.00000 89 82 213 7.4 88 7 28 31.11111 90 50 275 7.4 86 7 29 30.00000 91 64 253 7.4 83 7 30 28.33333 92 59 254 9.2 81 7 31 27.22222 93 39 83 6.9 81 8 1 27.22222 94 9 24 13.8 81 8 2 27.22222 95 16 77 7.4 82 8 3 27.77778 96 78 NA 6.9 86 8 4 30.00000 97 35 NA 7.4 85 8 5 29.44444 98 66 NA 4.6 87 8 6 30.55556 99 122 255 4.0 89 8 7 31.66667 100 89 229 10.3 90 8 8 32.22222 101 110 207 8.0 90 8 9 32.22222 102 NA 222 8.6 92 8 10 33.33333 103 NA 137 11.5 86 8 11 30.00000 104 44 192 11.5 86 8 12 30.00000 105 28 273 11.5 82 8 13 27.77778 106 65 157 9.7 80 8 14 26.66667 107 NA 64 11.5 79 8 15 26.11111 108 22 71 10.3 77 8 16 25.00000 109 59 51 6.3 79 8 17 26.11111 110 23 115 7.4 76 8 18 24.44444 111 31 244 10.9 78 8 19 25.55556 112 44 190 10.3 78 8 20 25.55556 113 21 259 15.5 77 8 21 25.00000 114 9 36 14.3 72 8 22 22.22222 115 NA 255 12.6 75 8 23 23.88889 116 45 212 9.7 79 8 24 26.11111 117 168 238 3.4 81 8 25 27.22222 118 73 215 8.0 86 8 26 30.00000 119 NA 153 5.7 88 8 27 31.11111 120 76 203 9.7 97 8 28 36.11111 121 118 225 2.3 94 8 29 34.44444 122 84 237 6.3 96 8 30 35.55556 123 85 188 6.3 94 8 31 34.44444 124 96 167 6.9 91 9 1 32.77778 125 78 197 5.1 92 9 2 33.33333 126 73 183 2.8 93 9 3 33.88889 127 91 189 4.6 93 9 4 33.88889 128 47 95 7.4 87 9 5 30.55556 129 32 92 15.5 84 9 6 28.88889 130 20 252 10.9 80 9 7 26.66667 131 23 220 10.3 78 9 8 25.55556 132 21 230 10.9 75 9 9 23.88889 133 24 259 9.7 73 9 10 22.77778 134 44 236 14.9 81 9 11 27.22222 135 21 259 15.5 76 9 12 24.44444 136 28 238 6.3 77 9 13 25.00000 137 9 24 10.9 71 9 14 21.66667 138 13 112 11.5 71 9 15 21.66667 139 46 237 6.9 78 9 16 25.55556 140 18 224 13.8 67 9 17 19.44444 141 13 27 10.3 76 9 18 24.44444 142 24 238 10.3 68 9 19 20.00000 [ reached &#39;max&#39; / getOption(&quot;max.print&quot;) -- omitted 11 rows ] "],["proyecto.html", "Chapter 14 Proyecto de trabajo 14.1 Crear proyecto 14.2 Directorios de trabajo y cabecera 14.3 Ejecución 14.4 Consejos", " Chapter 14 Proyecto de trabajo Estamos listos/as para crear nuestro primer proyecto de R para trabajar ordenadicos/as. Cuando se empieza a programar para un trabajo concreto de R es recomendable crearnos lo que se conoce como un proyecto de R: en lugar de ir abriendo ventanas sueltas para programar (las pestañas de los scripts, los archivos con extensión .R que hemos comentado), podemos agruparlos en distintos proyectos, de forma que podamos acceder a ellos de forma ordenada (algo así como crear carpetas en nuestro disco duro, pero en RStudio). 14.1 Crear proyecto Para crear nuestro proyecto deberemos de ir al menú superior File &lt;&lt; New Project (ver 14.1) Figure 14.1: Crear un nuevo proyecto en R. Se nos abrirá una ventana con 3 opciones: New directory: crear un proyecto desde el inicio (opción recomendable). Existing directory: crear un proyecto con los códigos que tienes ya guardados en una carpeta. Version control: para importar el proyecto de algún repositorio y vincularlo a él. Figure 14.2: Opciones de creación. Figure 14.3: Clickar en «New project». Deberemos elegir el directorio de nuestro ordenador donde queremos que se guarde (una carpeta que contendrá todos los códigos y datos de ese proyecto), así como el nombre del proyecto (que será a su vez el nombre de la subcarpeta que se os creará en el ordenador). Figure 14.4: Nombre del proyecto. Una vez que el proyecto está creado, abriremos un script de R (donde escribiremos el código), escribiremos si queremos una descripción del proyecto en la primera línea y guardaremos el archivo (archivo de extensión .R). Figure 14.5: Abrir nuestro primer script de R. Figure 14.6: Descripción al inicio del código. Figure 14.7: Guardamos el código. Figure 14.8: Guardamos el código. Este será nuestro código principal (puedes ponerle el nombre que quieras, normalmente se le llama main.R para diferenciarlo del resto), desde el que iremos construyendo nuestro código e iremos llamando a otros archivos si es necesario. Recuerda que programar es como escribir: cuanto más limpio y estructurado, mejor se entenderá.   La ventaja de tener los códigos agrupados por proyectos es que si estamos trabajando en varios a la vez podemos saltar de uno a otro, visualizando solo los códigos de un proyecto, y no los 100 archivos que vayamos creando. Figure 14.9: Saltar de proyecto en proyecto. 14.2 Directorios de trabajo y cabecera Como luego veremos, es altamente recomendable que todos los archivos (códigos, datos, imágenes, etc) estén dentro de la misma carpeta del proyecto (aunque podamos crear subdirectorios), para que trabajar en el proyecto sea más sencillo e intuitivo. Vamos a crearnos dentro de la carpeta del proyecto, una subcarpeta que se llame DATOS, en donde debemos descargar todos los ficheros que hay en https://github.com/dadosdelaplace/courses-intro-r/tree/main/DATOS, y otra llamada CODIGOS, donde guardar nuestros archivos .R (por eso de ser ordenadicos). Figure 14.10: Subcarpeta «CODIGOS». En esa carpeta de códigos vamos a crear de prueba el código llamado variables.R donde vamos a definir algunas variables que luego usaremos en el código principal (suele suceder con variables que van a ser fijas como nombres, fechas o codificaciones de variables). # Descripción: script de prueba con variables # Variables x &lt;- c(1, 2, 0, -1, 71) # Vector de números y &lt;- c(&quot;hola&quot;, &quot;me&quot;, &quot;llamo&quot;, &quot;Cristian&quot;) # Vector de caracteres apellido &lt;- &quot;Crisben&quot; # Fechas hoy &lt;- as_date(today()) # Convertir a tipo fecha la fecha de hoy fecha_origen &lt;- as_date(&quot;2021-01-01&quot;) # Inicio de año 2021 Figure 14.11: Escribimos una serie de variables fijas para luego ser usadas. No es obligatorio pero es altamente recomendable tener muy estructurado nuestros códigos, de forma que el archivo .R haga una tarea concreta y definida (uno carga archivos, otro preprocesa, otro hace un modelo, otro hace las gráficas), y sea el código principal el que haga una llamada limpia a todos ellos, para que en caso de error, la detección del mismo sea más sencilla. Así que eso haremos: desde nuestro archivo principal main.R llamaremos a ese archivo variables.R, para luego usar las variables definidas en él. ¿Cómo indicarle a R donde está nuestro fichero? En R, como en todo lenguaje de programación, podemos consultar lo que el ordenador llama directorio de trabajo: la carpeta «base» desde donde está ejecutando tu código. Dicha ruta de directorio se puede consultar con la función getwd(), pudiendo ver los archivos y carpetas que hay dentro del mismo con el comando dir() getwd() dir() Figure 14.12: Consultar directorio de trabajo predeterminado y archivos contenidos en él. Lo ideal es empezar el código fijando como directorio de trabajo el directorio donde tengamos nuestro archivo principal main.R y para ello usaremos la función setwd(), cuyo argumento será la ruta donde queremos fijarlo. Para hacerlo de forma automática (y que el código pueda ser abierto por ti pero también por otros que no tengan tu misma estructura de carpetas), obtendremos de forma automática la ruta del archivo main.R o del proyecto con la orden rstudioapi::getSourceEditorContext()$path, y después usaremos dirname() para quedarnos solo con la ruta de carpetas (eliminando el nombre del fichero al final). Esa será la ruta que le pasaremos a setwd(), quedando nuestro directorio de trabajo automáticamente fijado, sin preocuparnos de la ruta # Fijamos directorio de trabajo automáticamente setwd(dirname(rstudioapi::getSourceEditorContext()$path)) Figure 14.13: Fijamos de forma automático el directorio de trabajo. Una vez que hemos fijado nuestro directorio, para cargar código .R, basta que usemos la función source(), cuyo argumento será la ruta del archivo. Como tenemos de directorio base el directorio en el que tenemos nuestro archivo principal (./), bastará que empecemos a escribir source(\"./\"), presionar el tabulador, y se nos abrirá el menú de archivos de nuestro directorio de trabajo, pudiendo ir seleccionando de forma sencilla la ruta de nuestro archivo. Figure 14.14: Cargar archivos de nuestro directorio de trabajo. Figure 14.15: Cargar archivos de nuestro directorio de trabajo. 14.3 Ejecución Ese archivo que hemos incluido en el código principal nos cargará las variables que hemos definido en él, pudiendo usarlas en el código. Vamos a ejecutar lo que tenemos de momento, y para ello tenemos 2 opciones: o copiar el código del script en la consola y pulsar ENTER, o bien, activando la casilla source on save y guardando el script (no solo se guardará sino que se ejecutará). Figure 14.16: Guardamos con la casilla «source on save» activada para que además de guardar se ejecute el código. Como vemos en la imagen 14.16, una vez ejecutado, tenemos en nuestro panel de entorno (parte superior derecha) las variables ya cargadas que teníamos definidas en nuestro fichero variables.R. Prueba a escribir algunas funciones que hemos aprendido con dichas variables y vuelve a hacer click en «guardar» con source on save activado. # Sumamos 3 a cada elemento de x z &lt;- x + 3 z [1] 4 5 3 2 74 # Imprimimos por pantalla la frase unida, y a dicha frase # le pegamos nuestro apellido cat(paste(paste(y, collapse = &quot; &quot;), apellido)) hola me llamo Cristian Crisben # Días que han pasado desde el inicio de año dias &lt;- hoy - fecha_origen dias Time difference of 1205 days La función cat() nos muestra por consola el texto que le pasemos de argumento (función especial para mensajes de alerta por consola) Figure 14.17: Cálculos con la variables definidas: suma, concatenación de texto y diferencia de fechas. Ya hemos ejecutado nuestro primer proyecto en .R :)   WARNING: guardar los scripts Los scripts que tengas sin guardar tendrán un asterisco * al final del nombre en la pestaña superior de la ventana. 14.4 Consejos CONSEJOS   Limpiar consola Podemos limpiar la consola clickando en al escoba que tenemos en la parte superior derecha de la misma. Esta acción no nos elimina ninguna variable, simplemente nos limpia la consola de mensajes.   Comentarios en los códigos Es crucial que intentes documentar al máximo tu código y que te acostumbres a ello desde el principio, dejando explícito que haces en cada paso, tanto para ti como para otra persona que pueda leer tu código y lo entienda. Para ello usaremos # comentario cuando queramos dejar comentarios en el código. Dichas partes, amén de estar en otro color, no son leídas por R ni ejecutadas: son comentarios que el programa «no ve», solo son para nosotros.   "],["importar-exportar.html", "Chapter 15 Importar/exportar datos 15.1 Importar datos 15.2 Archivo .rda: pisos en Boston 15.3 Desde paquete: estadísticas del Eurostat 15.4 Importando datos RECTANGULARES 15.5 Exportación de datos 15.6 Consejos", " Chapter 15 Importar/exportar datos Hemos aprendido a crear nuestros propios datos pero muchas veces los cargaremos de distintos paquetes, archivos y fuentes, y necesitaremos expotarlo. En este manual introductorio simplemente vamos a ver cómo cargar datos desde paquetes o formatos nativos de R, así como su exportación (pero las fuentes de exportación son más de las que imaginas, desde Spotify hasta el AEMET, pero lo dejaremos para un futuro manual algo más avanzado.) Es recomendable tener los datos en la misma carpeta del proyecto pero una carpeta separada, ya que podemos tener muchos archivos y así no mezclamos dichos ficheros con los códigos que escirbamos. 15.1 Importar datos 15.1.1 Archivo .RData: pasajeros del RMS Titanic Fuente original de los datos: https://www.kaggle.com/c/titanic/overview El 15 de abril de 1912 se producía el hundimiento naval más famoso de la historia: el hundimiento del barco RMS Titanic. Tras chocar con un iceberg, y con un déficit de botes salvavidas a bordo, murieron 1502 de los 2224 pasajeros (tripulación incluida) que iban a bordo del navío. ¿Qué edad, sexo o cabina ocupabana los pasajeros que sobrevivieron y los que no sobrevivieron? Dicho conjunto de datos nos va a servir para ilustrar la forma más sencilla de guardar datos y variables en R, y que además ocupa menos espacio en nuestro disco duro: los archivos propios que tiene R con extensiones .rda o .RData. De nuestra carpeta DATOS cargaremos el archivo titanic.RData, un archivo con extensión .RData, conteniendo los datos de los pasajeros del Titanic (nombre, título, cabina, si sobrevivió o no, edad, etc) ¿Cómo cargar archivos .RData? Muy sencillo: como son ficheros nativos de R, basta con usar la función de carga load(), y dentro de los paréntesis la ruta del archivo que queramos cargar. load(&quot;./DATOS/titanic.RData&quot;) Fíjate que, al fijar nuestro directorio de trabajo, no necesitamos toda la ruta, solo ./ (que nos arranca la ruta en la carpeta de nuestro proyecto) más la ruta dentro de la carpeta del proyecto. Ahora en el panel de entorno de la parte superior derecha tendremos un data.frame que antes no teníamos. Ya hemos visto que una función muy útil es head(), con argumento el nombre de un data.frame, que nos permite visualizar las primeras filas. head(titanic) PassengerId Survived Pclass Name Sex Age SibSp Parch Ticket Fare 1 1 0 3 Braund, Mr. Owen Harris male 22 1 0 A/5 21171 7.2500 2 2 1 1 Cumings, Mrs. John Bradley (Florence Briggs Thayer) female 38 1 0 PC 17599 71.2833 3 3 1 3 Heikkinen, Miss. Laina female 26 0 0 STON/O2. 3101282 7.9250 4 4 1 1 Futrelle, Mrs. Jacques Heath (Lily May Peel) female 35 1 0 113803 53.1000 5 5 0 3 Allen, Mr. William Henry male 35 0 0 373450 8.0500 6 6 0 3 Moran, Mr. James male NA 0 0 330877 8.4583 Cabin Embarked 1 S 2 C85 C 3 S 4 C123 S 5 S 6 Q 15.2 Archivo .rda: pisos en Boston Fuente original de los datos: https://doi.org/10.1016/0095-0696(78)90006-2 Muchas veces no tendremos un .Rdata sino un archivo .rda. El procedimiento para leerlo será el mismo load(&quot;./DATOS/boston.rda&quot;) El dataset Boston está basado en el estudio que realizaron Harrison and Rubinfeld, 1978 en el que se pretende determinar la disposición de los compradores para pagar más por una vivienda en un entorno con mayor calidad del aire. El conjunto de datos contiene datos del área metropolitana de Boston, con datos de 560 vecindarios, midiendo 14 variables en cada uno. Las variables están totalmente descritas en Harrison and Rubinfeld, 1978 pero podemos resumirlas de la siguiente forma: medv: variable objetivo, representa la mediana del precio inmobiliario (en miles de dolares). Variables arquitectónicas: rm (número medio de habitaciones) y age (porcentaje de propiedades construidas antes de 1940). Variables de vecindario: crim (tasa de criminalidad), zn (porcentaje del territorio destinado a áreas residenciales), indus (porcentaje del territorio destinado al tejido industrial), chas ( ¿hay río limitando la extensión en el territorio?), tax (coste de los servicios públicos), ptratio (ratio alumno-profesor), black (índice de población negra - sí, es un archivo vergonzoso, pero no viene mal ver los sesgo raciales de muchos de los datos que consumimos - calcualda como \\(1000 ( B - 0.63)^2\\), donde \\(B\\) es el procentaje de población negra) y lstat (porcentaje de la población con bajos ingresos). Variables de accesibilidad: dis (distancia a oficinas de empleo) y rad (categoría indicando la accesibilidad a la red de autopistas, a mayor índice, mayor accesibilidad). Variables de calidad del aire: nox (concentración anual de óxido de nitrógeno, en partes por 10 millones). 15.3 Desde paquete: estadísticas del Eurostat Fuente original de los datos: Our World in Data Una opción muy común es cargar datos desde paquetes que ya los tienen incorporadas (o los consiguen a través de una API). Uno de los ejemplos más útiles seguramente sea uno de los protagonistas de los últimos años debido a la pandemia ha sido la web Our World in Data, y en concreto los datos que han recopilado de covid y vacunación de todos los países del mundo. Y sí, podemos acceder a ellos directamente desde R a través del paquete {owidR}. # install.packages(&quot;owidR&quot;) library(owidR) Con la función owid_search() podemos introducir una palabra clave, para obtener el listado de datasets y su palabra clave. 15.4 Importando datos RECTANGULARES El paquete {readr} dentro del entorno {tidyverse} contiene distintas funciones útiles para la carga de .bg-purple_light[datos rectangulares] (sin formatear). .pull-left[ read_csv(): archivos .csv cuyo separador sea la .bg-purple_light[coma] , read_csv2(): archivos .csv cuyo separador sea el .bg-purple_light[punto y coma] ; read_tsv(): archivos cuyos valores estén separados por un .bg-purple_light[tabulador]. read_table(): archivos cuyos valores estén separados por un .bg-purple_light[espacio]. read_delim(): función general para leer archivos delimitados por caracteres. Figure 15.1: Ver más en https://readr.tidyverse.org/ Todos necesitan como argumento la .bg-purple_light[ruta del archivo] (que podemos simplificar teniendo una carpeta de datos en nuestro proyecto), amén de otros argumentos opcionales (saltar o no cabecera, decimales son con punto o coma, etc) 15.4.1 CSV La principal ventaja de {readr} es que .bg-purple_light[automatiza el formateo] necesario para pasar de un archivo plano (sin formato) a un tibble (en filas y columnas, con formato). En read_csv() necesitaremos pasar como argumento la ruta del archivo en file library(readr) chickens &lt;- read_csv(file = &quot;./datos/chickens.csv&quot;) chickens # A tibble: 5 × 4 chicken sex eggs_laid motto &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; 1 Foghorn Leghorn rooster 0 That&#39;s a joke, ah say, that&#39;s a joke, son. 2 Chicken Little hen 3 The sky is falling! 3 Ginger hen 12 Listen. We&#39;ll either die free chickens or we die trying. 4 Camilla the Chicken hen 7 Bawk, buck, ba-gawk. 5 Ernie The Giant Chicken rooster 0 Put Captain Solo in the cargo hold. El formato de las columnas normalmente lo hará read_csv() de forma automática, y podemos consultarlo con spec() spec(chickens) cols( chicken = col_character(), sex = col_character(), eggs_laid = col_double(), motto = col_character() ) Aunque lo haga normalmente bien de forma automática podemos .bg-purple_light[especificar el formato explícitamente] en col_types = list() (en formato lista, con col_xxx() para el formateo de cada tipo de variable, por ejemplo una la pondremos como factor). chickens &lt;- read_csv(file = &quot;./datos/chickens.csv&quot;, col_types = list(col_character(), col_factor(), col_double(), col_character())) chickens # A tibble: 5 × 4 chicken sex eggs_laid motto &lt;chr&gt; &lt;fct&gt; &lt;dbl&gt; &lt;chr&gt; 1 Foghorn Leghorn rooster 0 That&#39;s a joke, ah say, that&#39;s a joke, son. 2 Chicken Little hen 3 The sky is falling! 3 Ginger hen 12 Listen. We&#39;ll either die free chickens or we die trying. 4 Camilla the Chicken hen 7 Bawk, buck, ba-gawk. 5 Ernie The Giant Chicken rooster 0 Put Captain Solo in the cargo hold. Incluso podemos .bg-purple_light[indicar que columnas que queremos] (imagina que no quieres cargar todas, y quieres seleccionar ya en la carga para que no te ocupe en memoria), indicándoselo en col_select = .... chickens &lt;- read_csv(file = &quot;./datos/chickens.csv&quot;, col_select = c(chicken, eggs_laid)) chickens # A tibble: 5 × 2 chicken eggs_laid &lt;chr&gt; &lt;dbl&gt; 1 Foghorn Leghorn 0 2 Chicken Little 3 3 Ginger 12 4 Camilla the Chicken 7 5 Ernie The Giant Chicken 0 Dentro de col_select = ... podemos .bg-purple_light[usar sentencias tidyverse] como starts_with(...) chickens &lt;- read_csv(file = &quot;./datos/chickens.csv&quot;, col_select = c(starts_with(&quot;c&quot;), last_col())) chickens # A tibble: 5 × 2 chicken motto &lt;chr&gt; &lt;chr&gt; 1 Foghorn Leghorn That&#39;s a joke, ah say, that&#39;s a joke, son. 2 Chicken Little The sky is falling! 3 Ginger Listen. We&#39;ll either die free chickens or we die trying. 4 Camilla the Chicken Bawk, buck, ba-gawk. 5 Ernie The Giant Chicken Put Captain Solo in the cargo hold. También podemos .bg-purple_light[decidir nosotros los nombres] de las variables indicándoselo en col_names = ... (incluso si los decimales están codificados con punto o coma) chickens &lt;- read_csv(file = &quot;./datos/chickens.csv&quot;, col_names = c(&quot;var1&quot;, &quot;var2&quot;, &quot;var3&quot;, &quot;var4&quot;)) chickens # A tibble: 6 × 4 var1 var2 var3 var4 &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; 1 chicken sex eggs_laid motto 2 Foghorn Leghorn rooster 0 That&#39;s a joke, ah say, that&#39;s a joke, son. 3 Chicken Little hen 3 The sky is falling! 4 Ginger hen 12 Listen. We&#39;ll either die free chickens or we die trying. 5 Camilla the Chicken hen 7 Bawk, buck, ba-gawk. 6 Ernie The Giant Chicken rooster 0 Put Captain Solo in the cargo hold. ¿Qué sucede cuando el separador no el correcto? Como puedes ver en la carga del siguiente .txt, nos interpreta todo como una sola columna, ya que no le hemos indicado donde separar datos_txt &lt;- read_csv(file = &quot;./datos/massey-rating.txt&quot;) as_tibble(datos_txt) # A tibble: 10 × 1 `UCC PAY LAZ KPK RT COF BIH DII ENG ACU Rank Team Conf` &lt;chr&gt; 1 1 1 1 1 1 1 1 1 1 1 1 Ohio St B10 2 2 2 2 2 2 2 2 2 4 2 2 Oregon P12 3 3 4 3 4 3 4 3 4 2 3 3 Alabama SEC 4 4 3 4 3 4 3 5 3 3 4 4 TCU B12 5 6 6 6 5 5 7 6 5 6 11 5 Michigan St B10 6 7 7 7 6 7 6 11 8 7 8 6 Georgia SEC 7 5 5 5 7 6 8 4 6 5 5 7 Florida St ACC 8 8 8 9 9 10 5 7 7 10 7 8 Baylor B12 9 9 11 8 13 11 11 12 9 14 9 9 Georgia Tech ACC 10 13 10 13 11 8 9 10 11 9 10 10 Mississippi SEC 15.4.2 txt Para ello tenemos read_csv2() cuando el separador sea el .bg-purple_light[punto y coma], read_tsv() cuando el separador sea un .bg-purple_light[tabulador], read_table() cuando el separador sea un .bg-purple_light[espacio] y read_delim() en general datos_txt &lt;- read_table(file = &quot;./datos/massey-rating.txt&quot;) as_tibble(datos_txt) # A tibble: 10 × 13 UCC PAY LAZ KPK RT COF BIH DII ENG ACU Rank Team Conf &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; 1 1 1 1 1 1 1 1 1 1 1 1 Ohio St 2 2 2 2 2 2 2 2 2 4 2 2 Oregon P12 3 3 4 3 4 3 4 3 4 2 3 3 Alabama SEC 4 4 3 4 3 4 3 5 3 3 4 4 TCU B12 5 6 6 6 5 5 7 6 5 6 11 5 Michigan St 6 7 7 7 6 7 6 11 8 7 8 6 Georgia SEC 7 5 5 5 7 6 8 4 6 5 5 7 Florida St 8 8 8 9 9 10 5 7 7 10 7 8 Baylor B12 9 9 11 8 13 11 11 12 9 14 9 9 Georgia Tech 10 13 10 13 11 8 9 10 11 9 10 10 Mississippi SEC 15.4.3 DESDE WEB Una de las principales ventajas de R es que podemos .bg-purple_light[importar datos desde una web], sin necesidad de realizar la descarga manual del archivo. Y lo mejor es que se hará igual que hemos importado todo: en lugar de pasarle la ruta local de nuestro PC, le .bg-purple_light[indicaremos el enlace (permalink)]. momo_datos &lt;- read_csv(file = &quot;https://momo.isciii.es/public/momo/data&quot;, n_max = 500000) momo_datos # A tibble: 500,000 × 15 ambito cod_ambito cod_ine_ambito nombre_ambito cod_sexo nombre_sexo cod_gedad nombre_gedad fecha_defuncion defunciones_observadas &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;date&gt; &lt;dbl&gt; 1 ccaa AN 1 Andalucía 1 hombres +65 edad &gt;= 65 2015-01-01 109. 2 ccaa AN 1 Andalucía 1 hombres +85 edad &gt;= 85 2015-01-01 35.6 3 ccaa AN 1 Andalucía 1 hombres 0-14 edad 0-14 2015-01-01 0 4 ccaa AN 1 Andalucía 1 hombres 15-44 edad 15-44 2015-01-01 3.05 5 ccaa AN 1 Andalucía 1 hombres 45-64 edad 45-64 2015-01-01 29.4 6 ccaa AN 1 Andalucía 1 hombres 65-74 edad 65-74 2015-01-01 32.5 7 ccaa AN 1 Andalucía 1 hombres 75-84 edad 75-84 2015-01-01 41.7 8 ccaa AN 1 Andalucía 1 hombres all todos 2015-01-01 142. 9 ccaa AN 1 Andalucía 6 mujeres +65 edad &gt;= 65 2015-01-01 121. 10 ccaa AN 1 Andalucía 6 mujeres +85 edad &gt;= 85 2015-01-01 69.1 # ℹ 499,990 more rows # ℹ 5 more variables: defunciones_estimadas_base &lt;dbl&gt;, defunciones_estimadas_base_q01 &lt;dbl&gt;, defunciones_estimadas_base_q99 &lt;dbl&gt;, # defunciones_atrib_exc_temp &lt;dbl&gt;, defunciones_atrib_def_temp &lt;dbl&gt; discurso_2021 &lt;- read_delim(file = &quot;https://raw.githubusercontent.com/lirondos/discursos-de-navidad/master/data/speeches/2021.txt&quot;, delim = &quot;\\t&quot;) discurso_2021 # A tibble: 26 × 1 `Buenas noches,` &lt;chr&gt; 1 Mis primeras palabras en esta Nochebuena quiero dedicarlas a quienes vivís en la isla de La Palma y estáis pasando, desde hace tres… 2 Hoy nuestro corazón y nuestro pensamiento siguen con vosotros. Nos sentimos muy cerca y sabéis que tenéis nuestra solidaridad y que… 3 El año pasado, en mi mensaje de Navidad, compartí con vosotros la necesidad de hacer un gran esfuerzo colectivo que nos permitiera … 4 Un año después —y siempre con toda la prudencia necesaria— la situación es diferente. Hemos avanzado sustancialmente en la lucha co… 5 Aun así, estamos viendo que el virus todavía tiene la capacidad de hacernos daño, de muchas maneras. Se vuelve a transmitir muy ráp… 6 También en este último año muchos ciudadanos continúan padeciendo las consecuencias sociales, económicas y también emocionales deri… 7 Y junto a todo ello, es verdad que en el mundo es un hecho que los países dependemos, cada vez más, los unos de los otros; y que se… 8 También, las nuevas tecnologías están cambiando los tradicionales modos de producción de las empresas y por tanto influyen en el co… 9 Estos son algunos ejemplos de los retos que tenemos por delante y que muestran los tiempos tan complicados que vivimos; tiempos que… 10 Ante esta situación ¿qué hacer?, ¿tenemos que dejarnos llevar por el pesimismo?; ¿debemos caer en el conformismo, esperando que los… # ℹ 16 more rows 15.4.4 EXCEL readxl Otro de los paquetes fundamentales de importación será el paquete {readxl} para .bg-purple_light[importar datos desde una Excel] (y {openxlsx} para exportar, aunque se recomienda .csv) Tres funciones serán claves: read_xls() (especifica para extensión .xls), read_xlsx() (especifica para extensión .xlsx) y read_excel() (para ambas). library(readxl) deaths &lt;- read_xls(path = &quot;./datos/deaths.xls&quot;, skip = 4) deaths # A tibble: 14 × 6 Name Profession Age `Has kids` `Date of birth` `Date of death` &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dttm&gt; &lt;chr&gt; 1 David Bowie musician 69 TRUE 1947-01-08 00:00:00 42379 2 Carrie Fisher actor 60 TRUE 1956-10-21 00:00:00 42731 3 Chuck Berry musician 90 TRUE 1926-10-18 00:00:00 42812 4 Bill Paxton actor 61 TRUE 1955-05-17 00:00:00 42791 5 Prince musician 57 TRUE 1958-06-07 00:00:00 42481 6 Alan Rickman actor 69 FALSE 1946-02-21 00:00:00 42383 7 Florence Henderson actor 82 TRUE 1934-02-14 00:00:00 42698 8 Harper Lee author 89 FALSE 1926-04-28 00:00:00 42419 9 Zsa Zsa Gábor actor 99 TRUE 1917-02-06 00:00:00 42722 10 George Michael musician 53 FALSE 1963-06-25 00:00:00 42729 11 Some &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; NA &lt;NA&gt; 12 &lt;NA&gt; also like to write stuff &lt;NA&gt; &lt;NA&gt; NA &lt;NA&gt; 13 &lt;NA&gt; &lt;NA&gt; at the bottom, NA &lt;NA&gt; 14 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; NA too! deaths &lt;- read_xlsx(path = &quot;./datos/deaths.xlsx&quot;, skip = 5, col_names = c(&quot;name&quot;, &quot;profession&quot;, &quot;age&quot;, &quot;kids&quot;, &quot;birth&quot;, &quot;death&quot;)) deaths # A tibble: 14 × 6 name profession age kids birth death &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dttm&gt; &lt;chr&gt; 1 David Bowie musician 69 TRUE 1947-01-08 00:00:00 42379 2 Carrie Fisher actor 60 TRUE 1956-10-21 00:00:00 42731 3 Chuck Berry musician 90 TRUE 1926-10-18 00:00:00 42812 4 Bill Paxton actor 61 TRUE 1955-05-17 00:00:00 42791 5 Prince musician 57 TRUE 1958-06-07 00:00:00 42481 6 Alan Rickman actor 69 FALSE 1946-02-21 00:00:00 42383 7 Florence Henderson actor 82 TRUE 1934-02-14 00:00:00 42698 8 Harper Lee author 89 FALSE 1926-04-28 00:00:00 42419 9 Zsa Zsa Gábor actor 99 TRUE 1917-02-06 00:00:00 42722 10 George Michael musician 53 FALSE 1963-06-25 00:00:00 42729 11 Some &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; NA &lt;NA&gt; 12 &lt;NA&gt; also like to write stuff &lt;NA&gt; &lt;NA&gt; NA &lt;NA&gt; 13 &lt;NA&gt; &lt;NA&gt; at the bottom, NA &lt;NA&gt; 14 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; NA too! 15.4.5 EXCEL openxlsx Si te fijas las .bg-purple_light[fechas de Excel están mal formateadas] (sorpresa) así que podemos hacer uso de convertToDate() del paquete {openxlsx} para convertirlo library(openxlsx) library(lubridate) deaths %&gt;% mutate(birth = as_date(birth), death = convertToDate(death)) # A tibble: 14 × 6 name profession age kids birth death &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;date&gt; &lt;date&gt; 1 David Bowie musician 69 TRUE 1947-01-08 2016-01-10 2 Carrie Fisher actor 60 TRUE 1956-10-21 2016-12-27 3 Chuck Berry musician 90 TRUE 1926-10-18 2017-03-18 4 Bill Paxton actor 61 TRUE 1955-05-17 2017-02-25 5 Prince musician 57 TRUE 1958-06-07 2016-04-21 6 Alan Rickman actor 69 FALSE 1946-02-21 2016-01-14 7 Florence Henderson actor 82 TRUE 1934-02-14 2016-11-24 8 Harper Lee author 89 FALSE 1926-04-28 2016-02-19 9 Zsa Zsa Gábor actor 99 TRUE 1917-02-06 2016-12-18 10 George Michael musician 53 FALSE 1963-06-25 2016-12-25 11 Some &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; NA NA 12 &lt;NA&gt; also like to write stuff &lt;NA&gt; &lt;NA&gt; NA NA 13 &lt;NA&gt; &lt;NA&gt; at the bottom, NA NA 14 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; NA NA También podemos .bg-purple_light[cargar un Excel con varias hojas], pero por defecto nos carga solo la primera hoja. Para indicarle la hoja (bien por su nombre bien por su número) usaremos el argumento sheet = ... mtcars &lt;- read_xlsx(path = &quot;./datos/datasets.xlsx&quot;, sheet = &quot;mtcars&quot;) mtcars # A tibble: 32 × 11 mpg cyl disp hp drat wt qsec vs am gear carb &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 21 6 160 110 3.9 2.62 16.5 0 1 4 4 2 21 6 160 110 3.9 2.88 17.0 0 1 4 4 3 22.8 4 108 93 3.85 2.32 18.6 1 1 4 1 4 21.4 6 258 110 3.08 3.22 19.4 1 0 3 1 5 18.7 8 360 175 3.15 3.44 17.0 0 0 3 2 6 18.1 6 225 105 2.76 3.46 20.2 1 0 3 1 7 14.3 8 360 245 3.21 3.57 15.8 0 0 3 4 8 24.4 4 147. 62 3.69 3.19 20 1 0 4 2 9 22.8 4 141. 95 3.92 3.15 22.9 1 0 4 2 10 19.2 6 168. 123 3.92 3.44 18.3 1 0 4 4 # ℹ 22 more rows Incluso podemos .bg-purple_light[indicarle el rango de celdas] del Excel que queremos cargar, haciendo uso del argumento range = ... iris &lt;- read_xlsx(path = &quot;./datos/datasets.xlsx&quot;, sheet = &quot;iris&quot;, range = &quot;C1:E4&quot;) iris # A tibble: 3 × 3 Petal.Length Petal.Width Species &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; 1 1.4 0.2 setosa 2 1.4 0.2 setosa 3 1.3 0.2 setosa 15.4.6 googlesheet Otra opción disponible (sobre todo si trabajamos con otras personas que trabajan en Google Drive) es .bg-purple_light[importar desde una hoja de cálculo Google Drive], haciendo uso de read_sheet() del paquete {googlesheets4} (os pedirá un permiso de tidyverse para interactuar con vuestro drive) library(googlesheets4) google_sheet &lt;- read_sheet(&quot;https://docs.google.com/spreadsheets/d/1AxHm5qndAQXT77HUjbB7h4rbUVe48Doe1iNIxwk05L4/edit?usp=sharing&quot;) google_sheet 15.4.7 SAS/SPSS/STATA El paquete {haven} dentro de la órbita tidyverse nos permitirá importar archivos de los 3 software de pago de gestión y análisis de datos más importantes y usados: nos permite .bg-purple_light[importar desde SAS, SPSS y Stata] library(haven) # SAS iris_sas &lt;- read_sas(data_file = &quot;./datos/iris.sas7bdat&quot;) write_sas(iris_sas, path = &quot;./datos/iris_exportado.sas7bdat&quot;) iris_sas # A tibble: 150 × 5 Sepal_Length Sepal_Width Petal_Length Petal_Width Species &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; 1 5.1 3.5 1.4 0.2 setosa 2 4.9 3 1.4 0.2 setosa 3 4.7 3.2 1.3 0.2 setosa 4 4.6 3.1 1.5 0.2 setosa 5 5 3.6 1.4 0.2 setosa 6 5.4 3.9 1.7 0.4 setosa 7 4.6 3.4 1.4 0.3 setosa 8 5 3.4 1.5 0.2 setosa 9 4.4 2.9 1.4 0.2 setosa 10 4.9 3.1 1.5 0.1 setosa # ℹ 140 more rows # SPSS iris_spss &lt;- read_sav(file = &quot;./datos/iris.sav&quot;) write_sav(iris_spss, path = &quot;./datos/iris_exportado.sav&quot;) iris_spss # A tibble: 150 × 5 Sepal.Length Sepal.Width Petal.Length Petal.Width Species &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl+lbl&gt; 1 5.1 3.5 1.4 0.2 1 [setosa] 2 4.9 3 1.4 0.2 1 [setosa] 3 4.7 3.2 1.3 0.2 1 [setosa] 4 4.6 3.1 1.5 0.2 1 [setosa] 5 5 3.6 1.4 0.2 1 [setosa] 6 5.4 3.9 1.7 0.4 1 [setosa] 7 4.6 3.4 1.4 0.3 1 [setosa] 8 5 3.4 1.5 0.2 1 [setosa] 9 4.4 2.9 1.4 0.2 1 [setosa] 10 4.9 3.1 1.5 0.1 1 [setosa] # ℹ 140 more rows # Stata iris_stata &lt;- read_dta(file = &quot;./datos/iris.dta&quot;) write_dta(iris_stata, path = &quot;./datos/iris_exportado.dta&quot;) iris_stata # A tibble: 150 × 5 sepallength sepalwidth petallength petalwidth species &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; 1 5.10 3.5 1.40 0.200 setosa 2 4.90 3 1.40 0.200 setosa 3 4.70 3.20 1.30 0.200 setosa 4 4.60 3.10 1.5 0.200 setosa 5 5 3.60 1.40 0.200 setosa 6 5.40 3.90 1.70 0.400 setosa 7 4.60 3.40 1.40 0.300 setosa 8 5 3.40 1.5 0.200 setosa 9 4.40 2.90 1.40 0.200 setosa 10 4.90 3.10 1.5 0.100 setosa # ℹ 140 more rows 15.4.8 desde API Por último, una opción muy interesante es la .bg-purple_light[carga desde una API]: un intermediario entre una app o proveedor datos y nuestro R. Por ejemplo, vamos a cargar la librería {owidR}, que nos permite la descarga de datos de uno de los mayores referentes durante la pandemia, la web https://ourworldindata.org/ # install.packages(&quot;owidR&quot;) library(owidR) owid_covid() iso_code continent location date total_cases new_cases new_cases_smoothed total_deaths new_deaths new_deaths_smoothed &lt;char&gt; &lt;char&gt; &lt;char&gt; &lt;IDat&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; 1: AFG Asia Afghanistan 2020-01-05 NA 0 NA NA 0 NA 2: AFG Asia Afghanistan 2020-01-06 NA 0 NA NA 0 NA 3: AFG Asia Afghanistan 2020-01-07 NA 0 NA NA 0 NA 4: AFG Asia Afghanistan 2020-01-08 NA 0 NA NA 0 NA 5: AFG Asia Afghanistan 2020-01-09 NA 0 NA NA 0 NA --- 392363: ZWE Africa Zimbabwe 2024-04-03 266359 0 0 5740 0 0 392364: ZWE Africa Zimbabwe 2024-04-04 266359 0 0 5740 0 0 392365: ZWE Africa Zimbabwe 2024-04-05 266359 0 0 5740 0 0 392366: ZWE Africa Zimbabwe 2024-04-06 266359 0 0 5740 0 0 392367: ZWE Africa Zimbabwe 2024-04-07 266359 0 0 5740 0 0 total_cases_per_million new_cases_per_million new_cases_smoothed_per_million total_deaths_per_million new_deaths_per_million &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; 1: NA 0 NA NA 0 2: NA 0 NA NA 0 3: NA 0 NA NA 0 4: NA 0 NA NA 0 5: NA 0 NA NA 0 --- 392363: 16320.48 0 0 351.704 0 392364: 16320.48 0 0 351.704 0 392365: 16320.48 0 0 351.704 0 392366: 16320.48 0 0 351.704 0 392367: 16320.48 0 0 351.704 0 new_deaths_smoothed_per_million reproduction_rate icu_patients icu_patients_per_million hosp_patients &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; 1: NA NA NA NA NA 2: NA NA NA NA NA 3: NA NA NA NA NA 4: NA NA NA NA NA 5: NA NA NA NA NA --- 392363: 0 NA NA NA NA 392364: 0 NA NA NA NA 392365: 0 NA NA NA NA 392366: 0 NA NA NA NA 392367: 0 NA NA NA NA hosp_patients_per_million weekly_icu_admissions weekly_icu_admissions_per_million weekly_hosp_admissions &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; 1: NA NA NA NA 2: NA NA NA NA 3: NA NA NA NA 4: NA NA NA NA 5: NA NA NA NA --- 392363: NA NA NA NA 392364: NA NA NA NA 392365: NA NA NA NA 392366: NA NA NA NA 392367: NA NA NA NA weekly_hosp_admissions_per_million total_tests new_tests total_tests_per_thousand new_tests_per_thousand new_tests_smoothed &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; 1: NA NA NA NA NA NA 2: NA NA NA NA NA NA 3: NA NA NA NA NA NA 4: NA NA NA NA NA NA 5: NA NA NA NA NA NA --- 392363: NA NA NA NA NA NA 392364: NA NA NA NA NA NA 392365: NA NA NA NA NA NA 392366: NA NA NA NA NA NA 392367: NA NA NA NA NA NA new_tests_smoothed_per_thousand positive_rate tests_per_case tests_units total_vaccinations people_vaccinated &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;char&gt; &lt;num&gt; &lt;num&gt; 1: NA NA NA NA NA 2: NA NA NA NA NA 3: NA NA NA NA NA 4: NA NA NA NA NA 5: NA NA NA NA NA --- 392363: NA NA NA NA NA 392364: NA NA NA NA NA 392365: NA NA NA NA NA 392366: NA NA NA NA NA 392367: NA NA NA NA NA people_fully_vaccinated total_boosters new_vaccinations new_vaccinations_smoothed total_vaccinations_per_hundred &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; 1: NA NA NA NA NA 2: NA NA NA NA NA 3: NA NA NA NA NA 4: NA NA NA NA NA 5: NA NA NA NA NA --- 392363: NA NA NA NA NA 392364: NA NA NA NA NA 392365: NA NA NA NA NA 392366: NA NA NA NA NA 392367: NA NA NA NA NA people_vaccinated_per_hundred people_fully_vaccinated_per_hundred total_boosters_per_hundred &lt;num&gt; &lt;num&gt; &lt;num&gt; 1: NA NA NA 2: NA NA NA 3: NA NA NA 4: NA NA NA 5: NA NA NA --- 392363: NA NA NA 392364: NA NA NA 392365: NA NA NA 392366: NA NA NA 392367: NA NA NA new_vaccinations_smoothed_per_million new_people_vaccinated_smoothed new_people_vaccinated_smoothed_per_hundred &lt;num&gt; &lt;num&gt; &lt;num&gt; 1: NA NA NA 2: NA NA NA 3: NA NA NA 4: NA NA NA 5: NA NA NA --- 392363: NA NA NA 392364: NA NA NA 392365: NA NA NA 392366: NA NA NA 392367: NA NA NA stringency_index population_density median_age aged_65_older aged_70_older gdp_per_capita extreme_poverty &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; 1: 0 54.422 18.6 2.581 1.337 1803.987 NA 2: 0 54.422 18.6 2.581 1.337 1803.987 NA 3: 0 54.422 18.6 2.581 1.337 1803.987 NA 4: 0 54.422 18.6 2.581 1.337 1803.987 NA 5: 0 54.422 18.6 2.581 1.337 1803.987 NA --- 392363: NA 42.729 19.6 2.822 1.882 1899.775 21.4 392364: NA 42.729 19.6 2.822 1.882 1899.775 21.4 392365: NA 42.729 19.6 2.822 1.882 1899.775 21.4 392366: NA 42.729 19.6 2.822 1.882 1899.775 21.4 392367: NA 42.729 19.6 2.822 1.882 1899.775 21.4 cardiovasc_death_rate diabetes_prevalence female_smokers male_smokers handwashing_facilities hospital_beds_per_thousand &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; 1: 597.029 9.59 NA NA 37.746 0.5 2: 597.029 9.59 NA NA 37.746 0.5 3: 597.029 9.59 NA NA 37.746 0.5 4: 597.029 9.59 NA NA 37.746 0.5 5: 597.029 9.59 NA NA 37.746 0.5 --- 392363: 307.846 1.82 1.6 30.7 36.791 1.7 392364: 307.846 1.82 1.6 30.7 36.791 1.7 392365: 307.846 1.82 1.6 30.7 36.791 1.7 392366: 307.846 1.82 1.6 30.7 36.791 1.7 392367: 307.846 1.82 1.6 30.7 36.791 1.7 life_expectancy human_development_index population excess_mortality_cumulative_absolute excess_mortality_cumulative &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; 1: 64.83 0.511 41128772 NA NA 2: 64.83 0.511 41128772 NA NA 3: 64.83 0.511 41128772 NA NA 4: 64.83 0.511 41128772 NA NA 5: 64.83 0.511 41128772 NA NA --- 392363: 61.49 0.571 16320539 NA NA 392364: 61.49 0.571 16320539 NA NA 392365: 61.49 0.571 16320539 NA NA 392366: 61.49 0.571 16320539 NA NA 392367: 61.49 0.571 16320539 NA NA excess_mortality excess_mortality_cumulative_per_million &lt;num&gt; &lt;num&gt; 1: NA NA 2: NA NA 3: NA NA 4: NA NA 5: NA NA --- 392363: NA NA 392364: NA NA 392365: NA NA 392366: NA NA 392367: NA NA La función owid_covid() nos ha cargado sin darnos cuenta .bg-purple_light[más de 200 000 registros] con más de 50 variables de 238 países diferentes, desde casos, hospitalizados, pacientes en UCI, fallecidos, etc. Este paquete tiene la función owid_search() para .bg-purple_light[buscar datasets por palabras clave], por ejemplo, por emissions, dándonos un dataset con el título de la base de datos y su id para luego usarla. as_tibble(owid_search(&quot;emissions&quot;)) Vamos a pedirle por ejemplo las emisiones per cápita de gases de efecto invernadero emissions &lt;- owid(&quot;per-capita-ghg-emissions&quot;) emissions En muchas ocasiones para .bg-purple_light[conectar con la API tendremos antes que registrarnos y obtener una clave], es el caso del paquete {climaemet} para acceder a datos meteorológicos (ver documentación en &lt;https://ropenspain.github.io/climaemet/). Dicha clave se puede obtener de manera inmediata en https://opendata.aemet.es/centrodedescargas/altaUsuario Una vez que tenemos la clave la registramos en nuestro RStudio para poder usarla a futuro # install.packages(&quot;climaemet&quot;) library(climaemet) # Definir la clave apikey &lt;- &quot;eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJqYXZhbHYwOUB1Y20uZXMiLCJqdGkiOiI4YTU1ODUxMS01MTE3LTQ4MTYtYmM4OS1hYmVkNDhiODBkYzkiLCJpc3MiOiJBRU1FVCIsImlhdCI6MTY2NjQ2OTcxNSwidXNlcklkIjoiOGE1NTg1MTEtNTExNy00ODE2LWJjODktYWJlZDQ4YjgwZGM5Iiwicm9sZSI6IiJ9.HEMR77lZy2ASjmOxJa8ppx2J8Za1IViurMX3p1reVBU&quot; aemet_api_key(apikey, install = TRUE) Con dicho paquete podemos hacer una .bg-purple_light[búsqueda de las estaciones meteorológicas] para conocer tanto su codigo postal como su código identificador dentro de la red AEMET (por ejemplo, para acceder a la estación de el aeropuerto de El Prat, Barcelona, es el código 0076) library(climaemet) stations &lt;- aemet_stations() stations Una vez que tenemos el identificador podemos obtener los .bg-purple_light[datos horarios de las últimas 24 horas], incluyendo no solo temperatura sino estadísticas del viento, la presión, etc aemet_last_obs(&quot;0076&quot;) También podemos extraer los .bg-purple_light[datos diarios en un intervalo de fechas] que le proporciones con aemet_daily_clim() aemet_daily_clim(&quot;0076&quot;, start = &quot;2022-01-01&quot;, end = &quot;2022-09-30&quot;) También se pueden importar datos desde las API de spotify (ver https://www.rcharlie.com/spotifyr/) como de Twitter (ver https://github.com/ropensci/rtweet) # install.packages(&quot;rtweet&quot;) library(rtweet) # install.packages(&quot;spotifyr&quot;) library(spotifyr) # install.packages(&quot;rtweet&quot;) library(rtweet) auth_setup_default() rt &lt;- search_tweets(&quot;#pedrosanchez&quot;, n = 100, include_rts = FALSE) rt 15.5 Exportación de datos Aunque se puede exportar en cualquier formato que puedas importar, vamos a ver las dos formas más útiles y eficientes de exportar datos en R: fichero .RData. fichero .csv (un Excel sin formato para ser leído en cualquier sistema) La exportación en fichero .RData es la opción más recomendable si tú o tu equipo solo trabajáis con R, es la opción nativa de fichero, para que su importación sea tan sencilla como una función load(). Para exportar en R.Data basta con uses la función save(), indícandole lo que quieres guardar y la ruta donde quieres guardarlo. Es importante entender que la principal ventaja de exportar un fichero .RData es que no se está portando una tabla, o un fichero tabulado con un formato de filas y columnas: estás exportando cualquier cosa, cualquier variable de R, con la naturaleza de esa variable intacta, sin necesidad de pasarlo otro formato. nombres &lt;- c(&quot;javier&quot;, &quot;carla&quot;) # Exportamos en .RData la variable nombres save(nombres, file = &quot;./EXPORTAR/nombres.RData&quot;) Para tenerlo organizado, la orden anterior está hecha habiendo creado en nuestra carpeta del proyecto una carpeta EXPORTAR para guardar lo que vayamos exportando. Ese fichero solo podrá ser abierto por R, pero cuando lo cargemos, tendremos la variable nombres tal cual la hemos guardado.   No siempre trabajamos en R y a veces necesitamos una exportación de un data.frame o una tabla que podamos abrir en nuestra ordenador, ya sea para explicársela a alguien o para enviársela a otra persona. Para ello exportaremos en .csv, un fichero sin formato, y que es capaz de ser abierto por todo tipo de hojas de cálculo: basta que usemos la función write_csv() del paquete {readr} # install.packages(&quot;readr&quot;) # solo la primera vez library(readr) # Exportamos en .csv el data.frame boston write_csv(boston, file = &quot;./EXPORTAR/boston.csv&quot;) WARNING: líneas de código en los errores Dado que los errores del código nos vendrán referenciados en la consola por el número de línea donde fueron detectados, puede sernos muy útil mostrar dichos números en la barra lateral izquierda, yendo a Tools &lt;&lt; Global Options &lt;&lt; Code &lt;&lt; Display &lt;&lt; Show line numbers Figure 15.2: Líneas de código. 15.6 Consejos CONSEJOS   Margen derecho en la ventana de scripts Aunque no afecte a nuestro código escribir todo en una línea sin saltos de línea, no somos bárbaros/as. ¿Por qué cuadno escribes en un Word lo haces en formato vertical pero cuando programas pones todas las órdenes seguidas? Recuerda que la legibilidad de tu código no solo te ahorrará tiempo sino que te hará programar mejor. ¿Cómo podemos fijar un margen imaginario para nosotros ser quienes demos al ENTER? Yendo a Tools &lt;&lt; Global Options &lt;&lt; Code &lt;&lt; Display &lt;&lt; Show margin (es un margen imaginario para ser nosotros quienes lo hagamos efectivo, a R le da igual) Figure 15.3: Margen derecho. 15.6.1 Exportando datos: .RData/.rda De la misma manera que podemos importar, podemos .bg-purple_light[exportar] en .RData. Esta opción es la más recomendada si las variables guardadas van a ser únicamente usadas en R: recuerda que esta extensión es nativa de R por lo que .bg-purple_light[solo se podrá usar en R]. Para ello nos basta con usar save(objeto, file = ruta con extensión) tabla &lt;- tibble(&quot;a&quot; = 1:4, &quot;b&quot; = 1:4) save(tabla, file = &quot;./datos/tabla_prueba.RData&quot;) load(&quot;./datos/tabla_prueba.RData&quot;) tabla # A tibble: 4 × 2 a b &lt;int&gt; &lt;int&gt; 1 1 1 2 2 2 3 3 3 4 4 4 "],["gráficos.html", "Chapter 16 Gráficos 16.1 Gráficos para una variable cuantitativa 16.2 Gráficos para dos variables cuantitativas 16.3 Gráficos para variables categóricas 16.4 La librería lattice", " Chapter 16 Gráficos R, en su versión básica, incluye funciones para crear gráficos. Dado que este es un curso introductorio a R nos basaremos en estas herramientas que son muy útiles para llevar a cabo un análisis exploratorio. Es decir, estas funciones nos permitirán visualizar la información recogida en nuestros datos que permita - dentro del contexto de un proceso de investigación - tomar decisiones para posteriores análisis estadísticos. También introduciremos algunas librerías de R que permiten crear gráficos más avanzados para análisis específicos (como comparación de medias con ANOVA) y que permiten crear gráficos más completos y útiles a la hora de publicar resultados. Idealmente, un curso de visualización debería includir el uso de ggplot2, que es una librería especializada en en el diseño de gráficos que permite una mejor visualización de resultados, sobre todo enfocados en el momento de divulgación de resultados de investigación. Esto podrá verse en cursos más avanzados. 16.1 Gráficos para una variable cuantitativa En esta sección empezaremos describiendo cómo crear gráficos para una solo variable cuantitativa 16.1.1 Función stem () Esta función permite crear el gráfico llamado de tallo y hoja. Este gráfico fue propuesto por Tukey (1977) y a pesar de no ser un gráfico para presentación muy usado comunmente, se puede utilizar a la vez que el investigador recoge la información para ver rápidamente la distribución de los datos. ¿Qué muestra este gráfico? El centro de la distribución. La forma general de la distribución: Simétrica: Si las porciones a cada lado del centro son imágenes espejos de las otras. Sesgada a la izquierda: Si la cola izquierda (los valores menores) es mucho más larga que los de la derecha (los valores mayores). Sesgada a la derecha: Opuesto a la sesgada a la izquierda. Desviaciones marcadas de la forma global de la distribución. Outliers: Observaciones individuales que caen muy por fuera del patrón general de los datos. Gaps: Huecos en la distribución Ventajas del gráfico: Muy fácil de realizar y puede hacerse a mano. Fácil de entender. Resumen perfectamente nuestra variable y permite tomar decisiones sobre qué test usar (paramétrico o no paramétrico). Desventajas del gráfico: El gráfico es rudimentario y raras veces se usa en presentaciones y/o artículos científicos . Funciona cuando el número de observaciones no es muy grande. No permite comparar claramente diferentes poblaciones Ejemplo Veamos cómo hacer una gráfico de hoja y tallo para la variable edad del primer embarazo del estudio multicéntrico sobre cáncer de cervix. Este sería el código de R que deberíamos usar: multicentric &lt;- read.delim(&quot;datos/multicentric.txt&quot;) stem(multicentric$edademba) The decimal point is at the | 10 | 00 12 | 00000000000000000000 14 | 00000000000000000000000000000000000000000000000000000000000000000000+95 16 | 00000000000000000000000000000000000000000000000000000000000000000000+317 18 | 00000000000000000000000000000000000000000000000000000000000000000000+479 20 | 00000000000000000000000000000000000000000000000000000000000000000000+420 22 | 00000000000000000000000000000000000000000000000000000000000000000000+289 24 | 00000000000000000000000000000000000000000000000000000000000000000000+200 26 | 00000000000000000000000000000000000000000000000000000000000000000000+105 28 | 00000000000000000000000000000000000000000000000000000000000000000000+49 30 | 00000000000000000000000000000000000000000000000000000000000000000000 32 | 000000000000000000000000000000000000 34 | 000000000000000000000000000000000000 36 | 00000000000000 38 | 00000000 40 | 00000 42 | 0 44 | 46 | 48 | 50 | 52 | 0 En este gráfico cada individuo se representa con 0 (que es el primer decimal). Cuando hay muchos individuos para un valor se pone +XXX para indicar cuántos hay. Por ejemplo a la edad de 14 años habría que añadir 95 0’s a los que ya hay. Podemos observar que la variable presenta mayor frequencia entre los 18 y 20 años y que hay un valor anómalo que tuvo su primer hijo a la edad de 52 años. Este es un ejemplo donde otro tipo de gráficos mejorarían la visualización, pero para estudios con pocos individuos, es una buena opción. 16.1.2 Función boxplot () La función boxplot sirve para crear un diagrama de cajas y bigote para una variable cuantitativa. Este gráfico nos mostrará donde se sitúan los siguientes estadísticos descriptivos: Box-plot La estructura de la función boxplot con los argumentos más comunes de uso se muestran a continuación. function (x, ...) NULL Los argumentos pueden verse con ?boxplot. Los más utilizados en la práctica son: x: vector numérico con los datos para crear el boxplot. formula: fórmula con la estructura x ~ g para indicar que las observaciones en el vector x van a ser agrupadas de acuerdo a los niveles del factor g. data: base de datos (data frame) con las variables. range: valor numérico que indica la extensión de los bigotes. Si es positivo, los bigotes se extenderán hasta el punto más extremo de tal manera que el bigote no supere veces el rango intercuatílico (IQ). Un valor de cero hace que los bigotes se extiendan hasta los datos extremos. col: vector con los colores a usar en el cuerpo de las cajas. log: para indicar si las coordenadas x o y o serán graficadas en escala logarítmica. Ejemplo 1 Veamos cómo crear un boxplot para la misma variable que en ejemplo anterior para ver las diferencias. En R, si queremos ver dos gráficas en una misma figura, podemos usar la función par() con el argumento mfrow. Por ejemplo par(mfrow=c(3,3)) permitirá organizar nuestros gráficos en un panel con 3 filas y 3 columnas. Es decir, podremos ir ejecutando gráficos y no se crearán nuevas figuras si no que se iran añadiendo en una única figura de la siguiente forma: Matriz 3 x 3 con las regiones donde se situará cada figura creado con par(mfrow=c(3,3)) Entonces, supongamos que queremos crear dos diagramas de cajas uno en horizontal y otro en vertical para nuestra variable de interés. El código sería: par(mfrow=c(1,2)) boxplot(x=multicentric$edademba, ylab=&#39;Edad primer embarazo&#39;) boxplot(x=multicentric$edademba, xlab=&#39;Edad primer embarazo&#39;, horizontal=TRUE) podemos cambiar el color usando el argumento col e indicando el nombre de un color de la amplia paleta de colores que hay en R y que puede verse con la función colors(). Aquí mostramos los 10 primeros head(colors(), n=10) [1] &quot;white&quot; &quot;aliceblue&quot; &quot;antiquewhite&quot; &quot;antiquewhite1&quot; &quot;antiquewhite2&quot; &quot;antiquewhite3&quot; &quot;antiquewhite4&quot; &quot;aquamarine&quot; [9] &quot;aquamarine1&quot; &quot;aquamarine2&quot; par(mfrow=c(1,2)) boxplot(x=multicentric$edademba, ylab=&#39;Edad primer embarazo&#39;, col=&#39;blue&#39;) boxplot(x=multicentric$edademba, xlab=&#39;Edad primer embarazo&#39;, horizontal=TRUE, col=&#39;red&#39;) Ejemplo 2 Es posible crear boxplots para comparar dos o varios grupos definidos por 1 o 2 variables cualitativas. Veamos cómo crear un boxplot para nuestra variable de interés en función de otras variables. En el primer boxplot diferenciamos por la variable status (caso, control) y en el segundo se diferencia por pais. Este es el código que utilizaríamos. Vemos que podemos hacer uso de la fórmula usando ~ y del argumento data para indicar dónde se encuentran nuestras variables. par(mfrow=c(1, 2)) boxplot(edademba ~ status, data=multicentric, col=c(&#39;lightblue&#39;, &#39;pink&#39;), xlab=&#39;Cáncer cervical&#39;, main=&#39;A&#39;, ylab=&#39;Edad primer embarazo&#39;) boxplot(edademba ~ status*pais, data=multicentric, col=c(&#39;lightblue&#39;, &#39;pink&#39;), xlab=&#39;Cáncer cervical y Pais&#39;, main=&#39;B&#39;, ylab=&#39;Edad primer embarazo&#39;) En el panel B podemos ver que las etiquetas no se pueden leer porque no caben. Veremos cómo solucionar este problema cuando hablemos de cómo hacer gráficos usando funciones de bajo nivel más adelante. 16.1.3 Función hist () La función hist () sirve para crear el histograma de una variable cuantitativa. Como argumento, esta función recibe un vector con los datos y opcionalmente podemos modificar el número de intervalos usados para crear el histograma que por defecto viene determinado por la fórmula de Sturges. Ejemplo Construyamos el histograma para nuestra variable edad del primer embarazo. Basta con ejecutar el siguiente código si queremos obtener el histograma en azul (NOTA: main=’’ es para que no ponga nada en la parte superior del gráfico): hist(multicentric$edademba, col=&#39;blue&#39;, main=&#39;&#39;, ylab=&#39;Edad primer embarazo&#39;) 16.1.4 Función density () La función density () hace una estimación suave de la distribución de los datos (el histograma suele ser más abrupto). Para ello usa una estimación no paramétrica usando kernels, que es una metodología avanzada en estadística. Una vez estimada la densidad de nuestra variable de interés, basta con usar la función plot () para crear el gráfico. Los argumentos de la función density () son: function (x, ...) NULL donde: x: es el vector con los datos para los cuales se quiere la densidad. bw: ancho de banda (se usa para suavizar más o menos la gráfica). kernel: núcleo de suavización a usar, los posibles valores son gaussian, rectangular, triangular, epanechnikov, biweight, cosine o optcosine, el valor por defecto es gaussian. Esto es muy avanzado y no suele cambiarse. na.rm: valor lógico, si es TRUE se eliminan los valores con NA para construir la densidad, el valor por defecto es FALSE. Ejemplo Veamos, de nuevo, cómo describir nuesrta variable de interés mediante su densidad. Como hay missings en nuestros datos, debemos decirle que los elimine (NOTA: si no añadimos na.rm=TRUE obtendremos un error) plot(density(multicentric$edademba, na.rm=TRUE)) El siguiente código mostraría cómo afecta el ancho de banda en la estimación: par(mfrow=c(2,2)) plot(density(multicentric$edademba, na.rm=TRUE), main=&#39;&#39;) plot(density(multicentric$edademba, bw=0.2, na.rm=TRUE), main=&#39;&#39;) plot(density(multicentric$edademba, bw=5, na.rm=TRUE), main=&#39;&#39;) plot(density(multicentric$edademba, bw=10, na.rm=TRUE), main=&#39;&#39;) Podemos observar como dar un parámetro de suavizado muy pequeño (0.2) crea una estimación muy ruidosa, mientras que usar un valor muy grande (10) puede llevar a conclusiones erróneas ya que con este valor parece que los datos sean normales cuando cláramente estan sesgados hacia la izquierda (edades jóvenes). Cabe reseñar que estos valores de suavizado dependen de la escala que tengamos en nuestra variable de interés. También podemos obtener la misma distribución separada para casos y controles. Para ello necesitamos crear una base de datos distinta para cada grupo (esto es una desventaja de usar funciones básicas de R, pero tampoco es tan grave). Podemos usar las funciones que ya conocemos para tratar datos. Crearemos la densidad para uno de los grupos y luego añadiremos la del otro con la función lines (). Finalmente, podemos añadir una leyenda con la función legend (). datos.casos &lt;- subset(multicentric, status==&#39;Caso&#39;) datos.control &lt;- subset(multicentric, status==&#39;Control&#39;) den.casos &lt;- density(datos.casos$edademba, na.rm=TRUE) den.control &lt;- density(datos.control$edademba, na.rm=TRUE) plot(den.casos, main=&#39;Edad peso corporal por estado&#39;, ylab=&#39;Densidad&#39;, xlab=&#39;Estado (caso/control)&#39;, lwd=4, col=&#39;blue&#39;) lines(den.control, lwd=4, col=&#39;red&#39;) legend(&#39;topright&#39;, legend=c(&#39;Caso&#39;, &#39;Control&#39;), bty=&#39;n&#39;, lwd=3, col=c(&#39;blue&#39;, &#39;red&#39;)) Podemos observar como los controles tienen su primer embarazo a edades más tardías. 16.2 Gráficos para dos variables cuantitativas En esta sección veremos algunas de las funciones para crear gráficos que muestran la relación entre variables cuantitativas 16.2.1 Función plot () Esta función sirve para crear gráficos de dispersión que son muy útiles porque permiten ver la relación entre dos variables cuantitativas. La estructura de la función plot () con los argumentos más usuales se muestra a continuación: plot(x, y, main, sub, xlab, ylab, ...) donde: x: vector numérico con las coordenadas del eje horizontal. y: vector numérico con las coordenadas del eje vertical. type: tipo de gráfico a crear Las opciones son: ‘p’ para obtener puntos, esta es la opción por defecto. ‘l’ para obtener líneas. ‘b’ para obtener los puntos y líneas que unen los puntos. ‘c’ para obtener sólo las líneas y dejando los espacios donde estaban los puntos obtenidos con la opción ‘b’. ‘o’ para obtener los puntos y lineas superpuestas. ‘h’ para obtener líneas verticales desde el origen hasta el valor \\(y_i\\) de cada punto, similar a un histograma. ‘s’ para obtener escalones. ‘S’ similar al anterior. ‘n’ para que no dibuje (útil para hacer gráficos ad hoc). ...: otros parámetros gráficos (ver ?plot). main: título del gráfico sub: subtítulo del gráfico xlab: etiqueta eje X ylab: etiqueta eje Y Ejemplos Para ilustrar cómo funciona, usaremos unos datos de ejemplo que permiten visualizaciones más sencillas que las de nuestro estudio de casos y controles para cáncer cervical. Empezamos cargando unos datos que están en la librería MASS. Recordemos que antes debemos installar dicha librería con la instrucción: install.packages(&quot;MASS&quot;) Tras esto, ya podemos tener acceso a los datos de ventas de coches en USA en 1993 que están recogidos una base de datos (data frame) que se llama Cars93 y a los cuales se tiene acceso tras cargar la librería MASS. library(MASS) head(Cars93) Manufacturer Model Type Min.Price Price Max.Price MPG.city MPG.highway AirBags DriveTrain Cylinders EngineSize 1 Acura Integra Small 12.9 15.9 18.8 25 31 None Front 4 1.8 2 Acura Legend Midsize 29.2 33.9 38.7 18 25 Driver &amp; Passenger Front 6 3.2 3 Audi 90 Compact 25.9 29.1 32.3 20 26 Driver only Front 6 2.8 4 Audi 100 Midsize 30.8 37.7 44.6 19 26 Driver &amp; Passenger Front 6 2.8 5 BMW 535i Midsize 23.7 30.0 36.2 22 30 Driver only Rear 4 3.5 6 Buick Century Midsize 14.2 15.7 17.3 22 31 Driver only Front 4 2.2 Horsepower RPM Rev.per.mile Man.trans.avail Fuel.tank.capacity Passengers Length Wheelbase Width Turn.circle Rear.seat.room 1 140 6300 2890 Yes 13.2 5 177 102 68 37 26.5 2 200 5500 2335 Yes 18.0 5 195 115 71 38 30.0 3 172 5500 2280 Yes 16.9 5 180 102 67 37 28.0 4 172 5500 2535 Yes 21.1 6 193 106 70 37 31.0 5 208 5700 2545 Yes 21.1 4 186 109 69 39 27.0 6 110 5200 2565 No 16.4 6 189 105 69 41 28.0 Luggage.room Weight Origin Make 1 11 2705 non-USA Acura Integra 2 15 3560 non-USA Acura Legend 3 14 3375 non-USA Audi 90 4 17 3405 non-USA Audi 100 5 13 3640 non-USA BMW 535i 6 16 2880 USA Buick Century Vemos que tenemos información sobre distintas variables que incluyen el modelo de coche, el precio, el motor, y otras más. Se puede ver la información ejecutando ?Cars93. Empezaremos haciendo un gráfico para ver cómo varía el peso de los coches en función del tamaño del motor plot(Cars93$Weight, Cars93$EngineSize) Podemos pintar los puntos con distintos colores dependiendo de una variable categórica que en este ejemplo podría ser el tipo de coche, de la siguiente forma: plot(Cars93$Weight, Cars93$EngineSize, col=as.numeric(Cars93$Type), pch=as.numeric(Cars93$Type)) Podemos añadir una etiqueta al eje X e Y de la siguiente forma plot(Cars93$Weight, Cars93$EngineSize, ylab=&quot;Engine Size&quot;, xlab=&quot;Weight&quot;, main=&quot;My plot&quot;) NOTA: en R usamos de forma indistita \" o ' para las etiquetas. Y un título al gráfico (recordemos que si no queremos poner nada bastaría con usar main='') plot(Cars93$Weight, Cars93$EngineSize, ylab=&quot;Engine Size&quot;, xlab=&quot;Weight&quot;, main=&quot;My plot&quot;) Podemos añadir lineas al gráfico mediante las funciones lines () y abline (). La primera usa la misma sintaxis que plot () y la segunda es para representar lineas horizontales, verticales e incluso obtenidas con modelos de regresión: plot(Cars93$Weight, Cars93$EngineSize, ylab=&quot;Engine Size&quot;, xlab=&quot;Weight&quot;, main=&quot;My plot&quot;) lines(x=c(min(Cars93$Weight), max(Cars93$Weight)), y=c(min(Cars93$EngineSize), max(Cars93$EngineSize)), lwd=4, lty=3, col=&quot;green&quot;) abline(h=3, lty=2) abline(v=1999, lty=4) También podemos añadir puntos al gráfico. El argumento col de nuevo se usa para cambiar el color del punto y pch indica el tipo de punto que queremos usar. En esta figura tenemos todas las posibilidades: Tipos de puntos según el argumento pch plot(Cars93$Weight, Cars93$EngineSize, ylab=&quot;Engine Size&quot;, xlab=&quot;Weight&quot;, main=&quot;My plot&quot;) points(x=min(Cars93$Weight), y=min(Cars93$EngineSize), pch=16, col=&quot;red&quot;) También podemos añadir texto con las funciones text () (se añade en el gráfico) y mtext () (se añade en el margen del gráfico - side indica 1: abajo, 2: izquierda, 3: arriba y 4: derecha). La función legend () añade una leyenda dentro del gráfico en la posición que queramos según una de estas opciones: c(&quot;bottomright&quot;, &quot;bottom&quot;, &quot;bottomleft&quot;, &quot;left&quot;, &quot;topleft&quot;, &quot;top&quot;, &quot;topright&quot;, &quot;right&quot;, &quot;center&quot;) plot(Cars93$Weight, Cars93$EngineSize, ylab=&quot;Engine Size&quot;, xlab=&quot;Weight&quot;, main=&quot;My plot&quot;) text(x=2000, y=5, &quot;some text&quot;) mtext(side=3, &quot;sub-title&quot;, line=0.45) legend(&quot;bottomright&quot;, legend=c(&quot;Data Points&quot;), pch=&quot;o&quot;) Podemos añadir la recta de regresión mediante: plot(Cars93$Weight, Cars93$EngineSize, ylab=&quot;Engine Size&quot;, xlab=&quot;Weight&quot;, main=&quot;My plot&quot;) mod &lt;- lm(EngineSize ~ Weight, data=Cars93) abline(mod) Si queremos aumentar el grosor de la línea de regresión podemos usar el argumento lwd. Cambiemos también el color de la línea con col plot(Cars93$Weight, Cars93$EngineSize, ylab=&quot;Engine Size&quot;, xlab=&quot;Weight&quot;, main=&quot;My plot&quot;) mod &lt;- lm(EngineSize ~ Weight, data=Cars93) abline(mod, lwd=3, col=&quot;blue&quot;) Si queremos visualizar relaciones no lineales, podemos usar una estimación suavizada mediante regresión local o loess de la siguiente forma: plot(Cars93$EngineSize ~ Cars93$Weight) lines(loess.smooth(Cars93$Weight, Cars93$EngineSize)) En esta figura podemos ver como un modelo no lineal quizás ajusaría mejor a nuestros datos a que hata un peso aproximado de 3000 hay una relación lineal con una pendiende distinta a la que se observa a partir de ese valor. 16.2.2 Función pairs () Esta función crea un panel con todas los gráficos de dispersión entre todas las variables del data frame (base de datos) que le pasemos. Ejemplo Supongamos que queremos hacer esto en nuestro caso (ejemplo coches) para las primeras 7 variables: pairs(Cars93[,1:7]) Podemos crear esta figura editando los nombres de las variables (labels) y haciéndolas más grandes (cex.labels), usando cruces (pch) azules (col) un poco más pequeñas (cex) en lugar de puntos, en escala logaritmica (log), con marcas horizontales en el eje vertical (las) y eliminando los diagramas de dispersión bajo la diagonal (lower.panel) porque son figuras redundantes. Para ello podríamos usar este código pairs(Cars93[,1:7], lower.panel=NULL, cex.labels=1.4, log=&#39;xy&#39;, main=&#39;Matriz de dispersión&#39;, las=1, labels=c(&#39;Fabricante&#39;, &#39;Modelo&#39;, &#39;Tipo&#39;, &#39;Precio \\n mínimo&#39;, &#39;Precio&#39; , &#39;Precio \\n máximo&#39;, &#39;Ciudad&#39;), pch=3, cex=0.6, col=&#39;dodgerblue2&#39;) NOTA: \\n sirve para hacer un salto de línea en la etiqueta 16.3 Gráficos para variables categóricas En esta sección veremos funciones para la creación de gráficos para variables cualitativas. 16.3.1 Función barplot () Los gráficos de barras son útiles para representar las frecuencias absolutas o relativas asociadas a los niveles de una variable cualitativa. La función barplot () se usa para obtener un gráfico de barras. La estructura de la función barplot con los argumentos más comunes de uso se muestra a continuación: barplot(height, beside, horiz) donde: height: vector o matriz con la información de las frecuencias absolutas o relativas. beside: valor lógico para indicar si las barras deben estar pegadas (útil cuando la información es una matriz) horiz: valor lógico para indicar si el diagrama de barras debe ser horizontal, por defecto es FALSE. las: para rotar 45º las etiquetas de las categorías y mejorar la visualización en caso de ser muy largas. La función barplot tiene otros parámetros que pueden verse ejecutado ?barplot. Ejemplo Supongamos que queremos representar cuántos individuos se han analizados en cada país en nuestro estudio de casos y controles para cáncer cervical. Para ello, antes de usar la función barplot () necesitaríamos tener esta información a modo de tabla (o vector). Para ello ejecutaríamos: info &lt;- prop.table(table(multicentric$pais)) barplot(info, las=2) Algunas veces se acostumbra a colocar las frecuencias relativas sobre la parte superior de las barras para facilitar la lectura. Esto se puede hacer de la siguiente manera. Primero se dibuja el diagrama de barras y se almacena la información en un objeto (por ejemplo xx) para luego poder usar la ubicación de cada una de las barras. Notemos que hemos añadido ylim=c(0, 0.45) para aumentar el eje Y de forma que la etiqueta sobre Filipinas pueda verse. Luego se usa la función text () para incluir un texto en las coordenadas x=xx y y=info, el parámetro pos=3 coloca el texto en la parte superior de las coordenadas y el parámetro label sirve para indicar lo que se desea escribir en las coordenadas indicadas, en este caso son las frecuencias relativas almacenadas en info. xx &lt;- barplot(info, col=&#39;darkblue&#39;, ylim=c(0, 0.3), xlab=&#39;&#39;, main=&#39;País de estudio &#39;, ylab=&#39;Frecuencia relativa&#39;, las=2) text(x=xx, y=info, pos=3, cex=0.8, col=&quot;red&quot;, label=round(info, 2)) Ejemplo Supongamos que ahora queremos obtener la misma información añadiendo los casos y controles de cada estudio. Podemos hacerlo de la misma forma. Primero calculando la información con table () y luego representándola con barplot (). info2 &lt;- table(multicentric$status, multicentric$pais) barplot(info2, las=2) Para mejorar la visualización podemos usar el argumento besides=TRUE y obtener una figura más interpretable barplot(info2, beside=TRUE, las=2) Este gráfico se puee mejorar más aún colocando una leyenda, añadiendo etiquetas y cambiando los colores (fill). NOTA: Cambiar los límites del eje y (ylim) es necesario para que se vea la leyebda barplot(info2, beside = TRUE, las=2, xlab =&#39;&#39;, ylab =&#39;Frecuencia&#39;, ylim = c(0,400), main = &#39;Individuos por pais y estado&#39;, col = c(&quot;lightblue&quot;, &quot;mistyrose&quot;),) legend(&#39;topleft&#39;, legend = rownames(info2), bty=&#39;n&#39;, fill=c(&quot;lightblue&quot;, &quot;mistyrose&quot;)) 16.3.2 La función pie () AVISO: A pesar que los diagramas de pastel (o ‘quesitos’) tienen muy buena prensa, son bastante malos para mostar información. El ojo humano es bueno para juzgar realaciones lineales, pero muy malo para juzgar áreas relativos. Por ello es preferible usar gráficos de barras o gráficos de puntos (dot charts) para visualizar variables categóricas. La estructura de la función pie con los dos argumentos que más se suelen utilizar es: pie(x, labels) donde: x: vector con elementos no negativos que representan las frecuencias de los niveles de la variable cualitativa. labels: vector con los nombres a visualizar en cada parte del pastel, por defecto se usan los nombres del vector x. Ejemplo Hagamos el mismo ejercicio que para el ejemplo anterior pie(info, main=&quot;Individuos por país&quot;) NOTA: Este es un buen ejemplo donde nos cuesta visualizar si hay más caso en Marruecos o en Colombia, por lo que no es un gráfico muy recomendado tal y como hemos dicho anteriormente. 16.3.3 Función dotchart () Los gráficos de puntos son muy útiles para representar tablas de frecuencias (de 1 o 2 vías) o tablas de resumen en relación a una o dos variables. La estructura de la función dotchart () se muestra a continuación. dotchart(x, labels=NULL, groups=NULL, gdata=NULL, pt.cex, pch, color, lcolor, ...) donde: x: vector o matriz con la información de las frecuencias o medida de resumen a representar. Si x es una matriz las columnas representarán agrupaciones. labels: vector con los nombres a usar para los puntos, por defecto toma los nombres de las filas de la matriz x. groups: vector con los nombres a usar para los grupos, por defecto toma los nombres de las columnas de la matriz x. cex: tamaño de los nombres a mostrar en los ejes. pt.cex: tamaño del punto. pch: tipo de punto a usar (igual que en points) color: tipo de color usar para los puntos. lcolor: color para la línea asociada a cada punto. ...: otros parámetros gráficos que pueden ser pasados como argumentos. Ejemplo Supongamos que queremos reportar el número de individuos estudiados en cada país para el estudio de cáncer cervical. dotchart(x = info, cex=1.2, xlab=&quot;Individuos del estudio por país&quot;) NOTA: Con este gráfico si que podemos ver dónde hay más observaciones cuando comparamos Marruecos y Colombia. 16.4 La librería lattice Esta librería es muy potente ya que permite hacer muchos de los gráficos que hemos visto hasta ahora, de forma sencilla. Nos referimos a que no requiere escribir tanto código de R que para principiantes suele ser una de las principales limitaciones de usar este software. Podemos obtener gráficos muy complejos y listos para ser publicados mediante una llamada a una única función. También es muy útil para crear gráficos condicionales. Es decir, observar cómo cambia y con x en los niveles de z. Estos tipos de gráficos son útiles para analizar datos multidimensionales y, a menudo, permiten comprimir mucha información en una sola gráfica. Antes de empezar a usar esta librería, debemos instalarla install.packages(&quot;lattice&quot;) Luego podemos cargarla como cualquier otra librería library(lattice) Y ya estaríamos preparados para poder crear gráficos complejos de forma sencilla. Para ello usaremos de nuevo el ejemplo de los datos de coches que hemos analizado anteriormente y que están en la base de datos Cars93. Ejemplos Empezaremos por ilustrar cómo crear un panel de figuras que nos describa la relación entre la variable MPG.city y Price separada por cada tipo de coche (Type). Para ello bastaria con usar la función xyplot () como si fuera la función plot () pero añadiendo la variable grupal (Z) tras |. library(lattice) xyplot(MPG.city ~ EngineSize | Type, data=Cars93) Vemos que crear este gráfico usando funciones de R básicas sería muy complicado (a este nivel no sabríais hacerlo) pero que con esta librería se hace de forma sencilla Si quieremos obtener el mismo gráfico separado por tipo de coche y origen, ejecutaríamos la misma instrucción añadiendo una segunda variable de estratificación con *: xyplot(MPG.city ~ EngineSize | Type * Origin, data = Cars93) Si queremos obtener el mismo gráfico con la información de cada tipo superpuesta en cada panel, usamos panel = panel.superpose y el argumento groups para separar por origen xyplot(MPG.city ~ EngineSize|Type, panel=panel.superpose, groups=Origin, data = Cars93) Podemos añadir una leyenda con # Adds a key pars &lt;- trellis.par.get(&quot;superpose.symbol&quot;) xyplot(MPG.city ~ EngineSize | Type, panel = panel.superpose, groups=Origin, key = list(columns = 2, text = list(levels(Cars93$Origin)), points = Rows(pars,1:2)), data=Cars93) Ejemplos Existen otras funciones en la librería lattice que hacen funciones similares para otro tipo de gráfico que se resumen aquí: splom( ~ data.frame) # Scatterplot matrix bwplot(factor ~ numeric, …) # Boxplot qqmath(factor ~ numeric, …) # Q-Q plot dotplot(factor ~ numeric, …) # 1-D display stripplot(factor ~ numeric, …) barchar(character ~ numeric, …) histogram( ~ numeric, …) densityplot( ~ numeric, …) # Smoothed version of histogram Por ejemplo, podríamos hacer un boxplot para la edad del primer embarazo según el pais y caso control para nuestro ejemplo de cáncer cervical simplemente con: bwplot(edademba ~ status | pais, data = multicentric) "],["r-markdown.html", "Chapter 17 R Markdown 17.1 Introducción 17.2 ¿Por qué R Markdown? 17.3 Flujo de trabajo 17.4 ¿Cómo crear un fichero .Rmd? 17.5 Cabeceras YAML 17.6 Sintáxis básica de Markdown 17.7 Insertar código de R 17.8 Opciones de los bloques de código R 17.9 Figuras 17.10 Tablas 17.11 Tabla de contenidos 17.12 Caching", " Chapter 17 R Markdown 17.1 Introducción Este documento es una adaptación del material que puede encontrarse en este repositorio de github. R Markdown es una variante de Markdown que facilita la creación de documentos, presentaciones e informes dinámicos dentro de RStudio. Tiene fragmentos de código R incrustados para usar con knitr para facilitar la creación de informes reproducibles (en formato web o pdf) en el sentido de que se pueden regenerar automáticamente cuando se modifica el código o los datos de los que partimos en los análisis. R Markdown permite combinar Markdown con imágenes, enlaces, tablas, LaTeX y código de distintos programas. RStudio facilita la creación de documentos desde R Markdown. R Markdown procesa (renderizar, del inglés render/rendering) muchos tipos diferentes de archivos, incluidos: HTML PDF Markdown Microsoft Word Presentaciones Vignettes en HTML de paquetes de R Páginas web enteras! Si bien hay muchos tipos diferentes de documentos procesados en R Markdown, nos centraremos principalmente en los archivos de salida HTML, ya que suelen ser muy útiles y flexibles para la investigación científica, crear materiales suplementarios o incluso material docente como este bookdown. Tipos de documentos generados con R Markdown 17.2 ¿Por qué R Markdown? ¡Es una herramienta conveniente para crear informes dinámicos y reproducibles! Aunque fue creado para R, ahora acepta muchos lenguajes de programación. En este curso sólo veremos como trabajar con R Se puede incrustar código de R de varias formas Código en línea: código breve que tiene lugar durante la parte escrita del documento. Por ejemplo, podemos decir: “El número de participantes en mi estudio es XX”, y “XX” se autocompletará con el número exacto que hay en los datos que estoy analizando. Si cambio mi conjunto de datos y vuelvo a ejecutar el documento R Markdown, este número se actualizará de forma automática sin tener que volver a llevar a cabo los análisis. Fragmentos de código: partes del documento que incluyen varias líneas de código de programa o análisis. Puede representar un gráfico o una tabla, calcular estadísticas resumidas, cargar paquetes, etc. Es fácil: Insertar imágenes. Aprender la sintaxis de Markdown. Incluir ecuaciones LaTeX (fórmulas). Incluir tablas interactivas. Usa el control de versiones con Git. Añadir enlaces externos Crear documentos con un bonito formato. No necesita preocuparse por los saltos de página o la ubicación de las figuras. Tenemos los resultados, comentario y código de R en un solo archivo: Presentaciones de diapositivas, archivos PDF, documentos html, archivos de Word 17.3 Flujo de trabajo Brevemente, para hacer un informe: Abrir un archivo .Rmd (En RStudio: File -&gt; New File -&gt; R Markdown …) Crear un encabezado YAML (en un segundo veremos qué es esto) Escribir el contenido con la sintaxis R Markdown. Insertar el código R en fragmentos de código o código en línea. Procesar la salida del documento. Tipos de documentos generados con R Markdown Descripción general de los pasos que sigue R Markdown para llegar al documento procesado/renderizado: Crear un informe .Rmd que incluya fragmentos de código R y texto en formato markdown (como se indica en los pasos anteriores). Pasar el archivo .Rmd a la librería knitr para que ejecute los fragmentos de código R y cree un nuevo archivo .md. Knitr es una librería de R que permite la integración de código R en documentos de R Markdown procesados como HTML, latex, pdf, word, entre otros tipos de documentos. Pasar el archivo .md a pandoc, que creará el documento final (por ejemplo, html, Microsoft Word, pdf, etc.). Pandoc es un conversor de documentos universal y permite la conversión de un tipo de documento (en este caso: .Rmd) a otro (en este caso: HTML) Como se procesa/renderiza un documento Rmd Si bien esto puede parecer complicado, podemos presionar el botón “Knit” en la parte superior de RStudio como aparece en esta imagen: Como se procesa/renderiza un documento Rmd o podemos ejecutar el siguiente código rmarkdown::render(&quot;nombre_fichero.Rmd&quot;, &quot;html_document&quot;) 17.4 ¿Cómo crear un fichero .Rmd? En la barra de menú, hacer clic en File -&gt; New File -&gt; R Markdown… o simplemente hacer click en el signo más verde en la esquina superior izquierda de RStudio. A continuación aparecerá la siguiente ventana emergente. Dentro de esta ventana, elija el tipo de documento que se quiere crear seleccionando los botones de opción. Nota: ¡esto se puede cambiar fácilmente más tarde! Hacer click en OK 17.5 Cabeceras YAML YAML es el acrónimo de “YAML Ain’t Markup Language” y es básicamente una estructura de lista anidada que incluye la información (metadatos) del documento. Está escrito entre dos líneas de tres guiones — y como vimos anteriormente, RStudio lo escribe automáticamente cuando se crea el documento con la barra de menus. Esto sería un ejemplo sencillo: --- title: &quot;Ejemplo sencillo&quot; Author: &quot;Juan R Gonzalez&quot; date: &quot;January 11th, 2021&quot; output: html_document --- El ejemplo anterior creará un documento HTML. Sin embargo, las siguientes opciones también están disponibles: html_document pdf_document word_document beamer_presentation (diapositivas en pdf) ioslides_presentation (diapositivas en HTML ) y más … Nos centraremos en los archivos HTML. Sin embargo, se puede jugar con la creación de documentos de Word y PDF (necesita un procesador de LaTeX). Las diapositivas de presentación adoptan una sintaxis ligeramente diferente (por ejemplo, para especificar cuándo termina una diapositiva y comienza la siguiente) y es un tema que no cubrimos en este curso. 17.6 Sintáxis básica de Markdown Se puede ver esta Guia de Referencia de RMardown que está en castellano. Podemos listar los más frecuentes en esta figura. A la izquierda vemos lo que escribimos en el documento .Rmd y a la derecha vemos lo que aparecerá en el documento HTML. Sintaxis básica de Markdown obtenida de el Cheatsheet de RStudio sobre R Markdown Podemos escribir en el fichero .Rmd como si fuera un documento de texto (o Word) y utilizar los símbolos que hay en la figura anterior para crear secciones (#), subsecciones (##), palabras en negrita (**), … Algunos trucos que pueden ayudar a mejorar el documento son: Acabar la línea línea con dos espacios para comenzar un nuevo párrafo. Las palabras formateadas como código deben estar rodeadas por (`). Para escribir un superíndice, debemos rodearlo con ^ en cada lado. Esto: Superscript se ha creado escribiendo Super ^ script ^. Las ecuaciones pueden ser código en línea usando $ y se pueden escribir en un bloque centrado dentro del documento con $$. Por ejemplo, \\(E = mc^2\\) está en línea, mientras que la siguiente es una ecuación en bloque: \\[E=emc^2\\] Para aquellos que no lo conozcan, la sintaxis que hay dentro de $ es LaTeX que se usa mucho para escribir documentos con ecuaciones. Para biomedicina no es muy relevante en general. Hay muchos manuales, videos y ayudas. Este es uno de ellos. 17.7 Insertar código de R Hay 2 formas de incrustar código dentro de un documento R Markdown. Código en línea: código breve que tiene lugar durante la parte escrita del documento. Fragmentos de código: partes del documento que incluyen varias líneas de código de programa o análisis. Puede representar un gráfico o una tabla, calcular estadísticas resumidas, cargar paquetes, etc. 17.7.1 Código de R en línea El código en línea se crea usando una tilde inversa (`) y la letra r seguida de otra tilde inversa. Esto es realmente útil al redactar la sección de resultados de un artículo. Por ejemplo, es posible que hayan llevado a cabo varios análisis estadísticos para contestar a nuestras preguntas científicas. El siguiente código sería una forma de que R guarde ese valor en una variable. Por ejemplo: ¿El consumo de combustible de las transmisiones automáticas frente a las manuales es significativamente diferente dentro del conjunto de datos de mtcars? res &lt;- t.test(mpg ~ am, data=mtcars) res$p.value [1] 0.001373638 Para extraer el p-valor hemos escrito res$p.value. Si queremos que salga en una línea, bastaría con escribir `r res$p.value` tras “El p-valor es” y podríamos leer: El p-valor es 0.0013736. 17.7.2 Bloques (chunks) de código R Los bloques de código R se pueden usar para incrustar la salida de resultados de R en el documento (sin necesidad de hacer copiar y pegar, garantizando la reproducibilidad) y/o para mostrar el código de R código usado para los cálculos. La anatomía de un bloque de código R es: Para insertar un fragmento de código R, se debe escrubur entre ```{r} y ```. También se puede presionar el botón Insert a new code chunk Insertar bloque de código R o usando las teclas Crtl + Alt + I (en Windows). Una vez hacemos esto, podemos escribir el código de R entre ambos fragmentos de código. Por ejemplo: El bloque de código y el resultado que se vería en el documento HTML sería el siguiente: n &lt;- 10 sqrt(n) [1] 3.162278 Es recomendable dar un nombre al bloque de código de R para que cuando compilemos el .Rmd, si falla algo de R nos diga en qué bloque está el problema. En el ejemplo anterior, podríamos escribir: 17.8 Opciones de los bloques de código R Al presionar el tabulador cuando nos encontramos entre las llaves de ```{r}, aparecerán las opciones para los bloques de código R. Estas son algunas de las que podemos usar: Practicaremos estas opciones en un ejercicio para ver qué resultados tenemos. Supongamos que no queremos que se vea el código de R en nuestro documento. Entonces deberíamos usar echo=FALSE en todos los bloques. Esto puede ser un poco pesado de escribir, por lo que a veces se opta por usar una opción global de una opción mediante knitr::opts_chunk$set(echo = FALSE) Esta instrucción debe de estar en un bloque de código R para que se ejecute. Yo suelo escribir esto al inicio de mi documento .Rmd para que produzca un documento donde no ponga comentarios a las salidas de R y no saque los warnings de R ni los mensajes de las librerías cuando se carga. Aquí es donde se tendría que añadir echo=FALSE si quisieramos que no sacara el código de R de los bloques. 17.9 Figuras Knitr hace que la producción de figuras sea realmente fácil. Si se supone que el código de análisis dentro de un fragmento produce una figura, simplemente se imprimirá en el documento. Estas son las principales opciones de knitr que debemos añadir en las opciones del bloque (chunk) que están relacionadas con las figuras: fig.width and fig.height Defecto: fig.width = 7, fig.height = 7 fig.align: Cómo alinear la figura Las opciones incluye: \"left\", \"right\", and \"center\" fig.path: Directorio donde se quiere guardar la figura creada por el bloque de código de R. Defecto: 'figure/' Por ejemplo, si queremos hacer una figura que esté centrada en el documento bastaría con ejecutar: En el documento HTML veríamos dat &lt;- rnorm(100) boxplot(dat, col=&#39;red&#39;, xlab=&#39;Datos simulados&#39;) 17.10 Tablas Escribir tablas a mano en Markdown puede resultar tedioso. En este curso no haremos esto porque lo que haremos será crear tablas a partir de resultados que podemos obtener de R (automático). Si desea obtener más información sobre las tablas de Markdown, se puede consultar la documentación sobre tablas en el manual de R Markdown original. Hay algunos tipos de tablas que se pueden crear que son muy útiles: kable, pander y xtable. La última es muy útil para aquellos que trabajen con LaTeX. Nos centraremos en las dos primeras. kable: Está dentro de la librería knitr, no tiene muchos argumentos, pero produce tablas muy visuales de forma sencilla. pander: Está dentro de la librería pander, tiene muchas más opciones y se puede personalizar. Es útil para poner en negrita ciertos valores (por ejemplo, valores por debajo de un umbral). Veamos cómo hacer un análisis con nuestros datos multicentric. Si queremos reproducir los siguientes ejemplos, recordemos que hay que instalar la librería knitr (recuerda que hay que usar install.packages ()). install.packages(c(&quot;knitr&quot;, &quot;pander&quot;)) Siguiendo los pasos que hemos visto en este documento para crear un fichero .Rmd, podemos escribir: 17.11 Tabla de contenidos Se puede agregar una tabla de contenido al documento creado usando la opción toc en el encabezado YAML. Las opciones más usadas son: toc: ¿Incluimos la tabla de contenidos?: toc: true: Incluye la tabla de contenidos Defecto: toc: false: No incluye la tabla de contenidos toc_depth:: Cuántos niveles de secciones debe incluir la tabla de contenidos. Defecto: doc_depth: 3 incluirá secciones (cabeceras) con ###. Por ejemplo, nuestro fichero .Rmd podría incluir este código para añadir la tabla de contenidos donde se verían las secciones y subsecciones (NOTA: es necesario escribir toc y toc_depth empezando en la quinta columna). 17.12 Caching Problema: algunos bloques de código R tardan mucho en ejecutarse y es posible que cueste mucho tiempo crear el documento HTML. Solución: ¡Almacenamiento en caché! Si un bloque de código R no se ha modificado desde la última creación del documento, los resultados anteriores se utilizarán directamente en lugar de volver a ejecutar el bloque. Para ello poner cache = TRUE en el código del bloque de R que queremos que no vuelva a calcular cada vez que se cree el documento, o bien en las opciones globales para que aplique a todos los bloques de código R. NOTA: A veces, un bloque de código R almacenado en caché puede depender de objetos de otro bloque almacenado en caché. Esto puede ser un problema grave, ¡así que debemos tener cuidado y controlar las dependencias entre bloques! Es recomendable que para crear el documento definitivo borremos la carpeta donde está almacenado el caché (por defecto \"file_name_cache/\") y volvamos a compilar de nuevo el fichero HTML para asegurar que todo está en orden. "],["git.html", "Chapter 18 Git y Github con Rstudio 18.1 Git y GitHub junto con RStudio 18.2 ¿Qué es Git? ¿Qué es GitHub? 18.3 Instalar Git 18.4 Crear cuenta y repositorio en Github 18.5 Configurar Git (Editar gitconfig file) 18.6 Crear un token de acceso personal (PAT) en GitHub 18.7 Almacenar token de acceso personal para conectar RStudio y GitHub", " Chapter 18 Git y Github con Rstudio 18.1 Git y GitHub junto con RStudio El uso de Git y GitHub junto con RStudio tiene el poder de revolucionar la forma en que trabajas en R. Pero configurar todo puede ser un desafío. Únete a mí mientras recorro todo lo que necesitas hacer para usar Git y GitHub junto con RStudio. Pero primero, algunos antecedentes… 18.2 ¿Qué es Git? ¿Qué es GitHub? Recuerdo cuando estaba empezando a aprender R, Git y GitHub eran cosas de las que había oído hablar, pero que solo entendía vagamente. Tenía la sensación de que se trataba de colaboración y compartir código, pero más allá de eso… Entonces… ¿qué son Git y GitHub? En primer lugar, son dos cosas separadas: Git es un software de código abierto para el control de versiones. Utilizando Git, puedes hacer cosas como ver todas las versiones anteriores de código que has creado en un proyecto. GitHub es el servicio más popular (otros incluyen GitLab y BitBucket) para colaborar en código usando Git. Es posible usar Git sin usar GitHub, aunque la mayoría de la gente combina los dos. Poder tener un registro de todos los cambios que ha realizado en su código tanto localmente como en un sitio web remoto es poderoso. ¿Por qué debería usar Git y GitHub? He visto tres motivaciones principales para que la gente adopte un flujo de trabajo de Git/GitHub: El uso de Git y GitHub sirve como copia de seguridad. Debido a que GitHub tiene una copia de todo el código que tiene localmente, si algo le pasara a su computadora, todavía tendría acceso a su código. El uso de Git y GitHub te permite usar el control de versiones. ¿Alguna vez has tenido documentos llamados report-final.pdf, report-final-v2.pdf y report-final-v3.pdf? Sí, sí, lo has hecho. En lugar de hacer copias de archivos por miedo a perder trabajo, el control de versiones le permite ver lo que hizo en el pasado, todo mientras mantiene versiones individuales de documentos. El uso de Git y GitHub permite trabajar en el mismo proyecto al mismo tiempo que los colaboradores. Muchos de los equipos que entreno que están aprendiendo R deciden cambiar a Git/GitHub después de colaborar usando Dropbox, Google Drive, OneDrive o similares. El problema con el que se encuentran es que solo una persona puede trabajar en un proyecto de RStudio compartido de esta manera. Git y GitHub tienen herramientas integradas que permiten el trabajo asíncrono simultáneo, un beneficio importante para aquellos que trabajan en equipo. 18.3 Instalar Git https://git-scm.com/downloads 18.4 Crear cuenta y repositorio en Github https://github.com/ 18.5 Configurar Git (Editar gitconfig file) En terminal de RStudio: library(usethis) usethis::edit_git_config() # Modificar en el fichero &quot;.gitconfig&quot; los apartados: &quot;name&quot; y &quot;email&quot; # y guardar el fichero #[user] # name = &quot;usuario&quot; # email = &quot;correo&quot; 18.6 Crear un token de acceso personal (PAT) en GitHub Una vez que se haya registrado, deberá habilitar RStudio para hablar con GitHub. El proceso para hacerlo ha cambiado recientemente (aquí es donde veo la mayor diferencia importante con Happy Git con R). La mejor manera de conectar RStudio y GitHub es usando su nombre de usuario y un token de acceso personal (PAT). Para generar un token de acceso personal, use la función create_github_token() de usethis. Esto lo llevará a la página correspondiente en el sitio web de GitHub, donde le dará un nombre a su token y lo copiará (¡no lo pierda porque nunca volverá a aparecer!). En la consola de RStudio: library(usethis) usethis::create_github_token() Pulsar sobre el enlace que aparece en la salida en la consola. Abrirá una página web de Github en la que se tendrá que pulsar el botón “Generate token”. Copiar el token que aparece en Github (luego se utilizará en el siguiente paso). 18.7 Almacenar token de acceso personal para conectar RStudio y GitHub Ahora que ha creado un token de acceso personal, debemos almacenarlo para que RStudio pueda acceder a él y sepa conectarse a su cuenta de GitHub. La función gitcreds_set() del paquete gitcreds te ayudará aquí. Ingresará su nombre de usuario de GitHub y el token de acceso personal como contraseña (NO su contraseña de GitHub, como pensé inicialmente). Una vez que haya hecho todo esto, ¡habrá conectado RStudio a GitHub! En la consola de RStudio: library(gitcreds) gitcreds::gitcreds_set() # Ante la pregunta: &quot;Enter password or token&quot; # introducir el token copiado en el paso anterior "],["practica-final.html", "Chapter 19  Práctica final", " Chapter 19  Práctica final (haz click en las flechas para ver soluciones) Ejercicio 1: carga el fichero titanic.RData que tienes en la carpeta datos https://github.com/Crisben/uleam-stat24/tree/main/datos. Solución: load(&quot;./DATOS/titanic.RData&quot;)   Ejercicio 2: obtén el número de individuos y de variables de nuestro dataset Solución: ncol(titanic) # variables [1] 12 nrow(titanic) # individuos [1] 891   Ejercicio 3: ¿de qué tipo es la variable Name? ¿Y la variable Pclass? ¿Y la variable Age? ¿Y la variable Survived Solución: class(titanic$Name) [1] &quot;character&quot; class(titanic$Pclass) [1] &quot;integer&quot; class(titanic$Age) [1] &quot;numeric&quot; class(titanic$Survived) [1] &quot;integer&quot;   Ejercicio 4: internamente tenemos 0 y 1 pero la variable Survived en realidad debería ser variable lógica (TRUE si sobrevivió). Modifica la variable para ponter TRUE cuando vale 1 y FALSE en caso contrario Solución: # Modo ifelse titanic$Survived &lt;- ifelse(titanic$Survived == 1, TRUE, FALSE) # otra forma: modo bucle + if load(&quot;./DATOS/titanic.RData&quot;) nueva_variable &lt;- rep(FALSE, length(titanic$Survived)) for (i in 1:length(titanic$Survived)) { if (titanic$Survived[i] == 1) { nueva_variable[i] &lt;- TRUE } } titanic$Survived &lt;- nueva_variable   Ejercicio 5: en la variable Name tenemos guardado el nombre de los pasajeros, pero también su título (Mr., Mrs, Miss, etc). Extrae los nombres de las personas con Miss. Solución: library(stringr) # Con str_detect obtenemos un TRUE/FALSE titanic$Name[str_detect(titanic$Name, pattern = &quot;Miss.&quot;)] [1] &quot;Heikkinen, Miss. Laina&quot; [2] &quot;Sandstrom, Miss. Marguerite Rut&quot; [3] &quot;Bonnell, Miss. Elizabeth&quot; [4] &quot;Vestrom, Miss. Hulda Amanda Adolfina&quot; [5] &quot;McGowan, Miss. Anna \\&quot;Annie\\&quot;&quot; [6] &quot;Palsson, Miss. Torborg Danira&quot; [7] &quot;O&#39;Dwyer, Miss. Ellen \\&quot;Nellie\\&quot;&quot; [8] &quot;Glynn, Miss. Mary Agatha&quot; [9] &quot;Vander Planke, Miss. Augusta Maria&quot; [10] &quot;Nicola-Yarred, Miss. Jamila&quot; [11] &quot;Laroche, Miss. Simonne Marie Anne Andree&quot; [12] &quot;Devaney, Miss. Margaret Delia&quot; [13] &quot;O&#39;Driscoll, Miss. Bridget&quot; [14] &quot;Rugg, Miss. Emily&quot; [15] &quot;West, Miss. Constance Mirium&quot; [16] &quot;Icard, Miss. Amelie&quot; [17] &quot;Andersson, Miss. Erna Alexandra&quot; [18] &quot;Goodwin, Miss. Lillian Amy&quot; [19] &quot;Dowdell, Miss. Elizabeth&quot; [20] &quot;McDermott, Miss. Brigdet Delia&quot; [21] &quot;Ilett, Miss. Bertha&quot; [22] &quot;Fortune, Miss. Mabel Helen&quot; [23] &quot;Petranec, Miss. Matilda&quot; [24] &quot;Salkjelsvik, Miss. Anna Kristine&quot; [25] &quot;Moran, Miss. Bertha&quot; [26] &quot;Zabour, Miss. Hileni&quot; [27] &quot;Jussila, Miss. Katriina&quot; [28] &quot;Attalah, Miss. Malake&quot; [29] &quot;Andersson, Miss. Ellis Anna Maria&quot; [30] &quot;Webber, Miss. Susan&quot; [31] &quot;Peter, Miss. Anna&quot; [32] &quot;Newsom, Miss. Helen Monypeny&quot; [33] &quot;Nysten, Miss. Anna Sofia&quot; [34] &quot;Ford, Miss. Robina Maggie \\&quot;Ruby\\&quot;&quot; [35] &quot;Gilnagh, Miss. Katherine \\&quot;Katie\\&quot;&quot; [36] &quot;Johnson, Miss. Eleanor Ileen&quot; [37] &quot;Isham, Miss. Ann Elizabeth&quot; [38] &quot;Sage, Miss. Constance Gladys&quot; [39] &quot;Kink-Heilmann, Miss. Luise Gretchen&quot; [40] &quot;Andersen-Jensen, Miss. Carla Christine Nielsine&quot; [41] &quot;Lurette, Miss. Elise&quot; [42] &quot;Madigan, Miss. Margaret \\&quot;Maggie\\&quot;&quot; [43] &quot;Yrois, Miss. Henriette (\\&quot;Mrs Harbeck\\&quot;)&quot; [44] &quot;Strom, Miss. Telma Matilda&quot; [45] &quot;Carr, Miss. Helen \\&quot;Ellen\\&quot;&quot; [46] &quot;Cameron, Miss. Clear Annie&quot; [47] &quot;Newell, Miss. Madeleine&quot; [48] &quot;Honkanen, Miss. Eliina&quot; [49] &quot;Bazzani, Miss. Albina&quot; [50] &quot;Lefebre, Miss. Mathilde&quot; [51] &quot;Asplund, Miss. Lillian Gertrud&quot; [52] &quot;Harknett, Miss. Alice Phoebe&quot; [53] &quot;Collyer, Miss. Marjorie \\&quot;Lottie\\&quot;&quot; [54] &quot;Zabour, Miss. Thamine&quot; [55] &quot;Murphy, Miss. Katherine \\&quot;Kate\\&quot;&quot; [56] &quot;Lindahl, Miss. Agda Thorilda Viktoria&quot; [57] &quot;Cherry, Miss. Gladys&quot; [58] &quot;Ward, Miss. Anna&quot; [59] &quot;Henry, Miss. Delia&quot; [60] &quot;Bissette, Miss. Amelia&quot; [61] &quot;Healy, Miss. Hanora \\&quot;Nora\\&quot;&quot; [62] &quot;Andrews, Miss. Kornelia Theodosia&quot; [63] &quot;Lindblom, Miss. Augusta Charlotta&quot; [64] &quot;Connolly, Miss. Kate&quot; [65] &quot;Barber, Miss. Ellen \\&quot;Nellie\\&quot;&quot; [66] &quot;Haas, Miss. Aloisia&quot; [67] &quot;Allison, Miss. Helen Loraine&quot; [68] &quot;Kelly, Miss. Anna Katherine \\&quot;Annie Kate\\&quot;&quot; [69] &quot;Keane, Miss. Nora A&quot; [70] &quot;Fleming, Miss. Margaret&quot; [71] &quot;Francatelli, Miss. Laura Mabel&quot; [72] &quot;Hays, Miss. Margaret Bechstein&quot; [73] &quot;Ryerson, Miss. Emily Borie&quot; [74] &quot;Nilsson, Miss. Helmina Josefina&quot; [75] &quot;Wick, Miss. Mary Natalie&quot; [76] &quot;Slayter, Miss. Hilda Mary&quot; [77] &quot;Young, Miss. Marie Grice&quot; [78] &quot;Hippach, Miss. Jean Gertrude&quot; [79] &quot;McCoy, Miss. Agnes&quot; [80] &quot;Burns, Miss. Elizabeth Margaret&quot; [81] &quot;Fortune, Miss. Alice Elizabeth&quot; [82] &quot;Brown, Miss. Amelia \\&quot;Mildred\\&quot;&quot; [83] &quot;Smith, Miss. Marion Elsie&quot; [84] &quot;Bowerman, Miss. Elsie Edith&quot; [85] &quot;Funk, Miss. Annie Clemmer&quot; [86] &quot;McGovern, Miss. Mary&quot; [87] &quot;Mockler, Miss. Helen Mary \\&quot;Ellie\\&quot;&quot; [88] &quot;Jermyn, Miss. Annie&quot; [89] &quot;Palsson, Miss. Stina Viola&quot; [90] &quot;Landergren, Miss. Aurora Adelia&quot; [91] &quot;Bidois, Miss. Rosalie&quot; [92] &quot;Nakid, Miss. Maria (\\&quot;Mary\\&quot;)&quot; [93] &quot;Buss, Miss. Kate&quot; [94] &quot;Lehmann, Miss. Bertha&quot; [95] &quot;Newell, Miss. Marjorie&quot; [96] &quot;Olsson, Miss. Elina&quot; [97] &quot;Jussila, Miss. Mari Aina&quot; [98] &quot;Oreskovic, Miss. Marija&quot; [99] &quot;Lefebre, Miss. Ida&quot; [100] &quot;Minahan, Miss. Daisy E&quot; [101] &quot;Silven, Miss. Lyyli Karoliina&quot; [102] &quot;Van Impe, Miss. Catharina&quot; [103] &quot;Phillips, Miss. Kate Florence (\\&quot;Mrs Kate Louise Phillips Marshall\\&quot;)&quot; [104] &quot;Carter, Miss. Lucile Polk&quot; [105] &quot;Ford, Miss. Doolina Margaret \\&quot;Daisy\\&quot;&quot; [106] &quot;Mellinger, Miss. Madeleine Violet&quot; [107] &quot;Baclini, Miss. Marie Catherine&quot; [108] &quot;Toomey, Miss. Ellen&quot; [109] &quot;Baclini, Miss. Helene Barbara&quot; [110] &quot;Strandberg, Miss. Ida Sofia&quot; [111] &quot;Hirvonen, Miss. Hildur E&quot; [112] &quot;Lefebre, Miss. Jeannie&quot; [113] &quot;Eustis, Miss. Elizabeth Mussey&quot; [114] &quot;Canavan, Miss. Mary&quot; [115] &quot;O&#39;Sullivan, Miss. Bridget Mary&quot; [116] &quot;Laitinen, Miss. Kristina Sofia&quot; [117] &quot;Maioni, Miss. Roberta&quot; [118] &quot;Perreault, Miss. Anne&quot; [119] &quot;Ridsdale, Miss. Lucy&quot; [120] &quot;Quick, Miss. Phyllis May&quot; [121] &quot;Cacic, Miss. Marija&quot; [122] &quot;Hart, Miss. Eva Miriam&quot; [123] &quot;LeRoy, Miss. Bertha&quot; [124] &quot;Frolicher, Miss. Hedwig Margaritha&quot; [125] &quot;Crosby, Miss. Harriet R&quot; [126] &quot;Andersson, Miss. Ingeborg Constanzia&quot; [127] &quot;Andersson, Miss. Sigrid Elisabeth&quot; [128] &quot;Ohman, Miss. Velin&quot; [129] &quot;Meanwell, Miss. (Marion Ogden)&quot; [130] &quot;Kelly, Miss. Mary&quot; [131] &quot;Garside, Miss. Ethel&quot; [132] &quot;Christy, Miss. Julie Rachel&quot; [133] &quot;Taussig, Miss. Ruth&quot; [134] &quot;Bourke, Miss. Mary&quot; [135] &quot;Leitch, Miss. Jessie Wills&quot; [136] &quot;Shutes, Miss. Elizabeth W&quot; [137] &quot;Murphy, Miss. Margaret Jane&quot; [138] &quot;Herman, Miss. Alice&quot; [139] &quot;Becker, Miss. Marion Louise&quot; [140] &quot;Longley, Miss. Gretchen Fiske&quot; [141] &quot;Skoog, Miss. Mabel&quot; [142] &quot;Davis, Miss. Mary&quot; [143] &quot;Skoog, Miss. Margit Elizabeth&quot; [144] &quot;Baclini, Miss. Eugenie&quot; [145] &quot;Stanley, Miss. Amy Zillah Elsie&quot; [146] &quot;Doling, Miss. Elsie&quot; [147] &quot;O&#39;Leary, Miss. Hanora \\&quot;Norah\\&quot;&quot; [148] &quot;Hegarty, Miss. Hanora \\&quot;Nora\\&quot;&quot; [149] &quot;Turja, Miss. Anna Sofia&quot; [150] &quot;Peters, Miss. Katie&quot; [151] &quot;Madill, Miss. Georgette Alexandra&quot; [152] &quot;Karun, Miss. Manca&quot; [153] &quot;Mullens, Miss. Katherine \\&quot;Katie\\&quot;&quot; [154] &quot;Barbara, Miss. Saiide&quot; [155] &quot;Cleaver, Miss. Alice&quot; [156] &quot;Endres, Miss. Caroline Louise&quot; [157] &quot;Troutt, Miss. Edwina Celia \\&quot;Winnie\\&quot;&quot; [158] &quot;Harper, Miss. Annie Jessie \\&quot;Nina\\&quot;&quot; [159] &quot;Mannion, Miss. Margareth&quot; [160] &quot;Ilmakangas, Miss. Pieta Sofia&quot; [161] &quot;Allen, Miss. Elisabeth Walton&quot; [162] &quot;Ryerson, Miss. Susan Parker \\&quot;Suzette\\&quot;&quot; [163] &quot;Sinkkonen, Miss. Anna&quot; [164] &quot;Wells, Miss. Joan&quot; [165] &quot;Mangan, Miss. Mary&quot; [166] &quot;Emanuel, Miss. Virginia Ethel&quot; [167] &quot;Ayoub, Miss. Banoura&quot; [168] &quot;Sjoblom, Miss. Anna Sofia&quot; [169] &quot;Sage, Miss. Stella Anna&quot; [170] &quot;Pettersson, Miss. Ellen Natalia&quot; [171] &quot;Andersson, Miss. Ebba Iris Alfrida&quot; [172] &quot;Heininen, Miss. Wendla Maria&quot; [173] &quot;Compton, Miss. Sara Rebecca&quot; [174] &quot;Serepeca, Miss. Augusta&quot; [175] &quot;Boulos, Miss. Nourelain&quot; [176] &quot;Lines, Miss. Mary Conover&quot; [177] &quot;Sage, Miss. Dorothy Edith \\&quot;Dolly\\&quot;&quot; [178] &quot;Duran y More, Miss. Asuncion&quot; [179] &quot;Najib, Miss. Adele Kiamie \\&quot;Jane\\&quot;&quot; [180] &quot;Dahlberg, Miss. Gerda Ulrika&quot; [181] &quot;Graham, Miss. Margaret Edith&quot; [182] &quot;Johnston, Miss. Catherine Helen \\&quot;Carrie\\&quot;&quot;   Ejercicio 6: calcula la media de edad de los pasajeros del Titanic (recuerda: si hay datos ausentes…). Haz lo mismo pero por sexos (male/female) Solución: mean(titanic$Age, na.rm = TRUE) [1] 29.69912 mean(titanic$Age[titanic$Sex == &quot;male&quot;], na.rm = TRUE) [1] 30.72664 mean(titanic$Age[titanic$Sex == &quot;female&quot;], na.rm = TRUE) [1] 27.91571   Ejercicio 7: ordena la edad de los pasajeros del Titanic de menor a mayor, y de mayor a menor Solución: sort(titanic$Age) # menor a mayor [1] 0.42 0.67 0.75 0.75 0.83 0.83 0.92 1.00 1.00 1.00 1.00 1.00 1.00 1.00 2.00 2.00 2.00 2.00 2.00 2.00 2.00 [22] 2.00 2.00 2.00 3.00 3.00 3.00 3.00 3.00 3.00 4.00 4.00 4.00 4.00 4.00 4.00 4.00 4.00 4.00 4.00 5.00 5.00 [43] 5.00 5.00 6.00 6.00 6.00 7.00 7.00 7.00 8.00 8.00 8.00 8.00 9.00 9.00 9.00 9.00 9.00 9.00 9.00 9.00 10.00 [64] 10.00 11.00 11.00 11.00 11.00 12.00 13.00 13.00 14.00 14.00 14.00 14.00 14.00 14.00 14.50 15.00 15.00 15.00 15.00 15.00 16.00 [85] 16.00 16.00 16.00 16.00 16.00 16.00 16.00 16.00 16.00 16.00 16.00 16.00 16.00 16.00 16.00 16.00 17.00 17.00 17.00 17.00 17.00 [106] 17.00 17.00 17.00 17.00 17.00 17.00 17.00 17.00 18.00 18.00 18.00 18.00 18.00 18.00 18.00 18.00 18.00 18.00 18.00 18.00 18.00 [127] 18.00 18.00 18.00 18.00 18.00 18.00 18.00 18.00 18.00 18.00 18.00 18.00 18.00 19.00 19.00 19.00 19.00 19.00 19.00 19.00 19.00 [148] 19.00 19.00 19.00 19.00 19.00 19.00 19.00 19.00 19.00 19.00 19.00 19.00 19.00 19.00 19.00 19.00 19.00 20.00 20.00 20.00 20.00 [169] 20.00 20.00 20.00 20.00 20.00 20.00 20.00 20.00 20.00 20.00 20.00 20.50 21.00 21.00 21.00 21.00 21.00 21.00 21.00 21.00 21.00 [190] 21.00 21.00 21.00 21.00 21.00 21.00 21.00 21.00 21.00 21.00 21.00 21.00 21.00 21.00 21.00 22.00 22.00 22.00 22.00 22.00 22.00 [211] 22.00 22.00 22.00 22.00 22.00 22.00 22.00 22.00 22.00 22.00 22.00 22.00 22.00 22.00 22.00 22.00 22.00 22.00 22.00 22.00 22.00 [232] 23.00 23.00 23.00 23.00 23.00 23.00 23.00 23.00 23.00 23.00 23.00 23.00 23.00 23.00 23.00 23.50 24.00 24.00 24.00 24.00 24.00 [253] 24.00 24.00 24.00 24.00 24.00 24.00 24.00 24.00 24.00 24.00 24.00 24.00 24.00 24.00 24.00 24.00 24.00 24.00 24.00 24.00 24.00 [274] 24.00 24.00 24.00 24.00 24.50 25.00 25.00 25.00 25.00 25.00 25.00 25.00 25.00 25.00 25.00 25.00 25.00 25.00 25.00 25.00 25.00 [295] 25.00 25.00 25.00 25.00 25.00 25.00 25.00 26.00 26.00 26.00 26.00 26.00 26.00 26.00 26.00 26.00 26.00 26.00 26.00 26.00 26.00 [316] 26.00 26.00 26.00 26.00 27.00 27.00 27.00 27.00 27.00 27.00 27.00 27.00 27.00 27.00 27.00 27.00 27.00 27.00 27.00 27.00 27.00 [337] 27.00 28.00 28.00 28.00 28.00 28.00 28.00 28.00 28.00 28.00 28.00 28.00 28.00 28.00 28.00 28.00 28.00 28.00 28.00 28.00 28.00 [358] 28.00 28.00 28.00 28.00 28.00 28.50 28.50 29.00 29.00 29.00 29.00 29.00 29.00 29.00 29.00 29.00 29.00 29.00 29.00 29.00 29.00 [379] 29.00 29.00 29.00 29.00 29.00 29.00 30.00 30.00 30.00 30.00 30.00 30.00 30.00 30.00 30.00 30.00 30.00 30.00 30.00 30.00 30.00 [400] 30.00 30.00 30.00 30.00 30.00 30.00 30.00 30.00 30.00 30.00 30.50 30.50 31.00 31.00 31.00 31.00 31.00 31.00 31.00 31.00 31.00 [421] 31.00 31.00 31.00 31.00 31.00 31.00 31.00 31.00 32.00 32.00 32.00 32.00 32.00 32.00 32.00 32.00 32.00 32.00 32.00 32.00 32.00 [442] 32.00 32.00 32.00 32.00 32.00 32.50 32.50 33.00 33.00 33.00 33.00 33.00 33.00 33.00 33.00 33.00 33.00 33.00 33.00 33.00 33.00 [463] 33.00 34.00 34.00 34.00 34.00 34.00 34.00 34.00 34.00 34.00 34.00 34.00 34.00 34.00 34.00 34.00 34.50 35.00 35.00 35.00 35.00 [484] 35.00 35.00 35.00 35.00 35.00 35.00 35.00 35.00 35.00 35.00 35.00 35.00 35.00 35.00 36.00 36.00 36.00 36.00 36.00 36.00 36.00 [505] 36.00 36.00 36.00 36.00 36.00 36.00 36.00 36.00 36.00 36.00 36.00 36.00 36.00 36.00 36.00 36.50 37.00 37.00 37.00 37.00 37.00 [526] 37.00 38.00 38.00 38.00 38.00 38.00 38.00 38.00 38.00 38.00 38.00 38.00 39.00 39.00 39.00 39.00 39.00 39.00 39.00 39.00 39.00 [547] 39.00 39.00 39.00 39.00 39.00 40.00 40.00 40.00 40.00 40.00 40.00 40.00 40.00 40.00 40.00 40.00 40.00 40.00 40.50 40.50 41.00 [568] 41.00 41.00 41.00 41.00 41.00 42.00 42.00 42.00 42.00 42.00 42.00 42.00 42.00 42.00 42.00 42.00 42.00 42.00 43.00 43.00 43.00 [589] 43.00 43.00 44.00 44.00 44.00 44.00 44.00 44.00 44.00 44.00 44.00 45.00 45.00 45.00 45.00 45.00 45.00 45.00 45.00 45.00 45.00 [610] 45.00 45.00 45.50 45.50 46.00 46.00 46.00 47.00 47.00 47.00 47.00 47.00 47.00 47.00 47.00 47.00 48.00 48.00 48.00 48.00 48.00 [631] 48.00 48.00 48.00 48.00 49.00 49.00 49.00 49.00 49.00 49.00 50.00 50.00 50.00 50.00 50.00 50.00 50.00 50.00 50.00 50.00 51.00 [652] 51.00 51.00 51.00 51.00 51.00 51.00 52.00 52.00 52.00 52.00 52.00 52.00 53.00 54.00 54.00 54.00 54.00 54.00 54.00 54.00 54.00 [673] 55.00 55.00 55.50 56.00 56.00 56.00 56.00 57.00 57.00 58.00 58.00 58.00 58.00 58.00 59.00 59.00 60.00 60.00 60.00 60.00 61.00 [694] 61.00 61.00 62.00 62.00 62.00 62.00 63.00 63.00 64.00 64.00 65.00 65.00 65.00 66.00 70.00 70.00 70.50 71.00 71.00 74.00 80.00 sort(titanic$Age, decreasing = TRUE) # mayor a menor [1] 80.00 74.00 71.00 71.00 70.50 70.00 70.00 66.00 65.00 65.00 65.00 64.00 64.00 63.00 63.00 62.00 62.00 62.00 62.00 61.00 61.00 [22] 61.00 60.00 60.00 60.00 60.00 59.00 59.00 58.00 58.00 58.00 58.00 58.00 57.00 57.00 56.00 56.00 56.00 56.00 55.50 55.00 55.00 [43] 54.00 54.00 54.00 54.00 54.00 54.00 54.00 54.00 53.00 52.00 52.00 52.00 52.00 52.00 52.00 51.00 51.00 51.00 51.00 51.00 51.00 [64] 51.00 50.00 50.00 50.00 50.00 50.00 50.00 50.00 50.00 50.00 50.00 49.00 49.00 49.00 49.00 49.00 49.00 48.00 48.00 48.00 48.00 [85] 48.00 48.00 48.00 48.00 48.00 47.00 47.00 47.00 47.00 47.00 47.00 47.00 47.00 47.00 46.00 46.00 46.00 45.50 45.50 45.00 45.00 [106] 45.00 45.00 45.00 45.00 45.00 45.00 45.00 45.00 45.00 45.00 44.00 44.00 44.00 44.00 44.00 44.00 44.00 44.00 44.00 43.00 43.00 [127] 43.00 43.00 43.00 42.00 42.00 42.00 42.00 42.00 42.00 42.00 42.00 42.00 42.00 42.00 42.00 42.00 41.00 41.00 41.00 41.00 41.00 [148] 41.00 40.50 40.50 40.00 40.00 40.00 40.00 40.00 40.00 40.00 40.00 40.00 40.00 40.00 40.00 40.00 39.00 39.00 39.00 39.00 39.00 [169] 39.00 39.00 39.00 39.00 39.00 39.00 39.00 39.00 39.00 38.00 38.00 38.00 38.00 38.00 38.00 38.00 38.00 38.00 38.00 38.00 37.00 [190] 37.00 37.00 37.00 37.00 37.00 36.50 36.00 36.00 36.00 36.00 36.00 36.00 36.00 36.00 36.00 36.00 36.00 36.00 36.00 36.00 36.00 [211] 36.00 36.00 36.00 36.00 36.00 36.00 36.00 35.00 35.00 35.00 35.00 35.00 35.00 35.00 35.00 35.00 35.00 35.00 35.00 35.00 35.00 [232] 35.00 35.00 35.00 35.00 34.50 34.00 34.00 34.00 34.00 34.00 34.00 34.00 34.00 34.00 34.00 34.00 34.00 34.00 34.00 34.00 33.00 [253] 33.00 33.00 33.00 33.00 33.00 33.00 33.00 33.00 33.00 33.00 33.00 33.00 33.00 33.00 32.50 32.50 32.00 32.00 32.00 32.00 32.00 [274] 32.00 32.00 32.00 32.00 32.00 32.00 32.00 32.00 32.00 32.00 32.00 32.00 32.00 31.00 31.00 31.00 31.00 31.00 31.00 31.00 31.00 [295] 31.00 31.00 31.00 31.00 31.00 31.00 31.00 31.00 31.00 30.50 30.50 30.00 30.00 30.00 30.00 30.00 30.00 30.00 30.00 30.00 30.00 [316] 30.00 30.00 30.00 30.00 30.00 30.00 30.00 30.00 30.00 30.00 30.00 30.00 30.00 30.00 30.00 29.00 29.00 29.00 29.00 29.00 29.00 [337] 29.00 29.00 29.00 29.00 29.00 29.00 29.00 29.00 29.00 29.00 29.00 29.00 29.00 29.00 28.50 28.50 28.00 28.00 28.00 28.00 28.00 [358] 28.00 28.00 28.00 28.00 28.00 28.00 28.00 28.00 28.00 28.00 28.00 28.00 28.00 28.00 28.00 28.00 28.00 28.00 28.00 28.00 27.00 [379] 27.00 27.00 27.00 27.00 27.00 27.00 27.00 27.00 27.00 27.00 27.00 27.00 27.00 27.00 27.00 27.00 27.00 26.00 26.00 26.00 26.00 [400] 26.00 26.00 26.00 26.00 26.00 26.00 26.00 26.00 26.00 26.00 26.00 26.00 26.00 26.00 25.00 25.00 25.00 25.00 25.00 25.00 25.00 [421] 25.00 25.00 25.00 25.00 25.00 25.00 25.00 25.00 25.00 25.00 25.00 25.00 25.00 25.00 25.00 25.00 24.50 24.00 24.00 24.00 24.00 [442] 24.00 24.00 24.00 24.00 24.00 24.00 24.00 24.00 24.00 24.00 24.00 24.00 24.00 24.00 24.00 24.00 24.00 24.00 24.00 24.00 24.00 [463] 24.00 24.00 24.00 24.00 24.00 23.50 23.00 23.00 23.00 23.00 23.00 23.00 23.00 23.00 23.00 23.00 23.00 23.00 23.00 23.00 23.00 [484] 22.00 22.00 22.00 22.00 22.00 22.00 22.00 22.00 22.00 22.00 22.00 22.00 22.00 22.00 22.00 22.00 22.00 22.00 22.00 22.00 22.00 [505] 22.00 22.00 22.00 22.00 22.00 22.00 21.00 21.00 21.00 21.00 21.00 21.00 21.00 21.00 21.00 21.00 21.00 21.00 21.00 21.00 21.00 [526] 21.00 21.00 21.00 21.00 21.00 21.00 21.00 21.00 21.00 20.50 20.00 20.00 20.00 20.00 20.00 20.00 20.00 20.00 20.00 20.00 20.00 [547] 20.00 20.00 20.00 20.00 19.00 19.00 19.00 19.00 19.00 19.00 19.00 19.00 19.00 19.00 19.00 19.00 19.00 19.00 19.00 19.00 19.00 [568] 19.00 19.00 19.00 19.00 19.00 19.00 19.00 19.00 18.00 18.00 18.00 18.00 18.00 18.00 18.00 18.00 18.00 18.00 18.00 18.00 18.00 [589] 18.00 18.00 18.00 18.00 18.00 18.00 18.00 18.00 18.00 18.00 18.00 18.00 18.00 17.00 17.00 17.00 17.00 17.00 17.00 17.00 17.00 [610] 17.00 17.00 17.00 17.00 17.00 16.00 16.00 16.00 16.00 16.00 16.00 16.00 16.00 16.00 16.00 16.00 16.00 16.00 16.00 16.00 16.00 [631] 16.00 15.00 15.00 15.00 15.00 15.00 14.50 14.00 14.00 14.00 14.00 14.00 14.00 13.00 13.00 12.00 11.00 11.00 11.00 11.00 10.00 [652] 10.00 9.00 9.00 9.00 9.00 9.00 9.00 9.00 9.00 8.00 8.00 8.00 8.00 7.00 7.00 7.00 6.00 6.00 6.00 5.00 5.00 [673] 5.00 5.00 4.00 4.00 4.00 4.00 4.00 4.00 4.00 4.00 4.00 4.00 3.00 3.00 3.00 3.00 3.00 3.00 2.00 2.00 2.00 [694] 2.00 2.00 2.00 2.00 2.00 2.00 2.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 0.92 0.83 0.83 0.75 0.75 0.67 0.42   Ejercicio 8: vamos a clasificar a los pasajeros según su edad en \"mayores de edad\" y \"menores de edad\". Crea un función que, dada una edad, nos diga si es mayor o menor de edad. Aplícala después a nuestra variable Age y guarda el resultado en una variable edad_recodificada que añadamos a los datos originales Solución: # Definimos función menor_edad &lt;- function(edad) { salida &lt;- ifelse(edad &lt; 18, &quot;menores de edad&quot;, &quot;mayores de edad&quot;) return(salida) } # Creamos nueva variable titanic$edad_recodificada &lt;- menor_edad(titanic$Age) # se aplica elemento a elemento titanic$edad_recodificada # habrá NA [1] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; [8] &quot;menores de edad&quot; &quot;mayores de edad&quot; &quot;menores de edad&quot; &quot;menores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; [15] &quot;menores de edad&quot; &quot;mayores de edad&quot; &quot;menores de edad&quot; NA &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; [22] &quot;mayores de edad&quot; &quot;menores de edad&quot; &quot;mayores de edad&quot; &quot;menores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; [29] NA NA &quot;mayores de edad&quot; NA NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; [36] &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;menores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; [43] NA &quot;menores de edad&quot; &quot;mayores de edad&quot; NA NA NA NA [50] &quot;mayores de edad&quot; &quot;menores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA [57] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;menores de edad&quot; &quot;menores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; [64] &quot;menores de edad&quot; NA NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;menores de edad&quot; &quot;mayores de edad&quot; [71] &quot;mayores de edad&quot; &quot;menores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA [78] NA &quot;menores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; [85] &quot;menores de edad&quot; &quot;mayores de edad&quot; &quot;menores de edad&quot; NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; [92] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; [99] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; [106] &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; &quot;menores de edad&quot; [113] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;menores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; [120] &quot;menores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;menores de edad&quot; [127] NA &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; [134] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;menores de edad&quot; &quot;mayores de edad&quot; [141] NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; [148] &quot;menores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; [155] NA &quot;mayores de edad&quot; &quot;menores de edad&quot; &quot;mayores de edad&quot; NA NA &quot;mayores de edad&quot; [162] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;menores de edad&quot; &quot;menores de edad&quot; &quot;menores de edad&quot; NA &quot;mayores de edad&quot; [169] NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;menores de edad&quot; &quot;menores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; [176] &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA NA [183] &quot;menores de edad&quot; &quot;menores de edad&quot; &quot;menores de edad&quot; NA NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; [190] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;menores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; [197] NA &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; [204] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;menores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;menores de edad&quot; &quot;mayores de edad&quot; [211] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; [218] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;menores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA [225] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; [232] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;menores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; &quot;menores de edad&quot; [239] &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; [246] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; [253] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; [260] &quot;mayores de edad&quot; NA &quot;menores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; [267] &quot;menores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; [274] &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA &quot;menores de edad&quot; &quot;mayores de edad&quot; [281] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;menores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; [288] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; [295] &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; &quot;menores de edad&quot; NA &quot;mayores de edad&quot; NA [302] NA &quot;mayores de edad&quot; NA NA &quot;menores de edad&quot; NA &quot;menores de edad&quot; [309] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; [316] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; [323] &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; [330] &quot;menores de edad&quot; NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;menores de edad&quot; NA NA [337] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;menores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; [344] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA &quot;menores de edad&quot; &quot;mayores de edad&quot; [351] &quot;mayores de edad&quot; NA &quot;menores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; [358] &quot;mayores de edad&quot; NA NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; [365] NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; [372] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;menores de edad&quot; NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; [379] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;menores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA [386] &quot;mayores de edad&quot; &quot;menores de edad&quot; &quot;mayores de edad&quot; NA &quot;menores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; [393] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; [400] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; [407] &quot;mayores de edad&quot; &quot;menores de edad&quot; &quot;mayores de edad&quot; NA NA NA &quot;mayores de edad&quot; [414] NA &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;menores de edad&quot; [421] NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; [428] &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; &quot;menores de edad&quot; [435] &quot;mayores de edad&quot; &quot;menores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; [442] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA &quot;menores de edad&quot; &quot;menores de edad&quot; &quot;mayores de edad&quot; [449] &quot;menores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA [456] &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; [463] &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; NA [470] &quot;menores de edad&quot; NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA [477] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;menores de edad&quot; &quot;menores de edad&quot; NA &quot;mayores de edad&quot; [484] &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;menores de edad&quot; [491] NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; [498] NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;menores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; [505] &quot;menores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; [512] NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA [519] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; NA [526] &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;menores de edad&quot; NA [533] &quot;menores de edad&quot; NA &quot;mayores de edad&quot; &quot;menores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA [540] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;menores de edad&quot; &quot;menores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; [547] &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; &quot;menores de edad&quot; &quot;menores de edad&quot; &quot;mayores de edad&quot; NA [554] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; [561] NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; [568] &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA [575] &quot;menores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; [582] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; [589] &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; [596] &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA [603] NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; [610] &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA NA NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; [617] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;menores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; [624] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA [631] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA &quot;menores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; [638] &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;menores de edad&quot; NA [645] &quot;menores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; NA [652] &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; [659] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; [666] &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; [673] &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; [680] &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;menores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; [687] &quot;menores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;menores de edad&quot; &quot;mayores de edad&quot; &quot;menores de edad&quot; NA [694] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; [701] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; [708] &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; [715] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; &quot;menores de edad&quot; [722] &quot;menores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA [729] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;menores de edad&quot; NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; [736] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA NA NA &quot;mayores de edad&quot; [743] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;menores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; [750] &quot;mayores de edad&quot; &quot;menores de edad&quot; &quot;menores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;menores de edad&quot; [757] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; [764] &quot;mayores de edad&quot; &quot;menores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; [771] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA [778] &quot;menores de edad&quot; NA &quot;mayores de edad&quot; &quot;menores de edad&quot; &quot;menores de edad&quot; &quot;mayores de edad&quot; NA [785] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;menores de edad&quot; &quot;menores de edad&quot; &quot;mayores de edad&quot; NA [792] &quot;menores de edad&quot; NA NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; [799] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;menores de edad&quot; &quot;menores de edad&quot; &quot;mayores de edad&quot; [806] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; [813] &quot;mayores de edad&quot; &quot;menores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; [820] &quot;menores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;menores de edad&quot; NA [827] NA &quot;menores de edad&quot; NA &quot;mayores de edad&quot; &quot;menores de edad&quot; &quot;menores de edad&quot; NA [834] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; NA [841] &quot;mayores de edad&quot; &quot;menores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;menores de edad&quot; &quot;mayores de edad&quot; NA [848] &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA &quot;menores de edad&quot; &quot;mayores de edad&quot; &quot;menores de edad&quot; &quot;menores de edad&quot; [855] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; [862] &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; [869] NA &quot;menores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; [876] &quot;menores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; [883] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA [890] &quot;mayores de edad&quot; &quot;mayores de edad&quot;   Ejercicio 9: el accidente del Titanic se produjo el 15 de abril de 1912. Tomando dicha fecha como referencia, usa la edad de los pasajeros para añadir una nueva variable que sea la fecha de nacimiento. Solución: library(lubridate) # Fecha accidente accidente &lt;- as_date(&quot;1912/04/15&quot;) # Creamos nueva variable: fecha del accidente - años # (saldrán todos nacidos el 15 de abril, ya que no sabemos # cuantos meses cumplían en el momento del accidente) titanic$fecha_nacimiento &lt;- accidente - titanic$Age titanic$fecha_nacimiento [1] &quot;1912-03-24&quot; &quot;1912-03-08&quot; &quot;1912-03-20&quot; &quot;1912-03-11&quot; &quot;1912-03-11&quot; NA &quot;1912-02-21&quot; &quot;1912-04-13&quot; &quot;1912-03-19&quot; &quot;1912-04-01&quot; [11] &quot;1912-04-11&quot; &quot;1912-02-17&quot; &quot;1912-03-26&quot; &quot;1912-03-07&quot; &quot;1912-04-01&quot; &quot;1912-02-20&quot; &quot;1912-04-13&quot; NA &quot;1912-03-15&quot; NA [21] &quot;1912-03-11&quot; &quot;1912-03-12&quot; &quot;1912-03-31&quot; &quot;1912-03-18&quot; &quot;1912-04-07&quot; &quot;1912-03-08&quot; NA &quot;1912-03-27&quot; NA NA [31] &quot;1912-03-06&quot; NA NA &quot;1912-02-09&quot; &quot;1912-03-18&quot; &quot;1912-03-04&quot; NA &quot;1912-03-25&quot; &quot;1912-03-28&quot; &quot;1912-04-01&quot; [41] &quot;1912-03-06&quot; &quot;1912-03-19&quot; NA &quot;1912-04-12&quot; &quot;1912-03-27&quot; NA NA NA NA &quot;1912-03-28&quot; [51] &quot;1912-04-08&quot; &quot;1912-03-25&quot; &quot;1912-02-26&quot; &quot;1912-03-17&quot; &quot;1912-02-10&quot; NA &quot;1912-03-25&quot; &quot;1912-03-17&quot; &quot;1912-04-10&quot; &quot;1912-04-04&quot; [61] &quot;1912-03-24&quot; &quot;1912-03-08&quot; &quot;1912-03-01&quot; &quot;1912-04-11&quot; NA NA &quot;1912-03-17&quot; &quot;1912-03-27&quot; &quot;1912-03-29&quot; &quot;1912-03-20&quot; [71] &quot;1912-03-14&quot; &quot;1912-03-30&quot; &quot;1912-03-25&quot; &quot;1912-03-20&quot; &quot;1912-03-14&quot; &quot;1912-03-21&quot; NA NA &quot;1912-04-14&quot; &quot;1912-03-16&quot; [81] &quot;1912-03-24&quot; &quot;1912-03-17&quot; NA &quot;1912-03-18&quot; &quot;1912-03-29&quot; &quot;1912-03-13&quot; &quot;1912-03-30&quot; NA &quot;1912-03-23&quot; &quot;1912-03-22&quot; [91] &quot;1912-03-17&quot; &quot;1912-03-26&quot; &quot;1912-02-29&quot; &quot;1912-03-20&quot; &quot;1912-02-16&quot; NA &quot;1912-02-04&quot; &quot;1912-03-23&quot; &quot;1912-03-12&quot; &quot;1912-03-12&quot; [101] &quot;1912-03-18&quot; NA &quot;1912-03-25&quot; &quot;1912-03-13&quot; &quot;1912-03-09&quot; &quot;1912-03-18&quot; &quot;1912-03-25&quot; NA &quot;1912-03-08&quot; NA [111] &quot;1912-02-28&quot; &quot;1912-03-31&quot; &quot;1912-03-24&quot; &quot;1912-03-26&quot; &quot;1912-03-29&quot; &quot;1912-03-25&quot; &quot;1912-02-04&quot; &quot;1912-03-17&quot; &quot;1912-03-22&quot; &quot;1912-04-13&quot; [121] &quot;1912-03-25&quot; NA &quot;1912-03-13&quot; &quot;1912-03-13&quot; &quot;1912-02-21&quot; &quot;1912-04-03&quot; NA &quot;1912-03-22&quot; NA &quot;1912-03-01&quot; [131] &quot;1912-03-13&quot; &quot;1912-03-26&quot; &quot;1912-02-28&quot; &quot;1912-03-17&quot; &quot;1912-03-21&quot; &quot;1912-03-23&quot; &quot;1912-03-27&quot; &quot;1912-03-09&quot; &quot;1912-03-30&quot; &quot;1912-03-22&quot; [141] NA &quot;1912-03-24&quot; &quot;1912-03-22&quot; &quot;1912-03-27&quot; &quot;1912-03-28&quot; &quot;1912-03-27&quot; &quot;1912-03-19&quot; &quot;1912-04-06&quot; &quot;1912-03-09&quot; &quot;1912-03-04&quot; [151] &quot;1912-02-24&quot; &quot;1912-03-24&quot; &quot;1912-02-19&quot; &quot;1912-03-05&quot; NA &quot;1912-02-24&quot; &quot;1912-03-30&quot; &quot;1912-03-16&quot; NA NA [161] &quot;1912-03-02&quot; &quot;1912-03-06&quot; &quot;1912-03-20&quot; &quot;1912-03-29&quot; &quot;1912-04-14&quot; &quot;1912-04-06&quot; NA &quot;1912-03-01&quot; NA &quot;1912-03-18&quot; [171] &quot;1912-02-14&quot; &quot;1912-04-11&quot; &quot;1912-04-14&quot; &quot;1912-03-25&quot; &quot;1912-02-19&quot; &quot;1912-03-28&quot; NA &quot;1912-02-25&quot; &quot;1912-03-16&quot; &quot;1912-03-10&quot; [181] NA NA &quot;1912-04-06&quot; &quot;1912-04-14&quot; &quot;1912-04-11&quot; NA NA &quot;1912-03-01&quot; &quot;1912-03-06&quot; &quot;1912-03-10&quot; [191] &quot;1912-03-14&quot; &quot;1912-03-27&quot; &quot;1912-03-27&quot; &quot;1912-04-12&quot; &quot;1912-03-02&quot; &quot;1912-02-17&quot; NA &quot;1912-03-04&quot; NA &quot;1912-03-22&quot; [201] &quot;1912-03-18&quot; NA &quot;1912-03-12&quot; &quot;1912-02-29&quot; &quot;1912-03-28&quot; &quot;1912-04-13&quot; &quot;1912-03-14&quot; &quot;1912-03-20&quot; &quot;1912-03-30&quot; &quot;1912-03-06&quot; [211] &quot;1912-03-22&quot; &quot;1912-03-11&quot; &quot;1912-03-24&quot; &quot;1912-03-16&quot; NA &quot;1912-03-15&quot; &quot;1912-03-19&quot; &quot;1912-03-04&quot; &quot;1912-03-14&quot; &quot;1912-03-16&quot; [221] &quot;1912-03-30&quot; &quot;1912-03-19&quot; &quot;1912-02-24&quot; NA &quot;1912-03-08&quot; &quot;1912-03-24&quot; &quot;1912-03-27&quot; &quot;1912-03-25&quot; &quot;1912-03-28&quot; NA [231] &quot;1912-03-11&quot; &quot;1912-03-17&quot; &quot;1912-02-16&quot; &quot;1912-04-10&quot; &quot;1912-03-22&quot; NA &quot;1912-03-02&quot; &quot;1912-04-07&quot; &quot;1912-03-27&quot; &quot;1912-03-13&quot; [241] NA NA &quot;1912-03-17&quot; &quot;1912-03-24&quot; &quot;1912-03-16&quot; &quot;1912-03-02&quot; &quot;1912-03-21&quot; &quot;1912-03-22&quot; &quot;1912-03-09&quot; &quot;1912-02-21&quot; [251] NA &quot;1912-03-17&quot; &quot;1912-02-13&quot; &quot;1912-03-16&quot; &quot;1912-03-05&quot; &quot;1912-03-17&quot; NA &quot;1912-03-16&quot; &quot;1912-03-11&quot; &quot;1912-02-25&quot; [261] NA &quot;1912-04-12&quot; &quot;1912-02-23&quot; &quot;1912-03-06&quot; NA &quot;1912-03-10&quot; &quot;1912-03-30&quot; &quot;1912-03-21&quot; &quot;1912-02-17&quot; &quot;1912-03-11&quot; [271] NA &quot;1912-03-21&quot; &quot;1912-03-05&quot; &quot;1912-03-09&quot; NA &quot;1912-02-12&quot; &quot;1912-03-01&quot; NA &quot;1912-04-08&quot; &quot;1912-03-11&quot; [281] &quot;1912-02-10&quot; &quot;1912-03-18&quot; &quot;1912-03-30&quot; &quot;1912-03-27&quot; NA &quot;1912-03-13&quot; &quot;1912-03-16&quot; &quot;1912-03-24&quot; &quot;1912-03-04&quot; &quot;1912-03-24&quot; [291] &quot;1912-03-20&quot; &quot;1912-03-27&quot; &quot;1912-03-10&quot; &quot;1912-03-22&quot; &quot;1912-03-22&quot; NA &quot;1912-03-22&quot; &quot;1912-04-13&quot; NA &quot;1912-02-25&quot; [301] NA NA &quot;1912-03-27&quot; NA NA &quot;1912-04-14&quot; NA &quot;1912-03-29&quot; &quot;1912-03-16&quot; &quot;1912-03-16&quot; [311] &quot;1912-03-22&quot; &quot;1912-03-28&quot; &quot;1912-03-20&quot; &quot;1912-03-18&quot; &quot;1912-03-03&quot; &quot;1912-03-20&quot; &quot;1912-03-22&quot; &quot;1912-02-21&quot; &quot;1912-03-15&quot; &quot;1912-03-06&quot; [321] &quot;1912-03-24&quot; &quot;1912-03-19&quot; &quot;1912-03-16&quot; &quot;1912-03-24&quot; NA &quot;1912-03-10&quot; &quot;1912-02-14&quot; &quot;1912-03-10&quot; &quot;1912-03-15&quot; &quot;1912-03-30&quot; [331] NA &quot;1912-02-29&quot; &quot;1912-03-08&quot; &quot;1912-03-30&quot; NA NA &quot;1912-03-17&quot; &quot;1912-03-05&quot; &quot;1912-03-01&quot; &quot;1912-03-01&quot; [341] &quot;1912-04-13&quot; &quot;1912-03-22&quot; &quot;1912-03-18&quot; &quot;1912-03-21&quot; &quot;1912-03-10&quot; &quot;1912-03-22&quot; &quot;1912-03-06&quot; NA &quot;1912-04-12&quot; &quot;1912-03-04&quot; [351] &quot;1912-03-23&quot; NA &quot;1912-03-31&quot; &quot;1912-03-21&quot; NA &quot;1912-03-18&quot; &quot;1912-03-24&quot; &quot;1912-03-08&quot; NA NA [361] &quot;1912-03-06&quot; &quot;1912-03-17&quot; &quot;1912-03-01&quot; &quot;1912-03-11&quot; NA &quot;1912-03-16&quot; &quot;1912-02-15&quot; NA NA &quot;1912-03-22&quot; [371] &quot;1912-03-21&quot; &quot;1912-03-28&quot; &quot;1912-03-27&quot; &quot;1912-03-24&quot; &quot;1912-04-12&quot; NA &quot;1912-03-24&quot; &quot;1912-03-19&quot; &quot;1912-03-26&quot; &quot;1912-03-27&quot; [381] &quot;1912-03-04&quot; &quot;1912-04-14&quot; &quot;1912-03-14&quot; &quot;1912-03-11&quot; NA &quot;1912-03-28&quot; &quot;1912-04-14&quot; &quot;1912-03-10&quot; NA &quot;1912-03-29&quot; [391] &quot;1912-03-10&quot; &quot;1912-03-25&quot; &quot;1912-03-18&quot; &quot;1912-03-23&quot; &quot;1912-03-22&quot; &quot;1912-03-24&quot; &quot;1912-03-15&quot; &quot;1912-02-29&quot; &quot;1912-03-23&quot; &quot;1912-03-18&quot; [401] &quot;1912-03-07&quot; &quot;1912-03-20&quot; &quot;1912-03-25&quot; &quot;1912-03-18&quot; &quot;1912-03-26&quot; &quot;1912-03-12&quot; &quot;1912-02-24&quot; &quot;1912-04-12&quot; &quot;1912-03-25&quot; NA [411] NA NA &quot;1912-03-13&quot; NA &quot;1912-03-02&quot; NA &quot;1912-03-12&quot; &quot;1912-03-28&quot; &quot;1912-03-16&quot; &quot;1912-04-05&quot; [421] NA &quot;1912-03-25&quot; &quot;1912-03-17&quot; &quot;1912-03-18&quot; &quot;1912-03-28&quot; NA &quot;1912-03-18&quot; &quot;1912-03-27&quot; NA &quot;1912-03-14&quot; [431] &quot;1912-03-18&quot; NA &quot;1912-03-04&quot; &quot;1912-03-29&quot; &quot;1912-02-25&quot; &quot;1912-04-01&quot; &quot;1912-03-25&quot; &quot;1912-03-22&quot; &quot;1912-02-11&quot; &quot;1912-03-15&quot; [441] &quot;1912-03-01&quot; &quot;1912-03-26&quot; &quot;1912-03-21&quot; &quot;1912-03-18&quot; NA &quot;1912-04-11&quot; &quot;1912-04-02&quot; &quot;1912-03-12&quot; &quot;1912-04-10&quot; &quot;1912-02-23&quot; [451] &quot;1912-03-10&quot; NA &quot;1912-03-16&quot; &quot;1912-02-26&quot; NA &quot;1912-03-17&quot; &quot;1912-02-10&quot; NA &quot;1912-02-25&quot; NA [461] &quot;1912-02-27&quot; &quot;1912-03-12&quot; &quot;1912-02-28&quot; &quot;1912-02-27&quot; NA &quot;1912-03-08&quot; NA &quot;1912-02-19&quot; NA &quot;1912-04-14&quot; [471] NA &quot;1912-03-08&quot; &quot;1912-03-13&quot; &quot;1912-03-23&quot; &quot;1912-03-24&quot; NA &quot;1912-03-12&quot; &quot;1912-03-17&quot; &quot;1912-03-24&quot; &quot;1912-04-13&quot; [481] &quot;1912-04-06&quot; NA &quot;1912-02-25&quot; &quot;1912-02-12&quot; &quot;1912-03-21&quot; NA &quot;1912-03-11&quot; &quot;1912-02-17&quot; &quot;1912-03-16&quot; &quot;1912-04-06&quot; [491] NA &quot;1912-03-25&quot; &quot;1912-02-20&quot; &quot;1912-02-04&quot; &quot;1912-03-25&quot; NA &quot;1912-02-21&quot; NA &quot;1912-03-21&quot; &quot;1912-03-22&quot; [501] &quot;1912-03-29&quot; &quot;1912-03-25&quot; NA &quot;1912-03-09&quot; &quot;1912-03-30&quot; &quot;1912-03-28&quot; &quot;1912-03-13&quot; NA &quot;1912-03-18&quot; &quot;1912-03-20&quot; [511] &quot;1912-03-17&quot; NA &quot;1912-03-10&quot; &quot;1912-02-21&quot; &quot;1912-03-22&quot; &quot;1912-02-28&quot; &quot;1912-03-12&quot; NA &quot;1912-03-10&quot; &quot;1912-03-14&quot; [521] &quot;1912-03-16&quot; &quot;1912-03-24&quot; NA &quot;1912-03-02&quot; NA &quot;1912-03-05&quot; &quot;1912-02-25&quot; NA &quot;1912-03-07&quot; &quot;1912-03-23&quot; [531] &quot;1912-04-13&quot; NA &quot;1912-03-29&quot; NA &quot;1912-03-16&quot; &quot;1912-04-08&quot; &quot;1912-03-01&quot; &quot;1912-03-16&quot; NA &quot;1912-03-24&quot; [541] &quot;1912-03-10&quot; &quot;1912-04-06&quot; &quot;1912-04-04&quot; &quot;1912-03-14&quot; &quot;1912-02-25&quot; &quot;1912-02-11&quot; &quot;1912-03-27&quot; NA &quot;1912-03-13&quot; &quot;1912-04-07&quot; [551] &quot;1912-03-29&quot; &quot;1912-03-19&quot; NA &quot;1912-03-24&quot; &quot;1912-03-24&quot; &quot;1912-02-13&quot; &quot;1912-02-27&quot; NA &quot;1912-03-07&quot; &quot;1912-03-10&quot; [561] NA &quot;1912-03-06&quot; &quot;1912-03-18&quot; NA NA &quot;1912-03-22&quot; &quot;1912-03-27&quot; &quot;1912-03-17&quot; NA &quot;1912-03-14&quot; [571] &quot;1912-02-13&quot; &quot;1912-02-22&quot; &quot;1912-03-10&quot; NA &quot;1912-03-30&quot; &quot;1912-03-27&quot; &quot;1912-03-12&quot; &quot;1912-03-07&quot; NA &quot;1912-03-14&quot; [581] &quot;1912-03-21&quot; &quot;1912-03-07&quot; &quot;1912-02-21&quot; &quot;1912-03-10&quot; NA &quot;1912-03-28&quot; &quot;1912-02-28&quot; &quot;1912-02-15&quot; &quot;1912-03-24&quot; NA [591] &quot;1912-03-11&quot; &quot;1912-02-23&quot; &quot;1912-02-28&quot; NA &quot;1912-03-09&quot; &quot;1912-03-10&quot; NA &quot;1912-02-26&quot; NA &quot;1912-02-26&quot; [601] &quot;1912-03-22&quot; NA NA &quot;1912-03-02&quot; &quot;1912-03-11&quot; &quot;1912-03-10&quot; &quot;1912-03-16&quot; &quot;1912-03-19&quot; &quot;1912-03-24&quot; &quot;1912-03-06&quot; [611] &quot;1912-03-07&quot; NA NA NA &quot;1912-03-11&quot; &quot;1912-03-22&quot; &quot;1912-03-12&quot; &quot;1912-03-20&quot; &quot;1912-04-11&quot; &quot;1912-03-20&quot; [621] &quot;1912-03-19&quot; &quot;1912-03-04&quot; &quot;1912-03-26&quot; &quot;1912-03-25&quot; &quot;1912-03-25&quot; &quot;1912-02-14&quot; &quot;1912-02-18&quot; &quot;1912-03-25&quot; &quot;1912-03-20&quot; NA [631] &quot;1912-01-26&quot; &quot;1912-02-24&quot; &quot;1912-03-14&quot; NA &quot;1912-04-06&quot; &quot;1912-03-18&quot; &quot;1912-03-14&quot; &quot;1912-03-15&quot; &quot;1912-03-05&quot; NA [641] &quot;1912-03-26&quot; &quot;1912-03-22&quot; &quot;1912-04-13&quot; NA &quot;1912-04-14&quot; &quot;1912-02-27&quot; &quot;1912-03-27&quot; &quot;1912-02-19&quot; NA &quot;1912-03-23&quot; [651] NA &quot;1912-03-28&quot; &quot;1912-03-25&quot; NA &quot;1912-03-28&quot; &quot;1912-03-22&quot; NA &quot;1912-03-14&quot; &quot;1912-03-23&quot; &quot;1912-02-17&quot; [661] &quot;1912-02-25&quot; &quot;1912-03-06&quot; &quot;1912-02-28&quot; &quot;1912-03-10&quot; &quot;1912-03-26&quot; &quot;1912-03-14&quot; &quot;1912-03-21&quot; NA &quot;1912-03-03&quot; NA [671] &quot;1912-03-06&quot; &quot;1912-03-15&quot; &quot;1912-02-05&quot; &quot;1912-03-15&quot; NA &quot;1912-03-28&quot; &quot;1912-03-21&quot; &quot;1912-03-28&quot; &quot;1912-03-03&quot; &quot;1912-03-10&quot; [681] NA &quot;1912-03-19&quot; &quot;1912-03-26&quot; &quot;1912-04-01&quot; &quot;1912-02-15&quot; &quot;1912-03-21&quot; &quot;1912-04-01&quot; &quot;1912-03-27&quot; &quot;1912-03-28&quot; &quot;1912-03-31&quot; [691] &quot;1912-03-15&quot; &quot;1912-04-11&quot; NA &quot;1912-03-21&quot; &quot;1912-02-15&quot; &quot;1912-02-23&quot; &quot;1912-03-02&quot; NA &quot;1912-02-26&quot; &quot;1912-03-04&quot; [701] &quot;1912-03-28&quot; &quot;1912-03-11&quot; &quot;1912-03-28&quot; &quot;1912-03-21&quot; &quot;1912-03-20&quot; &quot;1912-03-07&quot; &quot;1912-03-01&quot; &quot;1912-03-04&quot; &quot;1912-03-24&quot; NA [711] &quot;1912-03-22&quot; NA &quot;1912-02-27&quot; &quot;1912-03-17&quot; &quot;1912-02-23&quot; &quot;1912-03-27&quot; &quot;1912-03-08&quot; &quot;1912-03-19&quot; NA &quot;1912-03-13&quot; [721] &quot;1912-04-09&quot; &quot;1912-03-29&quot; &quot;1912-03-12&quot; &quot;1912-02-25&quot; &quot;1912-03-19&quot; &quot;1912-03-26&quot; &quot;1912-03-16&quot; NA &quot;1912-03-21&quot; &quot;1912-03-21&quot; [731] &quot;1912-03-17&quot; &quot;1912-04-04&quot; NA &quot;1912-03-23&quot; &quot;1912-03-23&quot; &quot;1912-03-17&quot; &quot;1912-02-27&quot; &quot;1912-03-11&quot; NA NA [741] NA &quot;1912-03-10&quot; &quot;1912-03-25&quot; &quot;1912-03-22&quot; &quot;1912-03-15&quot; &quot;1912-02-05&quot; &quot;1912-03-30&quot; &quot;1912-03-16&quot; &quot;1912-03-27&quot; &quot;1912-03-15&quot; [751] &quot;1912-04-11&quot; &quot;1912-04-09&quot; &quot;1912-03-13&quot; &quot;1912-03-23&quot; &quot;1912-02-27&quot; &quot;1912-04-14&quot; &quot;1912-03-18&quot; &quot;1912-03-28&quot; &quot;1912-03-12&quot; &quot;1912-03-13&quot; [761] NA &quot;1912-03-05&quot; &quot;1912-03-26&quot; &quot;1912-03-10&quot; &quot;1912-03-30&quot; &quot;1912-02-24&quot; NA &quot;1912-03-15&quot; NA &quot;1912-03-14&quot; [771] &quot;1912-03-22&quot; &quot;1912-02-27&quot; &quot;1912-02-18&quot; NA &quot;1912-02-21&quot; &quot;1912-03-28&quot; NA &quot;1912-04-10&quot; NA &quot;1912-03-03&quot; [781] &quot;1912-04-02&quot; &quot;1912-03-29&quot; &quot;1912-03-17&quot; NA &quot;1912-03-21&quot; &quot;1912-03-21&quot; &quot;1912-03-28&quot; &quot;1912-04-07&quot; &quot;1912-04-14&quot; &quot;1912-02-29&quot; [791] NA &quot;1912-03-30&quot; NA NA &quot;1912-03-21&quot; &quot;1912-03-07&quot; &quot;1912-02-26&quot; &quot;1912-03-15&quot; &quot;1912-03-16&quot; &quot;1912-03-16&quot; [801] &quot;1912-03-12&quot; &quot;1912-03-15&quot; &quot;1912-04-04&quot; &quot;1912-04-14&quot; &quot;1912-03-19&quot; &quot;1912-03-15&quot; &quot;1912-03-07&quot; &quot;1912-03-28&quot; &quot;1912-03-07&quot; &quot;1912-03-13&quot; [811] &quot;1912-03-20&quot; &quot;1912-03-07&quot; &quot;1912-03-11&quot; &quot;1912-04-09&quot; &quot;1912-03-15&quot; NA &quot;1912-03-23&quot; &quot;1912-03-15&quot; &quot;1912-03-03&quot; &quot;1912-04-05&quot; [821] &quot;1912-02-23&quot; &quot;1912-03-19&quot; &quot;1912-03-08&quot; &quot;1912-03-19&quot; &quot;1912-04-13&quot; NA NA &quot;1912-04-14&quot; NA &quot;1912-02-13&quot; [831] &quot;1912-03-31&quot; &quot;1912-04-14&quot; NA &quot;1912-03-23&quot; &quot;1912-03-28&quot; &quot;1912-03-07&quot; &quot;1912-03-25&quot; NA &quot;1912-03-14&quot; NA [841] &quot;1912-03-26&quot; &quot;1912-03-30&quot; &quot;1912-03-16&quot; &quot;1912-03-11&quot; &quot;1912-03-29&quot; &quot;1912-03-04&quot; NA &quot;1912-03-11&quot; &quot;1912-03-18&quot; NA [851] &quot;1912-04-11&quot; &quot;1912-02-01&quot; &quot;1912-04-06&quot; &quot;1912-03-30&quot; &quot;1912-03-02&quot; &quot;1912-03-28&quot; &quot;1912-03-01&quot; &quot;1912-02-24&quot; &quot;1912-03-22&quot; NA [861] &quot;1912-03-05&quot; &quot;1912-03-25&quot; &quot;1912-02-27&quot; NA &quot;1912-03-22&quot; &quot;1912-03-04&quot; &quot;1912-03-19&quot; &quot;1912-03-15&quot; NA &quot;1912-04-11&quot; [871] &quot;1912-03-20&quot; &quot;1912-02-28&quot; &quot;1912-03-13&quot; &quot;1912-02-28&quot; &quot;1912-03-18&quot; &quot;1912-03-31&quot; &quot;1912-03-26&quot; &quot;1912-03-27&quot; NA &quot;1912-02-19&quot; [881] &quot;1912-03-21&quot; &quot;1912-03-13&quot; &quot;1912-03-24&quot; &quot;1912-03-18&quot; &quot;1912-03-21&quot; &quot;1912-03-07&quot; &quot;1912-03-19&quot; &quot;1912-03-27&quot; NA &quot;1912-03-20&quot; [891] &quot;1912-03-14&quot; "],["ejercicios-recopilados.html", " Ejercicios recopilados Instalación Primeros pasos 19.1 Variables numéricas y de texto 19.2 Vectores 19.3 Operaciones con vectores 19.4 Fechas 19.5 Datos estructurados 19.6 Listas 19.7 Estructuras if-else 19.8 Estructuras for y while 19.9 Funciones 19.10 Practica final", "  Ejercicios recopilados Recopilación de los ejercicios planteados a lo largo del manual. Vuelve por aquí si quieres cuando acabes las lecciones para repasar aquellos ejercicios que más te hayan costado. Instalación Scripts usados: script02.R: instalación de R. Ver en https://github.com/Crisben/uleam-stat24/tree/main/scripts/script02.R (haz click en las flechas para ver soluciones) Ejercicio 1: abre R Studio y en tu consola (parte inferior de tu pantalla) asigna los valores 2 y 5 a dos variables a y b. Tras asignarles valores, multiplica los números en consola (haz click en la flecha para la solución propuesta). Solución: # Para poner comentarios en el código se usa # # Definición de variables a &lt;- 2 b &lt;- 5 # Multiplicación a * b [1] 10 Figure 19.1: Multiplicación de a y b.   Ejercicio 2: modifica el código inferior para definir dos variables c y d, con valores 3 y -1, y calcular la división c/d (haz click en la flecha para la solución propuesta). # Definición de variables c &lt;- d &lt;- # Operación (división) c ? d Solución: # Definición de variables c &lt;- 3 d &lt;- -1 # División c / d [1] -3   Ejercicio 3: repite el ejercicio 1 pero ahora guarda el resultado de la multiplicación final en una variable c. Para ver el resultado guardado en c escribe dicha variable en consola (haz click en la flecha para la solución propuesta). Solución: # Variables a &lt;- 2 b &lt;- 5 # Resultado c &lt;- a * b # Muestro en consola c [1] 10 Figure 19.2: Multiplicación de a y b guardando el resultado.   WARNING: No hace falta gastar una línea por cada orden que quieras ejecutar. Tampoco necesitas guardar cada paso intermedio que realices. Cuidado con la memoria: cada asignación que hagas es una variable guardada que consume recursos en tu ordenador. Primeros pasos Scripts usados: script04.R: primeros pasos. Ver en https://github.com/Crisben/uleam-stat24/tree/main/scripts/script04.R (haz click en las flechas para ver soluciones) Ejercicio 1: asigna ahora los valores 1, -2, 3 a tres variables a, b y c distintas, y calcula la raíz cuadrada de cada uno (haz click en la flecha para la solución propuesta). Solución: # Variables a &lt;- 1 b &lt;- -2 c &lt;- 3 # Resultado sqrt(a) [1] 1 sqrt(b) [1] NaN sqrt(c) [1] 1.732051   Ejercicio 2: calcula en consola la suma de 3 más 4, y todo ello multiplicado por 10, y asígnalo a una variable x (haz click en la flecha para la solución propuesta). Imprime el valor por consola Solución: # Asignamos x &lt;- (3 + 4) * 10 # Imprimimos x [1] 70   Ejercicio 3: asigna un valor positivo a x y calcula su raíz cuadrada; asigna otro negativo y calcula su valor absoluto con la función abs() (haz click en la flecha para la solución propuesta). Solución: # Raíz cuadrada x &lt;- 73 # por ejemplo sqrt(x) [1] 8.544004 # Valor absoluto y &lt;- -19 # por ejemplo abs(y) [1] 19   CONSEJO: Las órdenes sqrt(x) y abs(y) se llaman funciones, y la variable que tienen entre paréntesis se llama argumento de la función: una variable que toma de entrada la función y con la que opera internamente.   Ejercicio 4: usando la variable x ya definida, completa/modifica el código inferior para guardar en una nueva variable z el resultado guardado en x menos 5 (haz click en la flecha para la solución propuesta). z &lt;- ? - ? z Solución: z &lt;- x - 5 z [1] 68   Ejercicio 5: usando las variables x e y ya definidas, calcula el máximo de ambas (función max()), y guárdalo en una nueva variable t. (haz click en la flecha para la solución propuesta). Solución: t &lt;- max(x, y) t [1] 73   WARNING: No hace falta gastar una línea por cada orden que quieras ejecutar. Tampoco necesitas guardar cada paso intermedio que realices. Cuidado con la memoria: cada asignación que hagas es una variable guardada que consume recursos en tu ordenador. 19.1 Variables numéricas y de texto Scripts usados: script05.R: variables numéricas y caracteres. Ver en https://github.com/Crisben/uleam-stat24/tree/main/scripts/script05.R (haz click en las flechas para ver soluciones) Ejercicio 1: define una variable edad que guarde tu edad y otra nombre con tu nombre. Solución: edad &lt;- 32 # tipo numeric nombre &lt;- &quot;Javier&quot; # tipo caracter edad [1] 32 nombre [1] &quot;Javier&quot;   Ejercicio 2: define otra variable con tus apellidos y junta las variables nombre y apellidos en una sola cadena de texto que guardes en nombre_completo. Solución: library(glue) # Apellidos apellidos &lt;- &quot;Crisben Crisben&quot; # Pegamos nombre_completo &lt;- glue(&quot;{nombre} {apellidos}&quot;) nombre_completo Javier Crisben Crisben # Otra forma nombre_completo &lt;- paste(nombre, apellidos) nombre_completo [1] &quot;Javier Crisben Crisben&quot;   Ejercicio 3: define dos variables numéricas y realiza la suma de ambas. Obtén con class() la clase de dicha variable suma Solución: # Definimos dos variables numéricas a &lt;- 1 b &lt;- -2 a + b [1] -1 class(a + b) [1] &quot;numeric&quot;   Ejercicio 4: construye una frase que diga «Hola, me llamo … y tengo … años». Solución: edad &lt;- 32 glue(&quot;Hola, me llamo {nombre_completo} y tengo {edad} años&quot;) Hola, me llamo Javier Crisben Crisben y tengo 32 años   Ejercicio 5: define una cadena de texto con \"mi codigo postal es 28045\". Calcula la longitud de la cadena y extrae la subcadena del lugar 3 al 17 con str_sub() del paquete {stringr} (guarda dicha subcadena en una variable y) Solución: library(stringr) x &lt;- &quot;mi codigo postal es 28045&quot; y &lt;- str_sub(x, 3, 17) y [1] &quot; codigo postal &quot;   Ejercicio 6: con la subcadena y del ejercicio anterior, elimina los espacios solo de la izquierda y convierte a mayúsculas Solución: # Todo en una línea str_to_upper(str_trim(y, side = &quot;left&quot;)) [1] &quot;CODIGO POSTAL &quot; # Paso a paso z &lt;- str_trim(y, side = &quot;left&quot;) str_to_upper(z) [1] &quot;CODIGO POSTAL &quot;   Ejercicio 7: con la cadena x original, sustituye la subcadena “codigo postal” por “cp”. Solución: str_sub(x, 4, 16) &lt;- &quot;cp&quot;   19.2 Vectores Scripts usados: script06.R: vectores. Ver en https://github.com/Crisben/uleam-stat24/tree/main/scripts/script06.R (haz click en las flechas para ver soluciones) Ejercicio 1: modifica el código inferior para crear un vector de nombre vector_num que contenga los números 1, 5 y -7. # Vector de números vector_num &lt;- c(1) vector_num Solución: # Vector de números vector_num &lt;- c(1, 5, -7) vector_num [1] 1 5 -7   Ejercicio 2: define un vector que contenga los números 1, 10, -1 y 2, y guárdalo en una variable llamada vector_num. Solución: # Vector de números vector_num &lt;- c(1, 10, -1, 2) vector_num [1] 1 10 -1 2   Ejercicio 3: obtén la longitud del vector anterior vector_num. Solución: # Longitud del vector length(vector_num) [1] 4   Ejercicio 4: crea un vector con las palabras “Hola”, “me”, “llamo” (y tu nombre y apellidos), y pega luego sus elementos de forma que la frase esté correctamente escrita en castellano. Tras hacerlo, añade “y tengo 30 años”. Solución: # Definiendo el vector vector_char &lt;- c(&quot;Hola&quot;, &quot;me&quot;, &quot;llamo&quot;, &quot;Cristian&quot;) # Pegamos frase &lt;- paste(vector_char, collapse = &quot; &quot;) frase [1] &quot;Hola me llamo Cristian&quot; # Añadimos frase glue(&quot;{frase} y tengo 30 años.&quot;) Hola me llamo Cristian y tengo 30 años. # Otra forma paste0(frase, &quot; y tengo 30 años.&quot;) [1] &quot;Hola me llamo Cristian y tengo 30 años.&quot; # Otra forma paste(frase, &quot;y tengo 30 años.&quot;) [1] &quot;Hola me llamo Cristian y tengo 30 años.&quot;   Ejercicio 5: el código inferior crea una secuencia de números, que empieza en -1, que acaba en 32, y que va saltando de 2 en 2. Modíficalo para que haga el salto de 3 en 3 y guárdalo en una variable llamada secuencia seq(-1, 32, by = 2) Solución: secuencia &lt;- seq(-1, 32, by = 3) secuencia [1] -1 2 5 8 11 14 17 20 23 26 29 32 length(secuencia) # longitud de la secuencia [1] 12   Ejercicio 6: crea una secuencia de números, que empiece en -1, que acabe en 32, y que tenga longitud 12. Solución: secuencia &lt;- seq(-1, 32, l = 12) secuencia [1] -1 2 5 8 11 14 17 20 23 26 29 32 length(secuencia) # longitud de la secuencia [1] 12   Ejercicio 7: crea una secuencia que empiece en 1 y recorra todos los naturales hasta el 10. Después crea otra secuencia de longitud 7 que todos los números sean 3. Solución: 1:10 [1] 1 2 3 4 5 6 7 8 9 10 rep(3, 7) # secuencia repetida [1] 3 3 3 3 3 3 3   Ejercicio 8: crea una secuencia que repita 5 veces el patrón 1, 2, 3. Después crea otra que repita dicho patrón pero de forma intercalada, con 5 veces 1, después 5 veces 2 y después 5 veces 3. Solución: rep(c(1, 2, 3), 5) # repetimos patrón (1, 2, 3) 5 veces [1] 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 rep(c(1, 2, 3), each = 5) # repetimos patrón alternado [1] 1 1 1 1 1 2 2 2 2 2 3 3 3 3 3   Ejercicio 9: crea una variable x &lt;- c(\"oso pardo\", \"oso polar\", \"ballena\", \"grillo\", \"oso panda\", \"perro\"). Haciendo uso de str_length() calcula la longitud de cada cadena de texto. Haciendo uso de str_detect() detecta los animales que son un oso. Solución: x &lt;- c(&quot;oso pardo&quot;, &quot;Oso polar&quot;, &quot;ballena&quot;, &quot;grillo&quot;, &quot;OSO panda&quot;, &quot;perro&quot;) str_length(x) # longitud [1] 9 9 7 6 9 5 # OJO! antes hay que pasar todo a mayúscula o minúscula, nos da igual que sea oso, OSO, Oso, etc str_detect(str_to_lower(x), &quot;oso&quot;) [1] TRUE TRUE FALSE FALSE TRUE FALSE 19.3 Operaciones con vectores Scripts usados: script07.R: operaciones con vectores. Ver en https://github.com/Crisben/uleam-stat24/tree/main/scripts/script07.R (haz click en las flechas para ver soluciones) Ejercicio 1: define el vector x como la concatenación de los números 1, 10, -1 y 2, y calcula su suma. Solución: # Vector de números x &lt;- c(1, 10, -1, 2) # Suma sum(x) [1] 12   Ejercicio 2: define otro vector y que contenga los números 5, -7, 8, -3, y haz la suma de x e y. Solución: # Vector de números y &lt;- c(5, -7, 8, -3) # Suma x + y [1] 6 3 7 -1   Ejercicio 3: calcula el número de elementos mayores que 0 del resultado de la suma de x + y. Solución: sum((x + y) &gt; 0) [1] 3 # Otra forma suma &lt;- x + y sum(suma &gt; 0) [1] 3   Ejercicio 4: calcula la versión ordenada del vector x. Solución: # Ordenamos el vector (con sort) sort(x) [1] -1 1 2 10 # Ordenamos el vector (con order) x[order(x)] [1] -1 1 2 10   Ejercicio 5: encuentra del vector x original el lugar (el índice) que ocupa su mínimo y su máximo. Solución: x&lt;- c(1, 10, -1, 2) # Encontrando el lugar que ocupa el máximo y mínimo which.max(x) [1] 2 which.min(x) [1] 3   Ejercicio 6: encuentra del vector x los elementos mayores que 1 y menores que 7. Encuentra una forma de averiguar si todos los elementos son o no positivos. Solución: # Vector lógico: mayores que 1 y menores que 7 x &gt; 1 &amp; x &lt; 7 [1] FALSE FALSE FALSE TRUE # ¿Son todos positivos? Mira también any() all(x &gt; 0) [1] FALSE   Ejercicio 7: define el vector c(-1, 0, 4, 5, -2), calcula la raíz cuadrada del vector y determina que lugares son ausente de tipo NaN. Solución: # Vector z &lt;- c(-1, 0, 4, 5, -2) # ¿Cuáles son ausentes tras aplicar la raíz cuadrada? is.nan(sqrt(z)) [1] TRUE FALSE FALSE FALSE TRUE   Ejercicio 8: define el vector de los primeros números impares (hasta el 21) y extrae los elementos que ocupan los lugares 1, 4, 5, 8. Elimina del vector el segundo elemento Solución: # Vector de impares (de 1 a 21 saltando de dos en dos) x &lt;- seq(1, 21, by = 2) # Seleccionamos elementos x[c(1, 4, 5, 8)] [1] 1 7 9 15 # Eliminamos elementos y &lt;- x[-2] y [1] 1 5 7 9 11 13 15 17 19 21   Ejercicio 9: define una cadena de caracteres texto &lt;- c(\"oso polar\", \"oso pardo\", \"salamandra\", \"buho\", \"lechuza\", \"oso malayo\"). Usa str_count() para contabilizar el número de osos. Usa str_starts() para saber que elemento del vector es un oso o no. Obten la longitud de cada cadena. Sustituye en todas las cadenas la o por * Solución: texto &lt;- c(&quot;oso polar&quot;, &quot;oso pardo&quot;, &quot;salamandra&quot;, &quot;buho&quot;, &quot;lechuza&quot;, &quot;oso malayo&quot;) # Cuenta el número de cadenas que contienen la palabra &quot;oso&quot; str_count(texto, &quot;oso&quot;) [1] 1 1 0 0 0 1 # Nos devuelve TRUE en las cadenas que empiecen por &quot;oso&quot; str_starts(texto, &quot;oso&quot;) [1] TRUE TRUE FALSE FALSE FALSE TRUE str_ends(texto, &quot;oso&quot;) # devuelve todo FALSE [1] FALSE FALSE FALSE FALSE FALSE FALSE # Longitud de cada cadena str_length(texto) [1] 9 9 10 4 7 10 # Sustituimos en todas las oes por * str_replace_all(texto, &quot;o&quot;, &quot;*&quot;) [1] &quot;*s* p*lar&quot; &quot;*s* pard*&quot; &quot;salamandra&quot; &quot;buh*&quot; &quot;lechuza&quot; &quot;*s* malay*&quot; 19.4 Fechas Scripts usados: script08.R: operaciones con vectores. Ver en https://github.com/Crisben/uleam-stat24/tree/main/scripts/script08.R (haz click en las flechas para ver soluciones) Ejercicio 1: obten la fecha de hoy, define la fecha de tu cumpleaños, y calcula la diferencia de días. Solución: library(lubridate) # Hoy hoy &lt;- today() # Cumple (diferentes formatos de entrada) cumple &lt;- as_date(&quot;1989-09-10&quot;) # por defecto cumple &lt;- as_date(&quot;10-09-1989&quot;, format = &quot;%d-%m-%Y&quot;) # Diferencia hoy - cumple Time difference of 12641 days   Ejercicio 2: define la fecha de tu cumpleaños y determina si fue año bisiesto. Súmale 1-2-3-4-5 semanas. Solución: cumple &lt;- as_date(&quot;1989-09-10&quot;) # por defecto # Bisiesto leap_year(cumple) [1] FALSE # Sumamos semanaes cumple + weeks(1:5) [1] &quot;1989-09-17&quot; &quot;1989-09-24&quot; &quot;1989-10-01&quot; &quot;1989-10-08&quot; &quot;1989-10-15&quot;   Ejercicio 3: extrae el mes, año y día de la semana de tu cumpleaños Solución: # Mes month(cumple) [1] 9 # Año year(cumple) [1] 1989 # wday wday(cumple, week_start = 1) [1] 7 wday(cumple, week_start = 1, label = TRUE) [1] dom\\\\. Levels: lun\\\\. &lt; mar\\\\. &lt; mié\\\\. &lt; jue\\\\. &lt; vie\\\\. &lt; sáb\\\\. &lt; dom\\\\.   Ejercicio 4: calcula los días que han pasado desde la fecha de tu nacimiento Solución: seconds(today() - cumple) [1] &quot;12641S&quot;   19.5 Datos estructurados Scripts usados: script09.R: datos estructurados. Ver en https://github.com/Crisben/uleam-stat24/tree/main/scripts/script09.R (haz click en las flechas para ver soluciones) Ejercicio 1: modifica el código para definir una matriz x de ceros de 3 filas y 7 columnas. # Matriz x &lt;- matrix(0, nrow = 2, ncol = 3) x Solución: # Matriz x &lt;- matrix(0, nrow = 3, ncol = 7) x [,1] [,2] [,3] [,4] [,5] [,6] [,7] [1,] 0 0 0 0 0 0 0 [2,] 0 0 0 0 0 0 0 [3,] 0 0 0 0 0 0 0   Ejercicio 2: a la matriz anterior, suma un 1 a cada número de la matriz y divide el resultado entre 5. Solución: (x + 1) / 5 [,1] [,2] [,3] [,4] [,5] [,6] [,7] [1,] 0.2 0.2 0.2 0.2 0.2 0.2 0.2 [2,] 0.2 0.2 0.2 0.2 0.2 0.2 0.2 [3,] 0.2 0.2 0.2 0.2 0.2 0.2 0.2   Ejercicio 3: tras definir la matriz x calcula su transpuesta y obtén sus dimensiones Solución: # Transpuesta t(x) [,1] [,2] [,3] [1,] 0 0 0 [2,] 0 0 0 [3,] 0 0 0 [4,] 0 0 0 [5,] 0 0 0 [6,] 0 0 0 [7,] 0 0 0 # Dimensiones transpuesta: pasa de ser 3x7 a 7x3 dim(t(x)) [1] 7 3 ncol(t(x)) # número de columnas de la transpuesta [1] 3 nrow(t(x)) # número de filas de la transpuesta [1] 7   Ejercicio 4: el siguiente código define una matriz de dimensiones 4 x 3 y calcula la suma por columnas. Modifica el código para que realice la suma por filas. # Matriz matriz &lt;- matrix(1:12, nrow = 4) # Suma por columnas apply(matriz, MARGIN = 2, FUN = &quot;sum&quot;) [1] 10 26 42 Solución: # Matriz matriz &lt;- matrix(1:12, nrow = 4) # Suma por filas apply(matriz, MARGIN = 1, FUN = &quot;sum&quot;) [1] 15 18 21 24   Ejercicio 5: con la matriz anterior definida como matrix(1:12, nrow = 4), calcula la media de todos los elementos, la media de cada fila y la media de cada columna. Solución: # Matriz matriz &lt;- matrix(1:12, nrow = 4) # media de todos mean(matriz) [1] 6.5 # Media por filas (MARGIN = 1 ya que es una operación por filas) apply(matriz, MARGIN = 1, FUN = &quot;mean&quot;) [1] 5 6 7 8 # Media por filas (MARGIN = 2 ya que es una operación por filas) apply(matriz, MARGIN = 2, FUN = &quot;mean&quot;) [1] 2.5 6.5 10.5   Ejercicio 6: el data.frame llamado airquality, del paquete {datasets}, contiene variables de la calidad del aire de la ciudad de Nueva York desde mayo hasta septiembre de 1973. Obtén el nombre de las variables. Solución: library(datasets) names(airquality) [1] &quot;Ozone&quot; &quot;Solar.R&quot; &quot;Wind&quot; &quot;Temp&quot; &quot;Month&quot; &quot;Day&quot;   Ejercicio 7: obtén las dimensiones del conjunto de datos. ¿Cuántas variables hay? ¿Cuántos días se han medido? Solución: # Dimensiones dim(airquality) [1] 153 6 nrow(airquality) [1] 153 ncol(airquality) [1] 6   Ejercicio 8: modifica el código inferior para que nos filtre solo los datos del mes de julio. # Filtramos filas filtro_fila &lt;- subset(., subset = Month &lt; 6) filtro_fila Solución: # Filtramos filas filtro_fila &lt;- subset(airquality, subset = Month == 7) filtro_fila Ozone Solar.R Wind Temp Month Day 62 135 269 4.1 84 7 1 63 49 248 9.2 85 7 2 64 32 236 9.2 81 7 3 65 NA 101 10.9 84 7 4 66 64 175 4.6 83 7 5 67 40 314 10.9 83 7 6 68 77 276 5.1 88 7 7 69 97 267 6.3 92 7 8 70 97 272 5.7 92 7 9 71 85 175 7.4 89 7 10 72 NA 139 8.6 82 7 11 73 10 264 14.3 73 7 12 74 27 175 14.9 81 7 13 75 NA 291 14.9 91 7 14 76 7 48 14.3 80 7 15 77 48 260 6.9 81 7 16 78 35 274 10.3 82 7 17 79 61 285 6.3 84 7 18 80 79 187 5.1 87 7 19 81 63 220 11.5 85 7 20 82 16 7 6.9 74 7 21 83 NA 258 9.7 81 7 22 84 NA 295 11.5 82 7 23 85 80 294 8.6 86 7 24 86 108 223 8.0 85 7 25 87 20 81 8.6 82 7 26 88 52 82 12.0 86 7 27 89 82 213 7.4 88 7 28 90 50 275 7.4 86 7 29 91 64 253 7.4 83 7 30 92 59 254 9.2 81 7 31   Ejercicio 9: del conjunto airquality selecciona aquellos datos que no sean ni de julio ni de agosto. Solución: # Filtramos filas filtro_fila &lt;- subset(airquality, subset = !(Month %in% c(7, 8))) filtro_fila Ozone Solar.R Wind Temp Month Day 1 41 190 7.4 67 5 1 2 36 118 8.0 72 5 2 3 12 149 12.6 74 5 3 4 18 313 11.5 62 5 4 5 NA NA 14.3 56 5 5 6 28 NA 14.9 66 5 6 7 23 299 8.6 65 5 7 8 19 99 13.8 59 5 8 9 8 19 20.1 61 5 9 10 NA 194 8.6 69 5 10 11 7 NA 6.9 74 5 11 12 16 256 9.7 69 5 12 13 11 290 9.2 66 5 13 14 14 274 10.9 68 5 14 15 18 65 13.2 58 5 15 16 14 334 11.5 64 5 16 17 34 307 12.0 66 5 17 18 6 78 18.4 57 5 18 19 30 322 11.5 68 5 19 20 11 44 9.7 62 5 20 21 1 8 9.7 59 5 21 22 11 320 16.6 73 5 22 23 4 25 9.7 61 5 23 24 32 92 12.0 61 5 24 25 NA 66 16.6 57 5 25 26 NA 266 14.9 58 5 26 27 NA NA 8.0 57 5 27 28 23 13 12.0 67 5 28 29 45 252 14.9 81 5 29 30 115 223 5.7 79 5 30 31 37 279 7.4 76 5 31 32 NA 286 8.6 78 6 1 33 NA 287 9.7 74 6 2 34 NA 242 16.1 67 6 3 35 NA 186 9.2 84 6 4 36 NA 220 8.6 85 6 5 37 NA 264 14.3 79 6 6 38 29 127 9.7 82 6 7 39 NA 273 6.9 87 6 8 40 71 291 13.8 90 6 9 41 39 323 11.5 87 6 10 42 NA 259 10.9 93 6 11 43 NA 250 9.2 92 6 12 44 23 148 8.0 82 6 13 45 NA 332 13.8 80 6 14 46 NA 322 11.5 79 6 15 47 21 191 14.9 77 6 16 48 37 284 20.7 72 6 17 49 20 37 9.2 65 6 18 50 12 120 11.5 73 6 19 51 13 137 10.3 76 6 20 52 NA 150 6.3 77 6 21 53 NA 59 1.7 76 6 22 54 NA 91 4.6 76 6 23 55 NA 250 6.3 76 6 24 56 NA 135 8.0 75 6 25 57 NA 127 8.0 78 6 26 58 NA 47 10.3 73 6 27 59 NA 98 11.5 80 6 28 60 NA 31 14.9 77 6 29 61 NA 138 8.0 83 6 30 124 96 167 6.9 91 9 1 125 78 197 5.1 92 9 2 126 73 183 2.8 93 9 3 127 91 189 4.6 93 9 4 128 47 95 7.4 87 9 5 129 32 92 15.5 84 9 6 130 20 252 10.9 80 9 7 131 23 220 10.3 78 9 8 132 21 230 10.9 75 9 9 133 24 259 9.7 73 9 10 134 44 236 14.9 81 9 11 135 21 259 15.5 76 9 12 136 28 238 6.3 77 9 13 137 9 24 10.9 71 9 14 138 13 112 11.5 71 9 15 139 46 237 6.9 78 9 16 140 18 224 13.8 67 9 17 141 13 27 10.3 76 9 18 142 24 238 10.3 68 9 19 143 16 201 8.0 82 9 20 144 13 238 12.6 64 9 21 145 23 14 9.2 71 9 22 146 36 139 10.3 81 9 23 147 7 49 10.3 69 9 24 148 14 20 16.6 63 9 25 149 30 193 6.9 70 9 26 150 NA 145 13.2 77 9 27 151 14 191 14.3 75 9 28 152 18 131 8.0 76 9 29 153 20 223 11.5 68 9 30   Ejercicio 10: modifica el siguiente código para quedarte solo con las variable Ozone y Temp. filtro_col &lt;- subset(., select = c(&quot;Ozone&quot;)) filtro_col Solución: # Filtramos columnas filtro_col &lt;- subset(airquality, select = c(&quot;Ozone&quot;, &quot;Temp&quot;)) filtro_col Ozone Temp 1 41 67 2 36 72 3 12 74 4 18 62 5 NA 56 6 28 66 7 23 65 8 19 59 9 8 61 10 NA 69 11 7 74 12 16 69 13 11 66 14 14 68 15 18 58 16 14 64 17 34 66 18 6 57 19 30 68 20 11 62 21 1 59 22 11 73 23 4 61 24 32 61 25 NA 57 26 NA 58 27 NA 57 28 23 67 29 45 81 30 115 79 31 37 76 32 NA 78 33 NA 74 34 NA 67 35 NA 84 36 NA 85 37 NA 79 38 29 82 39 NA 87 40 71 90 41 39 87 42 NA 93 43 NA 92 44 23 82 45 NA 80 46 NA 79 47 21 77 48 37 72 49 20 65 50 12 73 51 13 76 52 NA 77 53 NA 76 54 NA 76 55 NA 76 56 NA 75 57 NA 78 58 NA 73 59 NA 80 60 NA 77 61 NA 83 62 135 84 63 49 85 64 32 81 65 NA 84 66 64 83 67 40 83 68 77 88 69 97 92 70 97 92 71 85 89 72 NA 82 73 10 73 74 27 81 75 NA 91 76 7 80 77 48 81 78 35 82 79 61 84 80 79 87 81 63 85 82 16 74 83 NA 81 84 NA 82 85 80 86 86 108 85 87 20 82 88 52 86 89 82 88 90 50 86 91 64 83 92 59 81 93 39 81 94 9 81 95 16 82 96 78 86 97 35 85 98 66 87 99 122 89 100 89 90 101 110 90 102 NA 92 103 NA 86 104 44 86 105 28 82 106 65 80 107 NA 79 108 22 77 109 59 79 110 23 76 111 31 78 112 44 78 113 21 77 114 9 72 115 NA 75 116 45 79 117 168 81 118 73 86 119 NA 88 120 76 97 121 118 94 122 84 96 123 85 94 124 96 91 125 78 92 126 73 93 127 91 93 128 47 87 129 32 84 130 20 80 131 23 78 132 21 75 133 24 73 134 44 81 135 21 76 136 28 77 137 9 71 138 13 71 139 46 78 140 18 67 141 13 76 142 24 68 143 16 82 144 13 64 145 23 71 146 36 81 147 7 69 148 14 63 149 30 70 150 NA 77 151 14 75 152 18 76 153 20 68   Ejercicio 11: del conjunto airquality selecciona los datos de temperatura y viento de agosto. Solución: # Todo de una vez filtro &lt;- subset(airquality, subset = Month == 8, select = c(&quot;Temp&quot;, &quot;Wind&quot;)) filtro Temp Wind 93 81 6.9 94 81 13.8 95 82 7.4 96 86 6.9 97 85 7.4 98 87 4.6 99 89 4.0 100 90 10.3 101 90 8.0 102 92 8.6 103 86 11.5 104 86 11.5 105 82 11.5 106 80 9.7 107 79 11.5 108 77 10.3 109 79 6.3 110 76 7.4 111 78 10.9 112 78 10.3 113 77 15.5 114 72 14.3 115 75 12.6 116 79 9.7 117 81 3.4 118 86 8.0 119 88 5.7 120 97 9.7 121 94 2.3 122 96 6.3 123 94 6.3   Ejercicio 12: calcula el número de filas borradas del ejercicio anterior. Tras hacer todo ello, traduce a castellano el nombre de las columnas del data.frame filtrado. Solución: # Filas borradas nrow(airquality) - nrow(filtro) [1] 122 # Cambiamos nombres a castellano del conjunto filtrado names(filtro) &lt;- c(&quot;temperatura&quot;, &quot;viento&quot;)   Ejercicio 13: añade a los datos originales una columna con la fecha completa (recuerda que es del año 1973 todas las observaciones. Solución: # Construimos las fechas (pegamos año-mes-día con &quot;-&quot;) fechas &lt;- as_date(paste(&quot;1973&quot;, airquality$Month, airquality$Day, sep = &quot;-&quot;)) # Añadimos data.frame(airquality, fechas) Ozone Solar.R Wind Temp Month Day fechas 1 41 190 7.4 67 5 1 1973-05-01 2 36 118 8.0 72 5 2 1973-05-02 3 12 149 12.6 74 5 3 1973-05-03 4 18 313 11.5 62 5 4 1973-05-04 5 NA NA 14.3 56 5 5 1973-05-05 6 28 NA 14.9 66 5 6 1973-05-06 7 23 299 8.6 65 5 7 1973-05-07 8 19 99 13.8 59 5 8 1973-05-08 9 8 19 20.1 61 5 9 1973-05-09 10 NA 194 8.6 69 5 10 1973-05-10 11 7 NA 6.9 74 5 11 1973-05-11 12 16 256 9.7 69 5 12 1973-05-12 13 11 290 9.2 66 5 13 1973-05-13 14 14 274 10.9 68 5 14 1973-05-14 15 18 65 13.2 58 5 15 1973-05-15 16 14 334 11.5 64 5 16 1973-05-16 17 34 307 12.0 66 5 17 1973-05-17 18 6 78 18.4 57 5 18 1973-05-18 19 30 322 11.5 68 5 19 1973-05-19 20 11 44 9.7 62 5 20 1973-05-20 21 1 8 9.7 59 5 21 1973-05-21 22 11 320 16.6 73 5 22 1973-05-22 23 4 25 9.7 61 5 23 1973-05-23 24 32 92 12.0 61 5 24 1973-05-24 25 NA 66 16.6 57 5 25 1973-05-25 26 NA 266 14.9 58 5 26 1973-05-26 27 NA NA 8.0 57 5 27 1973-05-27 28 23 13 12.0 67 5 28 1973-05-28 29 45 252 14.9 81 5 29 1973-05-29 30 115 223 5.7 79 5 30 1973-05-30 31 37 279 7.4 76 5 31 1973-05-31 32 NA 286 8.6 78 6 1 1973-06-01 33 NA 287 9.7 74 6 2 1973-06-02 34 NA 242 16.1 67 6 3 1973-06-03 35 NA 186 9.2 84 6 4 1973-06-04 36 NA 220 8.6 85 6 5 1973-06-05 37 NA 264 14.3 79 6 6 1973-06-06 38 29 127 9.7 82 6 7 1973-06-07 39 NA 273 6.9 87 6 8 1973-06-08 40 71 291 13.8 90 6 9 1973-06-09 41 39 323 11.5 87 6 10 1973-06-10 42 NA 259 10.9 93 6 11 1973-06-11 43 NA 250 9.2 92 6 12 1973-06-12 44 23 148 8.0 82 6 13 1973-06-13 45 NA 332 13.8 80 6 14 1973-06-14 46 NA 322 11.5 79 6 15 1973-06-15 47 21 191 14.9 77 6 16 1973-06-16 48 37 284 20.7 72 6 17 1973-06-17 49 20 37 9.2 65 6 18 1973-06-18 50 12 120 11.5 73 6 19 1973-06-19 51 13 137 10.3 76 6 20 1973-06-20 52 NA 150 6.3 77 6 21 1973-06-21 53 NA 59 1.7 76 6 22 1973-06-22 54 NA 91 4.6 76 6 23 1973-06-23 55 NA 250 6.3 76 6 24 1973-06-24 56 NA 135 8.0 75 6 25 1973-06-25 57 NA 127 8.0 78 6 26 1973-06-26 58 NA 47 10.3 73 6 27 1973-06-27 59 NA 98 11.5 80 6 28 1973-06-28 60 NA 31 14.9 77 6 29 1973-06-29 61 NA 138 8.0 83 6 30 1973-06-30 62 135 269 4.1 84 7 1 1973-07-01 63 49 248 9.2 85 7 2 1973-07-02 64 32 236 9.2 81 7 3 1973-07-03 65 NA 101 10.9 84 7 4 1973-07-04 66 64 175 4.6 83 7 5 1973-07-05 67 40 314 10.9 83 7 6 1973-07-06 68 77 276 5.1 88 7 7 1973-07-07 69 97 267 6.3 92 7 8 1973-07-08 70 97 272 5.7 92 7 9 1973-07-09 71 85 175 7.4 89 7 10 1973-07-10 72 NA 139 8.6 82 7 11 1973-07-11 73 10 264 14.3 73 7 12 1973-07-12 74 27 175 14.9 81 7 13 1973-07-13 75 NA 291 14.9 91 7 14 1973-07-14 76 7 48 14.3 80 7 15 1973-07-15 77 48 260 6.9 81 7 16 1973-07-16 78 35 274 10.3 82 7 17 1973-07-17 79 61 285 6.3 84 7 18 1973-07-18 80 79 187 5.1 87 7 19 1973-07-19 81 63 220 11.5 85 7 20 1973-07-20 82 16 7 6.9 74 7 21 1973-07-21 83 NA 258 9.7 81 7 22 1973-07-22 84 NA 295 11.5 82 7 23 1973-07-23 85 80 294 8.6 86 7 24 1973-07-24 86 108 223 8.0 85 7 25 1973-07-25 87 20 81 8.6 82 7 26 1973-07-26 88 52 82 12.0 86 7 27 1973-07-27 89 82 213 7.4 88 7 28 1973-07-28 90 50 275 7.4 86 7 29 1973-07-29 91 64 253 7.4 83 7 30 1973-07-30 92 59 254 9.2 81 7 31 1973-07-31 93 39 83 6.9 81 8 1 1973-08-01 94 9 24 13.8 81 8 2 1973-08-02 95 16 77 7.4 82 8 3 1973-08-03 96 78 NA 6.9 86 8 4 1973-08-04 97 35 NA 7.4 85 8 5 1973-08-05 98 66 NA 4.6 87 8 6 1973-08-06 99 122 255 4.0 89 8 7 1973-08-07 100 89 229 10.3 90 8 8 1973-08-08 101 110 207 8.0 90 8 9 1973-08-09 102 NA 222 8.6 92 8 10 1973-08-10 103 NA 137 11.5 86 8 11 1973-08-11 104 44 192 11.5 86 8 12 1973-08-12 105 28 273 11.5 82 8 13 1973-08-13 106 65 157 9.7 80 8 14 1973-08-14 107 NA 64 11.5 79 8 15 1973-08-15 108 22 71 10.3 77 8 16 1973-08-16 109 59 51 6.3 79 8 17 1973-08-17 110 23 115 7.4 76 8 18 1973-08-18 111 31 244 10.9 78 8 19 1973-08-19 112 44 190 10.3 78 8 20 1973-08-20 113 21 259 15.5 77 8 21 1973-08-21 114 9 36 14.3 72 8 22 1973-08-22 115 NA 255 12.6 75 8 23 1973-08-23 116 45 212 9.7 79 8 24 1973-08-24 117 168 238 3.4 81 8 25 1973-08-25 118 73 215 8.0 86 8 26 1973-08-26 119 NA 153 5.7 88 8 27 1973-08-27 120 76 203 9.7 97 8 28 1973-08-28 121 118 225 2.3 94 8 29 1973-08-29 122 84 237 6.3 96 8 30 1973-08-30 123 85 188 6.3 94 8 31 1973-08-31 124 96 167 6.9 91 9 1 1973-09-01 125 78 197 5.1 92 9 2 1973-09-02 126 73 183 2.8 93 9 3 1973-09-03 127 91 189 4.6 93 9 4 1973-09-04 128 47 95 7.4 87 9 5 1973-09-05 129 32 92 15.5 84 9 6 1973-09-06 130 20 252 10.9 80 9 7 1973-09-07 131 23 220 10.3 78 9 8 1973-09-08 132 21 230 10.9 75 9 9 1973-09-09 133 24 259 9.7 73 9 10 1973-09-10 134 44 236 14.9 81 9 11 1973-09-11 135 21 259 15.5 76 9 12 1973-09-12 136 28 238 6.3 77 9 13 1973-09-13 137 9 24 10.9 71 9 14 1973-09-14 138 13 112 11.5 71 9 15 1973-09-15 139 46 237 6.9 78 9 16 1973-09-16 140 18 224 13.8 67 9 17 1973-09-17 141 13 27 10.3 76 9 18 1973-09-18 142 24 238 10.3 68 9 19 1973-09-19 [ reached &#39;max&#39; / getOption(&quot;max.print&quot;) -- omitted 11 rows ]   19.6 Listas Scripts usados: script10.R: datos estructurados. Ver en https://github.com/Crisben/uleam-stat24/tree/main/scripts/script10.R (haz click en las flechas para ver soluciones) Ejercicio 1: define una lista de 4 elementos de tipos distintos y accede al segundo de ellos (yo incluiré uno que sea un data.frame para que veas que en una lista cabe de todo). Solución: # Ejemplo: lista con texto, numérico, lógico y un data.frame lista_ejemplo &lt;- list(&quot;nombre&quot; = &quot;Javier&quot;, &quot;cp&quot; = 28019, &quot;soltero&quot; = TRUE, &quot;notas&quot; = data.frame(&quot;mates&quot; = c(7.5, 8, 9), &quot;lengua&quot; = c(10, 5, 6))) lista_ejemplo $nombre [1] &quot;Javier&quot; $cp [1] 28019 $soltero [1] TRUE $notas mates lengua 1 7.5 10 2 8.0 5 3 9.0 6 # Longitud length(lista_ejemplo) [1] 4 # Accedemos al elemento dos lista_ejemplo[[2]] [1] 28019   Ejercicio 2: accede a los elementos que ocupan los lugares 1 y 4 de la lista definida anteriormente. Solución: # Accedemos al 1 y al 4 lista_ejemplo[c(1, 4)] $nombre [1] &quot;Javier&quot; $notas mates lengua 1 7.5 10 2 8.0 5 3 9.0 6 Otra opción es acceder con los nombres # Accedemos al 1 y al 4 lista_ejemplo$nombre [1] &quot;Javier&quot; lista_ejemplo$notas mates lengua 1 7.5 10 2 8.0 5 3 9.0 6 lista_ejemplo[c(&quot;nombre&quot;, &quot;notas&quot;)] $nombre [1] &quot;Javier&quot; $notas mates lengua 1 7.5 10 2 8.0 5 3 9.0 6   Ejercicio 3: define una lista de 4 elementos que contenga, en una sola variable, tu nombre, apellido, edad y si estás soltero/a. Solución: # Creamos lista: con lubridate calculamos la diferencia de años desde la fecha de nuestro nacimiento hasta hoy (sea cuando sea hoy) lista_personal &lt;- list(&quot;nombre&quot; = &quot;Cristian&quot;, &quot;apellidos&quot; = &quot;Crisben&quot;, &quot;edad&quot; = 32, &quot;soltero&quot; = TRUE) lista_personal $nombre [1] &quot;Cristian&quot; $apellidos [1] &quot;Crisben&quot; $edad [1] 32 $soltero [1] TRUE 19.7 Estructuras if-else Scripts usados: script11.R: if-else. Ver en https://github.com/Crisben/uleam-stat24/tree/main/scripts/script11.R (haz click en las flechas para ver soluciones) Ejercicio 1: modifica el código inferior para imprimir un mensaje por pantalla si todos los datos del conjunto airquality son de meses que no sean enero. # install.packages(&quot;dataset&quot;) # solo la primera vez library(datasets) # paquete con los datos mes &lt;- airquality$Month if (mes == 2) { print(&quot;Ningún dato es del mes de enero&quot;) } Solución: # install.packages(&quot;dataset&quot;) # solo la primera vez library(datasets) # paquete con los datos mes &lt;- airquality$Month if (all(mes != 1)) { # todos con mes distinto de 1 print(&quot;Ningún dato es del mes de enero&quot;) } [1] &quot;Ningún dato es del mes de enero&quot;   Ejercicio 2: modifica el código inferior para guardar en una variable temperatura_alta un valor TRUE si alguno de los registros tiene una temperatura mayor a 90 (están en Farenheit) y un FALSE en caso contrario. temperatura &lt;- airquality$Temp if (temperatura == 100) { print(&quot;Alguno de los registros tiene temperatura superior a 90 Farenheit&quot;) } Solución: temperatura &lt;- airquality$Temp temperatura_alta &lt;- FALSE # por defecto FALSE if (any(temperatura &gt; 90)) { temperatura_alta &lt;- TRUE # si se cumple la condición, a TRUE }   Ejercicio 3: modifica el código inferior para imprimir un mensaje por pantalla si alguno de los días supera la temperatura de 100. temperatura &lt;- airquality$Temp if (all(temperatura &lt; 50)) { print(&quot;Alguno de los registros tiene temperatura superior a 100 Farenheit&quot;) } Solución: temperatura &lt;- airquality$Temp if (any(temperatura &gt; 100)) { # nos basta con uno print(&quot;Alguno de los registros tiene temperatura superior a 100 Farenheit&quot;) } No debería imprimar nada porque ninguno cumple la condición.   Ejercicio 4: del paquete {lubridate}, la función hour() nos devuelve la hora de una fecha dada, y la función now() nos devuelve fecha y hora del momento actual. Con ambas funciones, y usando if, imprime por pantalla \"buenas noches\" solo a partir de las 21 horas. Solución: # Cargamos librería library(lubridate) # Fecha-hora actual fecha_actual &lt;- now() # Estructura if if (hour(fecha_actual) &gt; 21) { cat(&quot;Buenas noches&quot;) # print/cat dos formas de imprimir por pantalla }   Ejercicio 5: con las funciones del ejercicio anterior, y usando una estructura if-else, imprime por pantalla \"buenos días\" (de 6 a 14 horas), \"buenas tardes\" (de 14 a 21 horas) o \"buenas noches\" (de las 21 a las 6 horas). Solución: # Fecha actual fecha_actual &lt;- now() # Estructura if-else if (hour(fecha_actual) &gt; 6 &amp; hour(fecha_actual) &lt; 14) { cat(&quot;Buenos días&quot;) } else if (hour(fecha_actual) &gt; 14 &amp; hour(fecha_actual) &lt; 21) { cat(&quot;Buenas tardes&quot;) } else { cat(&quot;Buenas noches&quot;) } Buenas noches   Ejercicio 6: realiza el ejercicio anterior pero sin estructura de llaves, de forma concisa con ifelse(). Mira la ayuda si la necesitases poniendo ? ifelse en consola. Solución: # Fecha actual fecha_actual &lt;- now() # Estructura if-else cat(ifelse(hour(fecha_actual) &gt; 6 &amp; hour(fecha_actual) &lt; 14, &quot;Buenos días&quot;, ifelse(hour(fecha_actual) &gt; 14 &amp; hour(fecha_actual) &lt; 21, &quot;Buenas tardes&quot;, &quot;Buenas noches&quot;))) Buenas noches   19.8 Estructuras for y while Scripts usados: script12.R: bucles. Ver en https://github.com/Crisben/uleam-stat24/tree/main/scripts/script12.R (haz click en las flechas para ver soluciones) Ejercicio 1: modifica el código interior para diseñar un bucle for de 5 iteraciones que recorra los 5 primeros impares y les sume uno. for (i in 1:5) { print(i) } [1] 1 [1] 2 [1] 3 [1] 4 [1] 5 Solución: # Una forma for (i in seq(1, 9, by = 2)) { print(i + 1) } [1] 2 [1] 4 [1] 6 [1] 8 [1] 10 # Otra for (i in c(1, 3, 5, 7, 9)) { print(i + 1) } [1] 2 [1] 4 [1] 6 [1] 8 [1] 10   Ejercicio 2: modifica el código interior para diseñar un bucle while que parta con una variable conteo &lt;- 1 y pare cuando llegue a 6. conteo &lt;- 1 while (conteo == 2) { print(conteo) } Solución: conteo &lt;- 1 while (conteo &lt; 6) { print(conteo) conteo &lt;- conteo &lt;- conteo + 1 } [1] 1 [1] 2 [1] 3 [1] 4 [1] 5   Ejercicio 3: construye un bucle que recorra las primeras 8 filas del conjunto de datos datasets::airquality y que imprima un mensaje con la temperatura Solución: for (i in 1:8) { print(glue(&quot;La temperatura es de {airquality$Temp[i]}ºF&quot;)) } La temperatura es de 67ºF La temperatura es de 72ºF La temperatura es de 74ºF La temperatura es de 62ºF La temperatura es de 56ºF La temperatura es de 66ºF La temperatura es de 65ºF La temperatura es de 59ºF   Ejercicio 4: diseña un bucle for de 200 iteraciones que, empezando en un valor inicial de 100 (euros), te sume 3€ si el número actual es par y te reste 5€ si es impar. Un número par o impar: un número par será todo aquel número que al dividir entre 2, la división es exacta, es decir, que su resto es nulo. Por ejemplo, al dividir 5 entre 2, el resto es 1, pero al dividir 12 entre 2 el resto es 0. Para calcula ese resto usaremos la función %%. 5 %% 2 [1] 1 12 %% 2 [1] 0 23 %% 2 [1] 1 46 %% 2 [1] 0 Solución: # dinero inicial dinero &lt;- 100 # Bucle for for (i in 1:200) { dinero &lt;- ifelse(dinero %% 2 == 0, dinero + 3, dinero - 5) } dinero [1] -100   Ejercicio 5: diseña el anterior bucle pero guardando el dinero de cada iteración. Solución: # vector de importes dinero &lt;- rep(0, 201) dinero[1] &lt;- 100 # dinero inicial # Bucle for for (i in 2:201) { # si dinero[i - 1] es par o impar dinero[i] &lt;- ifelse(dinero[i - 1] %% 2 == 0, dinero[i - 1] + 3, dinero[i - 1] - 5) } dinero [1] 100 103 98 101 96 99 94 97 92 95 90 93 88 91 86 89 84 87 82 85 80 83 78 81 76 79 [27] 74 77 72 75 70 73 68 71 66 69 64 67 62 65 60 63 58 61 56 59 54 57 52 55 50 53 [53] 48 51 46 49 44 47 42 45 40 43 38 41 36 39 34 37 32 35 30 33 28 31 26 29 24 27 [79] 22 25 20 23 18 21 16 19 14 17 12 15 10 13 8 11 6 9 4 7 2 5 0 3 -2 1 [105] -4 -1 -6 -3 -8 -5 -10 -7 -12 -9 -14 -11 -16 -13 -18 -15 -20 -17 -22 -19 -24 -21 -26 -23 -28 -25 [131] -30 -27 -32 -29 -34 -31 -36 -33 -38 -35 -40 -37 -42 -39 -44 -41 -46 -43 -48 -45 -50 -47 -52 -49 -54 -51 [157] -56 -53 -58 -55 -60 -57 -62 -59 -64 -61 -66 -63 -68 -65 -70 -67 -72 -69 -74 -71 -76 -73 -78 -75 -80 -77 [183] -82 -79 -84 -81 -86 -83 -88 -85 -90 -87 -92 -89 -94 -91 -96 -93 -98 -95 -100   Ejercicio 6: diseña el bucle del ejercicio 4 parando cuando no nos quede dinero. Solución: dinero &lt;- 100 # dinero inicial # Bucle while while (dinero &gt; 0) { dinero &lt;- ifelse(dinero %% 2 == 0, dinero + 3, dinero - 5) } dinero [1] 0 19.9 Funciones Scripts usados: script13.R: funciones. Ver en https://github.com/Crisben/uleam-stat24/tree/main/scripts/script13.R (haz click en las flechas para ver soluciones) Ejercicio 1: modifica el código inferior para definir una función llamada funcion_suma, de forma que dados dos elementos, devuelve su suma. # Definimos función nombre &lt;- function(x, y) { # Sumamos suma &lt;- # código a ejecutar # ¿Qué devolvemos? return() } # Aplicamos la función suma(3, 7) Solución: # Definimos función funcion_suma &lt;- function(x, y) { # Sumamos suma &lt;- x + y # Devolvemos la salida return(suma) } # Aplicamos la función funcion_suma(3, 7) [1] 10 &amp;nsbp; Ejercicio 2: modifica el código inferior para definir una función llamada funcion_producto, de forma que dados dos elementos, devuelve su producto. # Definimos función nombre &lt;- function(x, y) { # Multiplicamos producto &lt;- # código de la multiplicación # ¿Qué devolvemos? return() } # Aplicamos la función producto(3, -7) Solución: # Definimos función funcion_producto &lt;- function(x, y) { # Multiplicamos producto &lt;- x * y # Devolvemos la salida return(producto) } # Aplicamos la función funcion_producto(3, -7) [1] -21   Ejercicio 3: modifica el código inferior para definir una función llamada funcion_producto, de forma que dados dos elementos, devuelve su producto, pero que por defecto calcule el cuadrado (es decir, por defecto un solo argumento, y el resultado sea el número por sí mismo) # Definimos función nombre &lt;- function(x, y) { # Multiplicamos producto &lt;- # código de la multiplicación # ¿Qué devolvemos? return() } # Aplicamos la función solo con un argumento producto(3) # Aplicamos la función con dos argumentos producto(3, -7) Solución: # Definimos función funcion_producto &lt;- function(x, y = x) { # Multiplicamos producto &lt;- x * y # Devolvemos la salida return(producto) } # Aplicamos la función funcion_producto(3) # por defecto x = 3, y = 3 [1] 9 funcion_producto(3, -7) [1] -21   Ejercicio 4: define una función llamada igualdad_nombres que, dados dos nombres persona_1 e persona_2, nos diga si son iguales o no. Hazlo considerando importantes las mayúsculas, y sin que importen las mayúsculas. Recuerda que con toupper() podemos pasar todo un texto a mayúscula. Solución: # Distinguiendo mayúsculas igualdad_nombres &lt;- function(persona_1, persona_2) { return(persona_1 == persona_2) } igualdad_nombres(&quot;Javi&quot;, &quot;javi&quot;) [1] FALSE igualdad_nombres(&quot;Javi&quot;, &quot;Lucía&quot;) [1] FALSE # Sin importar mayúsculas igualdad_nombres &lt;- function(persona_1, persona_2) { return(toupper(persona_1) == toupper(persona_2)) } igualdad_nombres(&quot;Javi&quot;, &quot;javi&quot;) [1] TRUE igualdad_nombres(&quot;Javi&quot;, &quot;Lucía&quot;) [1] FALSE   Ejercicio 5: define una función llamada pares que, dados dos números x e y, nos diga si la suma de ambos es par o no. Recuerda que con %% podemos obtener el resto de un número al dividir entre 2. 2 %% 2 # par, resto 0 [1] 0 3 %% 2 # impar, resto 1 [1] 1 Solución: # Definimos función pares &lt;- function(x, y) { # Sumamos suma &lt;- x + y # Comprobamos si es par par &lt;- suma %% 2 == 0 # Devolvemos la salida return(par) } # Aplicamos la función pares(1, 3) # suma 4 (par) [1] TRUE pares(2, 7) # suma 9 (impar) [1] FALSE   Ejercicio 6: define una función llamada pasar_a_celsius que, dada una temperatura \\(x\\) en Fahrenheit, la convierta a grados Celsius (\\(ºC = (ºF - 32) * \\frac{5}{9}\\)). Aplica la función a la columna Temp del conjunto airquality, e incorpórala al fichero en una nueva columna Temp_Celsius. Solución: # Definimos función pasar_a_celsius &lt;- function(x) { # Temperatura en Celsius x_celsius &lt;- (x - 32) * (5 / 9) # Devolvemos la salida return(x_celsius) } # Aplicamos la función pasar_a_celsius(0) [1] -17.77778 pasar_a_celsius(80) [1] 26.66667 # Aplicamos data.frame(airquality, &quot;Temp_Celsius&quot; = pasar_a_celsius(airquality$Temp)) Ozone Solar.R Wind Temp Month Day Temp_Celsius 1 41 190 7.4 67 5 1 19.44444 2 36 118 8.0 72 5 2 22.22222 3 12 149 12.6 74 5 3 23.33333 4 18 313 11.5 62 5 4 16.66667 5 NA NA 14.3 56 5 5 13.33333 6 28 NA 14.9 66 5 6 18.88889 7 23 299 8.6 65 5 7 18.33333 8 19 99 13.8 59 5 8 15.00000 9 8 19 20.1 61 5 9 16.11111 10 NA 194 8.6 69 5 10 20.55556 11 7 NA 6.9 74 5 11 23.33333 12 16 256 9.7 69 5 12 20.55556 13 11 290 9.2 66 5 13 18.88889 14 14 274 10.9 68 5 14 20.00000 15 18 65 13.2 58 5 15 14.44444 16 14 334 11.5 64 5 16 17.77778 17 34 307 12.0 66 5 17 18.88889 18 6 78 18.4 57 5 18 13.88889 19 30 322 11.5 68 5 19 20.00000 20 11 44 9.7 62 5 20 16.66667 21 1 8 9.7 59 5 21 15.00000 22 11 320 16.6 73 5 22 22.77778 23 4 25 9.7 61 5 23 16.11111 24 32 92 12.0 61 5 24 16.11111 25 NA 66 16.6 57 5 25 13.88889 26 NA 266 14.9 58 5 26 14.44444 27 NA NA 8.0 57 5 27 13.88889 28 23 13 12.0 67 5 28 19.44444 29 45 252 14.9 81 5 29 27.22222 30 115 223 5.7 79 5 30 26.11111 31 37 279 7.4 76 5 31 24.44444 32 NA 286 8.6 78 6 1 25.55556 33 NA 287 9.7 74 6 2 23.33333 34 NA 242 16.1 67 6 3 19.44444 35 NA 186 9.2 84 6 4 28.88889 36 NA 220 8.6 85 6 5 29.44444 37 NA 264 14.3 79 6 6 26.11111 38 29 127 9.7 82 6 7 27.77778 39 NA 273 6.9 87 6 8 30.55556 40 71 291 13.8 90 6 9 32.22222 41 39 323 11.5 87 6 10 30.55556 42 NA 259 10.9 93 6 11 33.88889 43 NA 250 9.2 92 6 12 33.33333 44 23 148 8.0 82 6 13 27.77778 45 NA 332 13.8 80 6 14 26.66667 46 NA 322 11.5 79 6 15 26.11111 47 21 191 14.9 77 6 16 25.00000 48 37 284 20.7 72 6 17 22.22222 49 20 37 9.2 65 6 18 18.33333 50 12 120 11.5 73 6 19 22.77778 51 13 137 10.3 76 6 20 24.44444 52 NA 150 6.3 77 6 21 25.00000 53 NA 59 1.7 76 6 22 24.44444 54 NA 91 4.6 76 6 23 24.44444 55 NA 250 6.3 76 6 24 24.44444 56 NA 135 8.0 75 6 25 23.88889 57 NA 127 8.0 78 6 26 25.55556 58 NA 47 10.3 73 6 27 22.77778 59 NA 98 11.5 80 6 28 26.66667 60 NA 31 14.9 77 6 29 25.00000 61 NA 138 8.0 83 6 30 28.33333 62 135 269 4.1 84 7 1 28.88889 63 49 248 9.2 85 7 2 29.44444 64 32 236 9.2 81 7 3 27.22222 65 NA 101 10.9 84 7 4 28.88889 66 64 175 4.6 83 7 5 28.33333 67 40 314 10.9 83 7 6 28.33333 68 77 276 5.1 88 7 7 31.11111 69 97 267 6.3 92 7 8 33.33333 70 97 272 5.7 92 7 9 33.33333 71 85 175 7.4 89 7 10 31.66667 72 NA 139 8.6 82 7 11 27.77778 73 10 264 14.3 73 7 12 22.77778 74 27 175 14.9 81 7 13 27.22222 75 NA 291 14.9 91 7 14 32.77778 76 7 48 14.3 80 7 15 26.66667 77 48 260 6.9 81 7 16 27.22222 78 35 274 10.3 82 7 17 27.77778 79 61 285 6.3 84 7 18 28.88889 80 79 187 5.1 87 7 19 30.55556 81 63 220 11.5 85 7 20 29.44444 82 16 7 6.9 74 7 21 23.33333 83 NA 258 9.7 81 7 22 27.22222 84 NA 295 11.5 82 7 23 27.77778 85 80 294 8.6 86 7 24 30.00000 86 108 223 8.0 85 7 25 29.44444 87 20 81 8.6 82 7 26 27.77778 88 52 82 12.0 86 7 27 30.00000 89 82 213 7.4 88 7 28 31.11111 90 50 275 7.4 86 7 29 30.00000 91 64 253 7.4 83 7 30 28.33333 92 59 254 9.2 81 7 31 27.22222 93 39 83 6.9 81 8 1 27.22222 94 9 24 13.8 81 8 2 27.22222 95 16 77 7.4 82 8 3 27.77778 96 78 NA 6.9 86 8 4 30.00000 97 35 NA 7.4 85 8 5 29.44444 98 66 NA 4.6 87 8 6 30.55556 99 122 255 4.0 89 8 7 31.66667 100 89 229 10.3 90 8 8 32.22222 101 110 207 8.0 90 8 9 32.22222 102 NA 222 8.6 92 8 10 33.33333 103 NA 137 11.5 86 8 11 30.00000 104 44 192 11.5 86 8 12 30.00000 105 28 273 11.5 82 8 13 27.77778 106 65 157 9.7 80 8 14 26.66667 107 NA 64 11.5 79 8 15 26.11111 108 22 71 10.3 77 8 16 25.00000 109 59 51 6.3 79 8 17 26.11111 110 23 115 7.4 76 8 18 24.44444 111 31 244 10.9 78 8 19 25.55556 112 44 190 10.3 78 8 20 25.55556 113 21 259 15.5 77 8 21 25.00000 114 9 36 14.3 72 8 22 22.22222 115 NA 255 12.6 75 8 23 23.88889 116 45 212 9.7 79 8 24 26.11111 117 168 238 3.4 81 8 25 27.22222 118 73 215 8.0 86 8 26 30.00000 119 NA 153 5.7 88 8 27 31.11111 120 76 203 9.7 97 8 28 36.11111 121 118 225 2.3 94 8 29 34.44444 122 84 237 6.3 96 8 30 35.55556 123 85 188 6.3 94 8 31 34.44444 124 96 167 6.9 91 9 1 32.77778 125 78 197 5.1 92 9 2 33.33333 126 73 183 2.8 93 9 3 33.88889 127 91 189 4.6 93 9 4 33.88889 128 47 95 7.4 87 9 5 30.55556 129 32 92 15.5 84 9 6 28.88889 130 20 252 10.9 80 9 7 26.66667 131 23 220 10.3 78 9 8 25.55556 132 21 230 10.9 75 9 9 23.88889 133 24 259 9.7 73 9 10 22.77778 134 44 236 14.9 81 9 11 27.22222 135 21 259 15.5 76 9 12 24.44444 136 28 238 6.3 77 9 13 25.00000 137 9 24 10.9 71 9 14 21.66667 138 13 112 11.5 71 9 15 21.66667 139 46 237 6.9 78 9 16 25.55556 140 18 224 13.8 67 9 17 19.44444 141 13 27 10.3 76 9 18 24.44444 142 24 238 10.3 68 9 19 20.00000 [ reached &#39;max&#39; / getOption(&quot;max.print&quot;) -- omitted 11 rows ]   19.10 Practica final Scripts usados: script16.R: practica final. Ver en https://github.com/Crisben/uleam-stat24/tree/main/scripts/script16.R (haz click en las flechas para ver soluciones) Ejercicio 1: carga el fichero titanic.RData que tienes en la carpeta datos https://github.com/dadosdelaplace/courses-intro-r/tree/main/datos. Solución: load(&quot;./datos/titanic.RData&quot;) &amp;nsbp; Ejercicio 2: obtén el número de individuos y de variables de nuestro dataset Solución: ncol(titanic) # variables [1] 12 nrow(titanic) # individuos [1] 891 &amp;nsbp; Ejercicio 3: ¿de qué tipo es la variable Name? ¿Y la variable Pclass? ¿Y la variable Age? ¿Y la variable Survived Solución: class(titanic$Name) [1] &quot;character&quot; class(titanic$Pclass) [1] &quot;integer&quot; class(titanic$Age) [1] &quot;numeric&quot; class(titanic$Survived) [1] &quot;integer&quot; &amp;nsbp; Ejercicio 4: internamente tenemos 0 y 1 pero la variable Survived en realidad debería ser variable lógica (TRUE si sobrevivió). Modifica la variable para ponter TRUE cuando vale 1 y FALSE en caso contrario Solución: # Modo ifelse titanic$Survived &lt;- ifelse(titanic$Survived == 1, TRUE, FALSE) # otra forma: modo bucle + if load(&quot;./datos/titanic.RData&quot;) nueva_variable &lt;- rep(FALSE, length(titanic$Survived)) for (i in 1:length(titanic$Survived)) { if (titanic$Survived[i] == 1) { nueva_variable[i] &lt;- TRUE } } titanic$Survived &lt;- nueva_variable &amp;nsbp; Ejercicio 5: en la variable Name tenemos guardado el nombre de los pasajeros, pero también su título (Mr., Mrs, Miss, etc). Extrae los nombres de las personas con Miss. Solución: library(stringr) # Con str_detect obtenemos un TRUE/FALSE titanic$Name[str_detect(titanic$Name, pattern = &quot;Miss.&quot;)] [1] &quot;Heikkinen, Miss. Laina&quot; [2] &quot;Sandstrom, Miss. Marguerite Rut&quot; [3] &quot;Bonnell, Miss. Elizabeth&quot; [4] &quot;Vestrom, Miss. Hulda Amanda Adolfina&quot; [5] &quot;McGowan, Miss. Anna \\&quot;Annie\\&quot;&quot; [6] &quot;Palsson, Miss. Torborg Danira&quot; [7] &quot;O&#39;Dwyer, Miss. Ellen \\&quot;Nellie\\&quot;&quot; [8] &quot;Glynn, Miss. Mary Agatha&quot; [9] &quot;Vander Planke, Miss. Augusta Maria&quot; [10] &quot;Nicola-Yarred, Miss. Jamila&quot; [11] &quot;Laroche, Miss. Simonne Marie Anne Andree&quot; [12] &quot;Devaney, Miss. Margaret Delia&quot; [13] &quot;O&#39;Driscoll, Miss. Bridget&quot; [14] &quot;Rugg, Miss. Emily&quot; [15] &quot;West, Miss. Constance Mirium&quot; [16] &quot;Icard, Miss. Amelie&quot; [17] &quot;Andersson, Miss. Erna Alexandra&quot; [18] &quot;Goodwin, Miss. Lillian Amy&quot; [19] &quot;Dowdell, Miss. Elizabeth&quot; [20] &quot;McDermott, Miss. Brigdet Delia&quot; [21] &quot;Ilett, Miss. Bertha&quot; [22] &quot;Fortune, Miss. Mabel Helen&quot; [23] &quot;Petranec, Miss. Matilda&quot; [24] &quot;Salkjelsvik, Miss. Anna Kristine&quot; [25] &quot;Moran, Miss. Bertha&quot; [26] &quot;Zabour, Miss. Hileni&quot; [27] &quot;Jussila, Miss. Katriina&quot; [28] &quot;Attalah, Miss. Malake&quot; [29] &quot;Andersson, Miss. Ellis Anna Maria&quot; [30] &quot;Webber, Miss. Susan&quot; [31] &quot;Peter, Miss. Anna&quot; [32] &quot;Newsom, Miss. Helen Monypeny&quot; [33] &quot;Nysten, Miss. Anna Sofia&quot; [34] &quot;Ford, Miss. Robina Maggie \\&quot;Ruby\\&quot;&quot; [35] &quot;Gilnagh, Miss. Katherine \\&quot;Katie\\&quot;&quot; [36] &quot;Johnson, Miss. Eleanor Ileen&quot; [37] &quot;Isham, Miss. Ann Elizabeth&quot; [38] &quot;Sage, Miss. Constance Gladys&quot; [39] &quot;Kink-Heilmann, Miss. Luise Gretchen&quot; [40] &quot;Andersen-Jensen, Miss. Carla Christine Nielsine&quot; [41] &quot;Lurette, Miss. Elise&quot; [42] &quot;Madigan, Miss. Margaret \\&quot;Maggie\\&quot;&quot; [43] &quot;Yrois, Miss. Henriette (\\&quot;Mrs Harbeck\\&quot;)&quot; [44] &quot;Strom, Miss. Telma Matilda&quot; [45] &quot;Carr, Miss. Helen \\&quot;Ellen\\&quot;&quot; [46] &quot;Cameron, Miss. Clear Annie&quot; [47] &quot;Newell, Miss. Madeleine&quot; [48] &quot;Honkanen, Miss. Eliina&quot; [49] &quot;Bazzani, Miss. Albina&quot; [50] &quot;Lefebre, Miss. Mathilde&quot; [51] &quot;Asplund, Miss. Lillian Gertrud&quot; [52] &quot;Harknett, Miss. Alice Phoebe&quot; [53] &quot;Collyer, Miss. Marjorie \\&quot;Lottie\\&quot;&quot; [54] &quot;Zabour, Miss. Thamine&quot; [55] &quot;Murphy, Miss. Katherine \\&quot;Kate\\&quot;&quot; [56] &quot;Lindahl, Miss. Agda Thorilda Viktoria&quot; [57] &quot;Cherry, Miss. Gladys&quot; [58] &quot;Ward, Miss. Anna&quot; [59] &quot;Henry, Miss. Delia&quot; [60] &quot;Bissette, Miss. Amelia&quot; [61] &quot;Healy, Miss. Hanora \\&quot;Nora\\&quot;&quot; [62] &quot;Andrews, Miss. Kornelia Theodosia&quot; [63] &quot;Lindblom, Miss. Augusta Charlotta&quot; [64] &quot;Connolly, Miss. Kate&quot; [65] &quot;Barber, Miss. Ellen \\&quot;Nellie\\&quot;&quot; [66] &quot;Haas, Miss. Aloisia&quot; [67] &quot;Allison, Miss. Helen Loraine&quot; [68] &quot;Kelly, Miss. Anna Katherine \\&quot;Annie Kate\\&quot;&quot; [69] &quot;Keane, Miss. Nora A&quot; [70] &quot;Fleming, Miss. Margaret&quot; [71] &quot;Francatelli, Miss. Laura Mabel&quot; [72] &quot;Hays, Miss. Margaret Bechstein&quot; [73] &quot;Ryerson, Miss. Emily Borie&quot; [74] &quot;Nilsson, Miss. Helmina Josefina&quot; [75] &quot;Wick, Miss. Mary Natalie&quot; [76] &quot;Slayter, Miss. Hilda Mary&quot; [77] &quot;Young, Miss. Marie Grice&quot; [78] &quot;Hippach, Miss. Jean Gertrude&quot; [79] &quot;McCoy, Miss. Agnes&quot; [80] &quot;Burns, Miss. Elizabeth Margaret&quot; [81] &quot;Fortune, Miss. Alice Elizabeth&quot; [82] &quot;Brown, Miss. Amelia \\&quot;Mildred\\&quot;&quot; [83] &quot;Smith, Miss. Marion Elsie&quot; [84] &quot;Bowerman, Miss. Elsie Edith&quot; [85] &quot;Funk, Miss. Annie Clemmer&quot; [86] &quot;McGovern, Miss. Mary&quot; [87] &quot;Mockler, Miss. Helen Mary \\&quot;Ellie\\&quot;&quot; [88] &quot;Jermyn, Miss. Annie&quot; [89] &quot;Palsson, Miss. Stina Viola&quot; [90] &quot;Landergren, Miss. Aurora Adelia&quot; [91] &quot;Bidois, Miss. Rosalie&quot; [92] &quot;Nakid, Miss. Maria (\\&quot;Mary\\&quot;)&quot; [93] &quot;Buss, Miss. Kate&quot; [94] &quot;Lehmann, Miss. Bertha&quot; [95] &quot;Newell, Miss. Marjorie&quot; [96] &quot;Olsson, Miss. Elina&quot; [97] &quot;Jussila, Miss. Mari Aina&quot; [98] &quot;Oreskovic, Miss. Marija&quot; [99] &quot;Lefebre, Miss. Ida&quot; [100] &quot;Minahan, Miss. Daisy E&quot; [101] &quot;Silven, Miss. Lyyli Karoliina&quot; [102] &quot;Van Impe, Miss. Catharina&quot; [103] &quot;Phillips, Miss. Kate Florence (\\&quot;Mrs Kate Louise Phillips Marshall\\&quot;)&quot; [104] &quot;Carter, Miss. Lucile Polk&quot; [105] &quot;Ford, Miss. Doolina Margaret \\&quot;Daisy\\&quot;&quot; [106] &quot;Mellinger, Miss. Madeleine Violet&quot; [107] &quot;Baclini, Miss. Marie Catherine&quot; [108] &quot;Toomey, Miss. Ellen&quot; [109] &quot;Baclini, Miss. Helene Barbara&quot; [110] &quot;Strandberg, Miss. Ida Sofia&quot; [111] &quot;Hirvonen, Miss. Hildur E&quot; [112] &quot;Lefebre, Miss. Jeannie&quot; [113] &quot;Eustis, Miss. Elizabeth Mussey&quot; [114] &quot;Canavan, Miss. Mary&quot; [115] &quot;O&#39;Sullivan, Miss. Bridget Mary&quot; [116] &quot;Laitinen, Miss. Kristina Sofia&quot; [117] &quot;Maioni, Miss. Roberta&quot; [118] &quot;Perreault, Miss. Anne&quot; [119] &quot;Ridsdale, Miss. Lucy&quot; [120] &quot;Quick, Miss. Phyllis May&quot; [121] &quot;Cacic, Miss. Marija&quot; [122] &quot;Hart, Miss. Eva Miriam&quot; [123] &quot;LeRoy, Miss. Bertha&quot; [124] &quot;Frolicher, Miss. Hedwig Margaritha&quot; [125] &quot;Crosby, Miss. Harriet R&quot; [126] &quot;Andersson, Miss. Ingeborg Constanzia&quot; [127] &quot;Andersson, Miss. Sigrid Elisabeth&quot; [128] &quot;Ohman, Miss. Velin&quot; [129] &quot;Meanwell, Miss. (Marion Ogden)&quot; [130] &quot;Kelly, Miss. Mary&quot; [131] &quot;Garside, Miss. Ethel&quot; [132] &quot;Christy, Miss. Julie Rachel&quot; [133] &quot;Taussig, Miss. Ruth&quot; [134] &quot;Bourke, Miss. Mary&quot; [135] &quot;Leitch, Miss. Jessie Wills&quot; [136] &quot;Shutes, Miss. Elizabeth W&quot; [137] &quot;Murphy, Miss. Margaret Jane&quot; [138] &quot;Herman, Miss. Alice&quot; [139] &quot;Becker, Miss. Marion Louise&quot; [140] &quot;Longley, Miss. Gretchen Fiske&quot; [141] &quot;Skoog, Miss. Mabel&quot; [142] &quot;Davis, Miss. Mary&quot; [143] &quot;Skoog, Miss. Margit Elizabeth&quot; [144] &quot;Baclini, Miss. Eugenie&quot; [145] &quot;Stanley, Miss. Amy Zillah Elsie&quot; [146] &quot;Doling, Miss. Elsie&quot; [147] &quot;O&#39;Leary, Miss. Hanora \\&quot;Norah\\&quot;&quot; [148] &quot;Hegarty, Miss. Hanora \\&quot;Nora\\&quot;&quot; [149] &quot;Turja, Miss. Anna Sofia&quot; [150] &quot;Peters, Miss. Katie&quot; [151] &quot;Madill, Miss. Georgette Alexandra&quot; [152] &quot;Karun, Miss. Manca&quot; [153] &quot;Mullens, Miss. Katherine \\&quot;Katie\\&quot;&quot; [154] &quot;Barbara, Miss. Saiide&quot; [155] &quot;Cleaver, Miss. Alice&quot; [156] &quot;Endres, Miss. Caroline Louise&quot; [157] &quot;Troutt, Miss. Edwina Celia \\&quot;Winnie\\&quot;&quot; [158] &quot;Harper, Miss. Annie Jessie \\&quot;Nina\\&quot;&quot; [159] &quot;Mannion, Miss. Margareth&quot; [160] &quot;Ilmakangas, Miss. Pieta Sofia&quot; [161] &quot;Allen, Miss. Elisabeth Walton&quot; [162] &quot;Ryerson, Miss. Susan Parker \\&quot;Suzette\\&quot;&quot; [163] &quot;Sinkkonen, Miss. Anna&quot; [164] &quot;Wells, Miss. Joan&quot; [165] &quot;Mangan, Miss. Mary&quot; [166] &quot;Emanuel, Miss. Virginia Ethel&quot; [167] &quot;Ayoub, Miss. Banoura&quot; [168] &quot;Sjoblom, Miss. Anna Sofia&quot; [169] &quot;Sage, Miss. Stella Anna&quot; [170] &quot;Pettersson, Miss. Ellen Natalia&quot; [171] &quot;Andersson, Miss. Ebba Iris Alfrida&quot; [172] &quot;Heininen, Miss. Wendla Maria&quot; [173] &quot;Compton, Miss. Sara Rebecca&quot; [174] &quot;Serepeca, Miss. Augusta&quot; [175] &quot;Boulos, Miss. Nourelain&quot; [176] &quot;Lines, Miss. Mary Conover&quot; [177] &quot;Sage, Miss. Dorothy Edith \\&quot;Dolly\\&quot;&quot; [178] &quot;Duran y More, Miss. Asuncion&quot; [179] &quot;Najib, Miss. Adele Kiamie \\&quot;Jane\\&quot;&quot; [180] &quot;Dahlberg, Miss. Gerda Ulrika&quot; [181] &quot;Graham, Miss. Margaret Edith&quot; [182] &quot;Johnston, Miss. Catherine Helen \\&quot;Carrie\\&quot;&quot; &amp;nsbp; Ejercicio 6: calcula la media de edad de los pasajeros del Titanic (recuerda: si hay datos ausentes…). Haz lo mismo pero por sexos (male/female) Solución: mean(titanic$Age, na.rm = TRUE) [1] 29.69912 mean(titanic$Age[titanic$Sex == &quot;male&quot;], na.rm = TRUE) [1] 30.72664 mean(titanic$Age[titanic$Sex == &quot;female&quot;], na.rm = TRUE) [1] 27.91571 &amp;nsbp; Ejercicio 7: ordena la edad de los pasajeros del Titanic de menor a mayor, y de mayor a menor Solución: sort(titanic$Age) # menor a mayor [1] 0.42 0.67 0.75 0.75 0.83 0.83 0.92 1.00 1.00 1.00 1.00 1.00 1.00 1.00 2.00 2.00 2.00 2.00 2.00 2.00 2.00 [22] 2.00 2.00 2.00 3.00 3.00 3.00 3.00 3.00 3.00 4.00 4.00 4.00 4.00 4.00 4.00 4.00 4.00 4.00 4.00 5.00 5.00 [43] 5.00 5.00 6.00 6.00 6.00 7.00 7.00 7.00 8.00 8.00 8.00 8.00 9.00 9.00 9.00 9.00 9.00 9.00 9.00 9.00 10.00 [64] 10.00 11.00 11.00 11.00 11.00 12.00 13.00 13.00 14.00 14.00 14.00 14.00 14.00 14.00 14.50 15.00 15.00 15.00 15.00 15.00 16.00 [85] 16.00 16.00 16.00 16.00 16.00 16.00 16.00 16.00 16.00 16.00 16.00 16.00 16.00 16.00 16.00 16.00 17.00 17.00 17.00 17.00 17.00 [106] 17.00 17.00 17.00 17.00 17.00 17.00 17.00 17.00 18.00 18.00 18.00 18.00 18.00 18.00 18.00 18.00 18.00 18.00 18.00 18.00 18.00 [127] 18.00 18.00 18.00 18.00 18.00 18.00 18.00 18.00 18.00 18.00 18.00 18.00 18.00 19.00 19.00 19.00 19.00 19.00 19.00 19.00 19.00 [148] 19.00 19.00 19.00 19.00 19.00 19.00 19.00 19.00 19.00 19.00 19.00 19.00 19.00 19.00 19.00 19.00 19.00 20.00 20.00 20.00 20.00 [169] 20.00 20.00 20.00 20.00 20.00 20.00 20.00 20.00 20.00 20.00 20.00 20.50 21.00 21.00 21.00 21.00 21.00 21.00 21.00 21.00 21.00 [190] 21.00 21.00 21.00 21.00 21.00 21.00 21.00 21.00 21.00 21.00 21.00 21.00 21.00 21.00 21.00 22.00 22.00 22.00 22.00 22.00 22.00 [211] 22.00 22.00 22.00 22.00 22.00 22.00 22.00 22.00 22.00 22.00 22.00 22.00 22.00 22.00 22.00 22.00 22.00 22.00 22.00 22.00 22.00 [232] 23.00 23.00 23.00 23.00 23.00 23.00 23.00 23.00 23.00 23.00 23.00 23.00 23.00 23.00 23.00 23.50 24.00 24.00 24.00 24.00 24.00 [253] 24.00 24.00 24.00 24.00 24.00 24.00 24.00 24.00 24.00 24.00 24.00 24.00 24.00 24.00 24.00 24.00 24.00 24.00 24.00 24.00 24.00 [274] 24.00 24.00 24.00 24.00 24.50 25.00 25.00 25.00 25.00 25.00 25.00 25.00 25.00 25.00 25.00 25.00 25.00 25.00 25.00 25.00 25.00 [295] 25.00 25.00 25.00 25.00 25.00 25.00 25.00 26.00 26.00 26.00 26.00 26.00 26.00 26.00 26.00 26.00 26.00 26.00 26.00 26.00 26.00 [316] 26.00 26.00 26.00 26.00 27.00 27.00 27.00 27.00 27.00 27.00 27.00 27.00 27.00 27.00 27.00 27.00 27.00 27.00 27.00 27.00 27.00 [337] 27.00 28.00 28.00 28.00 28.00 28.00 28.00 28.00 28.00 28.00 28.00 28.00 28.00 28.00 28.00 28.00 28.00 28.00 28.00 28.00 28.00 [358] 28.00 28.00 28.00 28.00 28.00 28.50 28.50 29.00 29.00 29.00 29.00 29.00 29.00 29.00 29.00 29.00 29.00 29.00 29.00 29.00 29.00 [379] 29.00 29.00 29.00 29.00 29.00 29.00 30.00 30.00 30.00 30.00 30.00 30.00 30.00 30.00 30.00 30.00 30.00 30.00 30.00 30.00 30.00 [400] 30.00 30.00 30.00 30.00 30.00 30.00 30.00 30.00 30.00 30.00 30.50 30.50 31.00 31.00 31.00 31.00 31.00 31.00 31.00 31.00 31.00 [421] 31.00 31.00 31.00 31.00 31.00 31.00 31.00 31.00 32.00 32.00 32.00 32.00 32.00 32.00 32.00 32.00 32.00 32.00 32.00 32.00 32.00 [442] 32.00 32.00 32.00 32.00 32.00 32.50 32.50 33.00 33.00 33.00 33.00 33.00 33.00 33.00 33.00 33.00 33.00 33.00 33.00 33.00 33.00 [463] 33.00 34.00 34.00 34.00 34.00 34.00 34.00 34.00 34.00 34.00 34.00 34.00 34.00 34.00 34.00 34.00 34.50 35.00 35.00 35.00 35.00 [484] 35.00 35.00 35.00 35.00 35.00 35.00 35.00 35.00 35.00 35.00 35.00 35.00 35.00 35.00 36.00 36.00 36.00 36.00 36.00 36.00 36.00 [505] 36.00 36.00 36.00 36.00 36.00 36.00 36.00 36.00 36.00 36.00 36.00 36.00 36.00 36.00 36.00 36.50 37.00 37.00 37.00 37.00 37.00 [526] 37.00 38.00 38.00 38.00 38.00 38.00 38.00 38.00 38.00 38.00 38.00 38.00 39.00 39.00 39.00 39.00 39.00 39.00 39.00 39.00 39.00 [547] 39.00 39.00 39.00 39.00 39.00 40.00 40.00 40.00 40.00 40.00 40.00 40.00 40.00 40.00 40.00 40.00 40.00 40.00 40.50 40.50 41.00 [568] 41.00 41.00 41.00 41.00 41.00 42.00 42.00 42.00 42.00 42.00 42.00 42.00 42.00 42.00 42.00 42.00 42.00 42.00 43.00 43.00 43.00 [589] 43.00 43.00 44.00 44.00 44.00 44.00 44.00 44.00 44.00 44.00 44.00 45.00 45.00 45.00 45.00 45.00 45.00 45.00 45.00 45.00 45.00 [610] 45.00 45.00 45.50 45.50 46.00 46.00 46.00 47.00 47.00 47.00 47.00 47.00 47.00 47.00 47.00 47.00 48.00 48.00 48.00 48.00 48.00 [631] 48.00 48.00 48.00 48.00 49.00 49.00 49.00 49.00 49.00 49.00 50.00 50.00 50.00 50.00 50.00 50.00 50.00 50.00 50.00 50.00 51.00 [652] 51.00 51.00 51.00 51.00 51.00 51.00 52.00 52.00 52.00 52.00 52.00 52.00 53.00 54.00 54.00 54.00 54.00 54.00 54.00 54.00 54.00 [673] 55.00 55.00 55.50 56.00 56.00 56.00 56.00 57.00 57.00 58.00 58.00 58.00 58.00 58.00 59.00 59.00 60.00 60.00 60.00 60.00 61.00 [694] 61.00 61.00 62.00 62.00 62.00 62.00 63.00 63.00 64.00 64.00 65.00 65.00 65.00 66.00 70.00 70.00 70.50 71.00 71.00 74.00 80.00 sort(titanic$Age, decreasing = TRUE) # mayor a menor [1] 80.00 74.00 71.00 71.00 70.50 70.00 70.00 66.00 65.00 65.00 65.00 64.00 64.00 63.00 63.00 62.00 62.00 62.00 62.00 61.00 61.00 [22] 61.00 60.00 60.00 60.00 60.00 59.00 59.00 58.00 58.00 58.00 58.00 58.00 57.00 57.00 56.00 56.00 56.00 56.00 55.50 55.00 55.00 [43] 54.00 54.00 54.00 54.00 54.00 54.00 54.00 54.00 53.00 52.00 52.00 52.00 52.00 52.00 52.00 51.00 51.00 51.00 51.00 51.00 51.00 [64] 51.00 50.00 50.00 50.00 50.00 50.00 50.00 50.00 50.00 50.00 50.00 49.00 49.00 49.00 49.00 49.00 49.00 48.00 48.00 48.00 48.00 [85] 48.00 48.00 48.00 48.00 48.00 47.00 47.00 47.00 47.00 47.00 47.00 47.00 47.00 47.00 46.00 46.00 46.00 45.50 45.50 45.00 45.00 [106] 45.00 45.00 45.00 45.00 45.00 45.00 45.00 45.00 45.00 45.00 44.00 44.00 44.00 44.00 44.00 44.00 44.00 44.00 44.00 43.00 43.00 [127] 43.00 43.00 43.00 42.00 42.00 42.00 42.00 42.00 42.00 42.00 42.00 42.00 42.00 42.00 42.00 42.00 41.00 41.00 41.00 41.00 41.00 [148] 41.00 40.50 40.50 40.00 40.00 40.00 40.00 40.00 40.00 40.00 40.00 40.00 40.00 40.00 40.00 40.00 39.00 39.00 39.00 39.00 39.00 [169] 39.00 39.00 39.00 39.00 39.00 39.00 39.00 39.00 39.00 38.00 38.00 38.00 38.00 38.00 38.00 38.00 38.00 38.00 38.00 38.00 37.00 [190] 37.00 37.00 37.00 37.00 37.00 36.50 36.00 36.00 36.00 36.00 36.00 36.00 36.00 36.00 36.00 36.00 36.00 36.00 36.00 36.00 36.00 [211] 36.00 36.00 36.00 36.00 36.00 36.00 36.00 35.00 35.00 35.00 35.00 35.00 35.00 35.00 35.00 35.00 35.00 35.00 35.00 35.00 35.00 [232] 35.00 35.00 35.00 35.00 34.50 34.00 34.00 34.00 34.00 34.00 34.00 34.00 34.00 34.00 34.00 34.00 34.00 34.00 34.00 34.00 33.00 [253] 33.00 33.00 33.00 33.00 33.00 33.00 33.00 33.00 33.00 33.00 33.00 33.00 33.00 33.00 32.50 32.50 32.00 32.00 32.00 32.00 32.00 [274] 32.00 32.00 32.00 32.00 32.00 32.00 32.00 32.00 32.00 32.00 32.00 32.00 32.00 31.00 31.00 31.00 31.00 31.00 31.00 31.00 31.00 [295] 31.00 31.00 31.00 31.00 31.00 31.00 31.00 31.00 31.00 30.50 30.50 30.00 30.00 30.00 30.00 30.00 30.00 30.00 30.00 30.00 30.00 [316] 30.00 30.00 30.00 30.00 30.00 30.00 30.00 30.00 30.00 30.00 30.00 30.00 30.00 30.00 30.00 29.00 29.00 29.00 29.00 29.00 29.00 [337] 29.00 29.00 29.00 29.00 29.00 29.00 29.00 29.00 29.00 29.00 29.00 29.00 29.00 29.00 28.50 28.50 28.00 28.00 28.00 28.00 28.00 [358] 28.00 28.00 28.00 28.00 28.00 28.00 28.00 28.00 28.00 28.00 28.00 28.00 28.00 28.00 28.00 28.00 28.00 28.00 28.00 28.00 27.00 [379] 27.00 27.00 27.00 27.00 27.00 27.00 27.00 27.00 27.00 27.00 27.00 27.00 27.00 27.00 27.00 27.00 27.00 26.00 26.00 26.00 26.00 [400] 26.00 26.00 26.00 26.00 26.00 26.00 26.00 26.00 26.00 26.00 26.00 26.00 26.00 26.00 25.00 25.00 25.00 25.00 25.00 25.00 25.00 [421] 25.00 25.00 25.00 25.00 25.00 25.00 25.00 25.00 25.00 25.00 25.00 25.00 25.00 25.00 25.00 25.00 24.50 24.00 24.00 24.00 24.00 [442] 24.00 24.00 24.00 24.00 24.00 24.00 24.00 24.00 24.00 24.00 24.00 24.00 24.00 24.00 24.00 24.00 24.00 24.00 24.00 24.00 24.00 [463] 24.00 24.00 24.00 24.00 24.00 23.50 23.00 23.00 23.00 23.00 23.00 23.00 23.00 23.00 23.00 23.00 23.00 23.00 23.00 23.00 23.00 [484] 22.00 22.00 22.00 22.00 22.00 22.00 22.00 22.00 22.00 22.00 22.00 22.00 22.00 22.00 22.00 22.00 22.00 22.00 22.00 22.00 22.00 [505] 22.00 22.00 22.00 22.00 22.00 22.00 21.00 21.00 21.00 21.00 21.00 21.00 21.00 21.00 21.00 21.00 21.00 21.00 21.00 21.00 21.00 [526] 21.00 21.00 21.00 21.00 21.00 21.00 21.00 21.00 21.00 20.50 20.00 20.00 20.00 20.00 20.00 20.00 20.00 20.00 20.00 20.00 20.00 [547] 20.00 20.00 20.00 20.00 19.00 19.00 19.00 19.00 19.00 19.00 19.00 19.00 19.00 19.00 19.00 19.00 19.00 19.00 19.00 19.00 19.00 [568] 19.00 19.00 19.00 19.00 19.00 19.00 19.00 19.00 18.00 18.00 18.00 18.00 18.00 18.00 18.00 18.00 18.00 18.00 18.00 18.00 18.00 [589] 18.00 18.00 18.00 18.00 18.00 18.00 18.00 18.00 18.00 18.00 18.00 18.00 18.00 17.00 17.00 17.00 17.00 17.00 17.00 17.00 17.00 [610] 17.00 17.00 17.00 17.00 17.00 16.00 16.00 16.00 16.00 16.00 16.00 16.00 16.00 16.00 16.00 16.00 16.00 16.00 16.00 16.00 16.00 [631] 16.00 15.00 15.00 15.00 15.00 15.00 14.50 14.00 14.00 14.00 14.00 14.00 14.00 13.00 13.00 12.00 11.00 11.00 11.00 11.00 10.00 [652] 10.00 9.00 9.00 9.00 9.00 9.00 9.00 9.00 9.00 8.00 8.00 8.00 8.00 7.00 7.00 7.00 6.00 6.00 6.00 5.00 5.00 [673] 5.00 5.00 4.00 4.00 4.00 4.00 4.00 4.00 4.00 4.00 4.00 4.00 3.00 3.00 3.00 3.00 3.00 3.00 2.00 2.00 2.00 [694] 2.00 2.00 2.00 2.00 2.00 2.00 2.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 0.92 0.83 0.83 0.75 0.75 0.67 0.42 &amp;nsbp; Ejercicio 8: vamos a clasificar a los pasajeros según su edad en \"mayores de edad\" y \"menores de edad\". Crea un función que, dada una edad, nos diga si es mayor o menor de edad. Aplícala después a nuestra variable Age y guarda el resultado en una variable edad_recodificada que añadamos a los datos originales Solución: # Definimos función menor_edad &lt;- function(edad) { salida &lt;- ifelse(edad &lt; 18, &quot;menores de edad&quot;, &quot;mayores de edad&quot;) return(salida) } # Creamos nueva variable titanic$edad_recodificada &lt;- menor_edad(titanic$Age) # se aplica elemento a elemento titanic$edad_recodificada # habrá NA [1] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; [8] &quot;menores de edad&quot; &quot;mayores de edad&quot; &quot;menores de edad&quot; &quot;menores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; [15] &quot;menores de edad&quot; &quot;mayores de edad&quot; &quot;menores de edad&quot; NA &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; [22] &quot;mayores de edad&quot; &quot;menores de edad&quot; &quot;mayores de edad&quot; &quot;menores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; [29] NA NA &quot;mayores de edad&quot; NA NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; [36] &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;menores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; [43] NA &quot;menores de edad&quot; &quot;mayores de edad&quot; NA NA NA NA [50] &quot;mayores de edad&quot; &quot;menores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA [57] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;menores de edad&quot; &quot;menores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; [64] &quot;menores de edad&quot; NA NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;menores de edad&quot; &quot;mayores de edad&quot; [71] &quot;mayores de edad&quot; &quot;menores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA [78] NA &quot;menores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; [85] &quot;menores de edad&quot; &quot;mayores de edad&quot; &quot;menores de edad&quot; NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; [92] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; [99] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; [106] &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; &quot;menores de edad&quot; [113] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;menores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; [120] &quot;menores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;menores de edad&quot; [127] NA &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; [134] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;menores de edad&quot; &quot;mayores de edad&quot; [141] NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; [148] &quot;menores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; [155] NA &quot;mayores de edad&quot; &quot;menores de edad&quot; &quot;mayores de edad&quot; NA NA &quot;mayores de edad&quot; [162] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;menores de edad&quot; &quot;menores de edad&quot; &quot;menores de edad&quot; NA &quot;mayores de edad&quot; [169] NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;menores de edad&quot; &quot;menores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; [176] &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA NA [183] &quot;menores de edad&quot; &quot;menores de edad&quot; &quot;menores de edad&quot; NA NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; [190] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;menores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; [197] NA &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; [204] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;menores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;menores de edad&quot; &quot;mayores de edad&quot; [211] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; [218] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;menores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA [225] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; [232] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;menores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; &quot;menores de edad&quot; [239] &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; [246] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; [253] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; [260] &quot;mayores de edad&quot; NA &quot;menores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; [267] &quot;menores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; [274] &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA &quot;menores de edad&quot; &quot;mayores de edad&quot; [281] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;menores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; [288] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; [295] &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; &quot;menores de edad&quot; NA &quot;mayores de edad&quot; NA [302] NA &quot;mayores de edad&quot; NA NA &quot;menores de edad&quot; NA &quot;menores de edad&quot; [309] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; [316] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; [323] &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; [330] &quot;menores de edad&quot; NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;menores de edad&quot; NA NA [337] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;menores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; [344] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA &quot;menores de edad&quot; &quot;mayores de edad&quot; [351] &quot;mayores de edad&quot; NA &quot;menores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; [358] &quot;mayores de edad&quot; NA NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; [365] NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; [372] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;menores de edad&quot; NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; [379] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;menores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA [386] &quot;mayores de edad&quot; &quot;menores de edad&quot; &quot;mayores de edad&quot; NA &quot;menores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; [393] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; [400] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; [407] &quot;mayores de edad&quot; &quot;menores de edad&quot; &quot;mayores de edad&quot; NA NA NA &quot;mayores de edad&quot; [414] NA &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;menores de edad&quot; [421] NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; [428] &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; &quot;menores de edad&quot; [435] &quot;mayores de edad&quot; &quot;menores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; [442] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA &quot;menores de edad&quot; &quot;menores de edad&quot; &quot;mayores de edad&quot; [449] &quot;menores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA [456] &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; [463] &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; NA [470] &quot;menores de edad&quot; NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA [477] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;menores de edad&quot; &quot;menores de edad&quot; NA &quot;mayores de edad&quot; [484] &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;menores de edad&quot; [491] NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; [498] NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;menores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; [505] &quot;menores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; [512] NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA [519] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; NA [526] &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;menores de edad&quot; NA [533] &quot;menores de edad&quot; NA &quot;mayores de edad&quot; &quot;menores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA [540] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;menores de edad&quot; &quot;menores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; [547] &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; &quot;menores de edad&quot; &quot;menores de edad&quot; &quot;mayores de edad&quot; NA [554] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; [561] NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; [568] &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA [575] &quot;menores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; [582] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; [589] &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; [596] &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA [603] NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; [610] &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA NA NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; [617] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;menores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; [624] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA [631] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA &quot;menores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; [638] &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;menores de edad&quot; NA [645] &quot;menores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; NA [652] &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; [659] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; [666] &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; [673] &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; [680] &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;menores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; [687] &quot;menores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;menores de edad&quot; &quot;mayores de edad&quot; &quot;menores de edad&quot; NA [694] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; [701] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; [708] &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; [715] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; &quot;menores de edad&quot; [722] &quot;menores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA [729] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;menores de edad&quot; NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; [736] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA NA NA &quot;mayores de edad&quot; [743] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;menores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; [750] &quot;mayores de edad&quot; &quot;menores de edad&quot; &quot;menores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;menores de edad&quot; [757] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; [764] &quot;mayores de edad&quot; &quot;menores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; [771] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA [778] &quot;menores de edad&quot; NA &quot;mayores de edad&quot; &quot;menores de edad&quot; &quot;menores de edad&quot; &quot;mayores de edad&quot; NA [785] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;menores de edad&quot; &quot;menores de edad&quot; &quot;mayores de edad&quot; NA [792] &quot;menores de edad&quot; NA NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; [799] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;menores de edad&quot; &quot;menores de edad&quot; &quot;mayores de edad&quot; [806] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; [813] &quot;mayores de edad&quot; &quot;menores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; [820] &quot;menores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;menores de edad&quot; NA [827] NA &quot;menores de edad&quot; NA &quot;mayores de edad&quot; &quot;menores de edad&quot; &quot;menores de edad&quot; NA [834] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; NA [841] &quot;mayores de edad&quot; &quot;menores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;menores de edad&quot; &quot;mayores de edad&quot; NA [848] &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA &quot;menores de edad&quot; &quot;mayores de edad&quot; &quot;menores de edad&quot; &quot;menores de edad&quot; [855] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; [862] &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; [869] NA &quot;menores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; [876] &quot;menores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; [883] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; &quot;mayores de edad&quot; NA [890] &quot;mayores de edad&quot; &quot;mayores de edad&quot; &amp;nsbp; Ejercicio 9: el accidente del Titanic se produjo el 15 de abril de 1912. Tomando dicha fecha como referencia, usa la edad de los pasajeros para añadir una nueva variable que sea la fecha de nacimiento. Solución: library(lubridate) # Fecha accidente accidente &lt;- as_date(&quot;1912/04/15&quot;) # Creamos nueva variable: fecha del accidente - años # (saldrán todos nacidos el 15 de abril, ya que no sabemos # cuantos meses cumplían en el momento del accidente) titanic$fecha_nacimiento &lt;- accidente - titanic$Age titanic$fecha_nacimiento [1] &quot;1912-03-24&quot; &quot;1912-03-08&quot; &quot;1912-03-20&quot; &quot;1912-03-11&quot; &quot;1912-03-11&quot; NA &quot;1912-02-21&quot; &quot;1912-04-13&quot; &quot;1912-03-19&quot; &quot;1912-04-01&quot; [11] &quot;1912-04-11&quot; &quot;1912-02-17&quot; &quot;1912-03-26&quot; &quot;1912-03-07&quot; &quot;1912-04-01&quot; &quot;1912-02-20&quot; &quot;1912-04-13&quot; NA &quot;1912-03-15&quot; NA [21] &quot;1912-03-11&quot; &quot;1912-03-12&quot; &quot;1912-03-31&quot; &quot;1912-03-18&quot; &quot;1912-04-07&quot; &quot;1912-03-08&quot; NA &quot;1912-03-27&quot; NA NA [31] &quot;1912-03-06&quot; NA NA &quot;1912-02-09&quot; &quot;1912-03-18&quot; &quot;1912-03-04&quot; NA &quot;1912-03-25&quot; &quot;1912-03-28&quot; &quot;1912-04-01&quot; [41] &quot;1912-03-06&quot; &quot;1912-03-19&quot; NA &quot;1912-04-12&quot; &quot;1912-03-27&quot; NA NA NA NA &quot;1912-03-28&quot; [51] &quot;1912-04-08&quot; &quot;1912-03-25&quot; &quot;1912-02-26&quot; &quot;1912-03-17&quot; &quot;1912-02-10&quot; NA &quot;1912-03-25&quot; &quot;1912-03-17&quot; &quot;1912-04-10&quot; &quot;1912-04-04&quot; [61] &quot;1912-03-24&quot; &quot;1912-03-08&quot; &quot;1912-03-01&quot; &quot;1912-04-11&quot; NA NA &quot;1912-03-17&quot; &quot;1912-03-27&quot; &quot;1912-03-29&quot; &quot;1912-03-20&quot; [71] &quot;1912-03-14&quot; &quot;1912-03-30&quot; &quot;1912-03-25&quot; &quot;1912-03-20&quot; &quot;1912-03-14&quot; &quot;1912-03-21&quot; NA NA &quot;1912-04-14&quot; &quot;1912-03-16&quot; [81] &quot;1912-03-24&quot; &quot;1912-03-17&quot; NA &quot;1912-03-18&quot; &quot;1912-03-29&quot; &quot;1912-03-13&quot; &quot;1912-03-30&quot; NA &quot;1912-03-23&quot; &quot;1912-03-22&quot; [91] &quot;1912-03-17&quot; &quot;1912-03-26&quot; &quot;1912-02-29&quot; &quot;1912-03-20&quot; &quot;1912-02-16&quot; NA &quot;1912-02-04&quot; &quot;1912-03-23&quot; &quot;1912-03-12&quot; &quot;1912-03-12&quot; [101] &quot;1912-03-18&quot; NA &quot;1912-03-25&quot; &quot;1912-03-13&quot; &quot;1912-03-09&quot; &quot;1912-03-18&quot; &quot;1912-03-25&quot; NA &quot;1912-03-08&quot; NA [111] &quot;1912-02-28&quot; &quot;1912-03-31&quot; &quot;1912-03-24&quot; &quot;1912-03-26&quot; &quot;1912-03-29&quot; &quot;1912-03-25&quot; &quot;1912-02-04&quot; &quot;1912-03-17&quot; &quot;1912-03-22&quot; &quot;1912-04-13&quot; [121] &quot;1912-03-25&quot; NA &quot;1912-03-13&quot; &quot;1912-03-13&quot; &quot;1912-02-21&quot; &quot;1912-04-03&quot; NA &quot;1912-03-22&quot; NA &quot;1912-03-01&quot; [131] &quot;1912-03-13&quot; &quot;1912-03-26&quot; &quot;1912-02-28&quot; &quot;1912-03-17&quot; &quot;1912-03-21&quot; &quot;1912-03-23&quot; &quot;1912-03-27&quot; &quot;1912-03-09&quot; &quot;1912-03-30&quot; &quot;1912-03-22&quot; [141] NA &quot;1912-03-24&quot; &quot;1912-03-22&quot; &quot;1912-03-27&quot; &quot;1912-03-28&quot; &quot;1912-03-27&quot; &quot;1912-03-19&quot; &quot;1912-04-06&quot; &quot;1912-03-09&quot; &quot;1912-03-04&quot; [151] &quot;1912-02-24&quot; &quot;1912-03-24&quot; &quot;1912-02-19&quot; &quot;1912-03-05&quot; NA &quot;1912-02-24&quot; &quot;1912-03-30&quot; &quot;1912-03-16&quot; NA NA [161] &quot;1912-03-02&quot; &quot;1912-03-06&quot; &quot;1912-03-20&quot; &quot;1912-03-29&quot; &quot;1912-04-14&quot; &quot;1912-04-06&quot; NA &quot;1912-03-01&quot; NA &quot;1912-03-18&quot; [171] &quot;1912-02-14&quot; &quot;1912-04-11&quot; &quot;1912-04-14&quot; &quot;1912-03-25&quot; &quot;1912-02-19&quot; &quot;1912-03-28&quot; NA &quot;1912-02-25&quot; &quot;1912-03-16&quot; &quot;1912-03-10&quot; [181] NA NA &quot;1912-04-06&quot; &quot;1912-04-14&quot; &quot;1912-04-11&quot; NA NA &quot;1912-03-01&quot; &quot;1912-03-06&quot; &quot;1912-03-10&quot; [191] &quot;1912-03-14&quot; &quot;1912-03-27&quot; &quot;1912-03-27&quot; &quot;1912-04-12&quot; &quot;1912-03-02&quot; &quot;1912-02-17&quot; NA &quot;1912-03-04&quot; NA &quot;1912-03-22&quot; [201] &quot;1912-03-18&quot; NA &quot;1912-03-12&quot; &quot;1912-02-29&quot; &quot;1912-03-28&quot; &quot;1912-04-13&quot; &quot;1912-03-14&quot; &quot;1912-03-20&quot; &quot;1912-03-30&quot; &quot;1912-03-06&quot; [211] &quot;1912-03-22&quot; &quot;1912-03-11&quot; &quot;1912-03-24&quot; &quot;1912-03-16&quot; NA &quot;1912-03-15&quot; &quot;1912-03-19&quot; &quot;1912-03-04&quot; &quot;1912-03-14&quot; &quot;1912-03-16&quot; [221] &quot;1912-03-30&quot; &quot;1912-03-19&quot; &quot;1912-02-24&quot; NA &quot;1912-03-08&quot; &quot;1912-03-24&quot; &quot;1912-03-27&quot; &quot;1912-03-25&quot; &quot;1912-03-28&quot; NA [231] &quot;1912-03-11&quot; &quot;1912-03-17&quot; &quot;1912-02-16&quot; &quot;1912-04-10&quot; &quot;1912-03-22&quot; NA &quot;1912-03-02&quot; &quot;1912-04-07&quot; &quot;1912-03-27&quot; &quot;1912-03-13&quot; [241] NA NA &quot;1912-03-17&quot; &quot;1912-03-24&quot; &quot;1912-03-16&quot; &quot;1912-03-02&quot; &quot;1912-03-21&quot; &quot;1912-03-22&quot; &quot;1912-03-09&quot; &quot;1912-02-21&quot; [251] NA &quot;1912-03-17&quot; &quot;1912-02-13&quot; &quot;1912-03-16&quot; &quot;1912-03-05&quot; &quot;1912-03-17&quot; NA &quot;1912-03-16&quot; &quot;1912-03-11&quot; &quot;1912-02-25&quot; [261] NA &quot;1912-04-12&quot; &quot;1912-02-23&quot; &quot;1912-03-06&quot; NA &quot;1912-03-10&quot; &quot;1912-03-30&quot; &quot;1912-03-21&quot; &quot;1912-02-17&quot; &quot;1912-03-11&quot; [271] NA &quot;1912-03-21&quot; &quot;1912-03-05&quot; &quot;1912-03-09&quot; NA &quot;1912-02-12&quot; &quot;1912-03-01&quot; NA &quot;1912-04-08&quot; &quot;1912-03-11&quot; [281] &quot;1912-02-10&quot; &quot;1912-03-18&quot; &quot;1912-03-30&quot; &quot;1912-03-27&quot; NA &quot;1912-03-13&quot; &quot;1912-03-16&quot; &quot;1912-03-24&quot; &quot;1912-03-04&quot; &quot;1912-03-24&quot; [291] &quot;1912-03-20&quot; &quot;1912-03-27&quot; &quot;1912-03-10&quot; &quot;1912-03-22&quot; &quot;1912-03-22&quot; NA &quot;1912-03-22&quot; &quot;1912-04-13&quot; NA &quot;1912-02-25&quot; [301] NA NA &quot;1912-03-27&quot; NA NA &quot;1912-04-14&quot; NA &quot;1912-03-29&quot; &quot;1912-03-16&quot; &quot;1912-03-16&quot; [311] &quot;1912-03-22&quot; &quot;1912-03-28&quot; &quot;1912-03-20&quot; &quot;1912-03-18&quot; &quot;1912-03-03&quot; &quot;1912-03-20&quot; &quot;1912-03-22&quot; &quot;1912-02-21&quot; &quot;1912-03-15&quot; &quot;1912-03-06&quot; [321] &quot;1912-03-24&quot; &quot;1912-03-19&quot; &quot;1912-03-16&quot; &quot;1912-03-24&quot; NA &quot;1912-03-10&quot; &quot;1912-02-14&quot; &quot;1912-03-10&quot; &quot;1912-03-15&quot; &quot;1912-03-30&quot; [331] NA &quot;1912-02-29&quot; &quot;1912-03-08&quot; &quot;1912-03-30&quot; NA NA &quot;1912-03-17&quot; &quot;1912-03-05&quot; &quot;1912-03-01&quot; &quot;1912-03-01&quot; [341] &quot;1912-04-13&quot; &quot;1912-03-22&quot; &quot;1912-03-18&quot; &quot;1912-03-21&quot; &quot;1912-03-10&quot; &quot;1912-03-22&quot; &quot;1912-03-06&quot; NA &quot;1912-04-12&quot; &quot;1912-03-04&quot; [351] &quot;1912-03-23&quot; NA &quot;1912-03-31&quot; &quot;1912-03-21&quot; NA &quot;1912-03-18&quot; &quot;1912-03-24&quot; &quot;1912-03-08&quot; NA NA [361] &quot;1912-03-06&quot; &quot;1912-03-17&quot; &quot;1912-03-01&quot; &quot;1912-03-11&quot; NA &quot;1912-03-16&quot; &quot;1912-02-15&quot; NA NA &quot;1912-03-22&quot; [371] &quot;1912-03-21&quot; &quot;1912-03-28&quot; &quot;1912-03-27&quot; &quot;1912-03-24&quot; &quot;1912-04-12&quot; NA &quot;1912-03-24&quot; &quot;1912-03-19&quot; &quot;1912-03-26&quot; &quot;1912-03-27&quot; [381] &quot;1912-03-04&quot; &quot;1912-04-14&quot; &quot;1912-03-14&quot; &quot;1912-03-11&quot; NA &quot;1912-03-28&quot; &quot;1912-04-14&quot; &quot;1912-03-10&quot; NA &quot;1912-03-29&quot; [391] &quot;1912-03-10&quot; &quot;1912-03-25&quot; &quot;1912-03-18&quot; &quot;1912-03-23&quot; &quot;1912-03-22&quot; &quot;1912-03-24&quot; &quot;1912-03-15&quot; &quot;1912-02-29&quot; &quot;1912-03-23&quot; &quot;1912-03-18&quot; [401] &quot;1912-03-07&quot; &quot;1912-03-20&quot; &quot;1912-03-25&quot; &quot;1912-03-18&quot; &quot;1912-03-26&quot; &quot;1912-03-12&quot; &quot;1912-02-24&quot; &quot;1912-04-12&quot; &quot;1912-03-25&quot; NA [411] NA NA &quot;1912-03-13&quot; NA &quot;1912-03-02&quot; NA &quot;1912-03-12&quot; &quot;1912-03-28&quot; &quot;1912-03-16&quot; &quot;1912-04-05&quot; [421] NA &quot;1912-03-25&quot; &quot;1912-03-17&quot; &quot;1912-03-18&quot; &quot;1912-03-28&quot; NA &quot;1912-03-18&quot; &quot;1912-03-27&quot; NA &quot;1912-03-14&quot; [431] &quot;1912-03-18&quot; NA &quot;1912-03-04&quot; &quot;1912-03-29&quot; &quot;1912-02-25&quot; &quot;1912-04-01&quot; &quot;1912-03-25&quot; &quot;1912-03-22&quot; &quot;1912-02-11&quot; &quot;1912-03-15&quot; [441] &quot;1912-03-01&quot; &quot;1912-03-26&quot; &quot;1912-03-21&quot; &quot;1912-03-18&quot; NA &quot;1912-04-11&quot; &quot;1912-04-02&quot; &quot;1912-03-12&quot; &quot;1912-04-10&quot; &quot;1912-02-23&quot; [451] &quot;1912-03-10&quot; NA &quot;1912-03-16&quot; &quot;1912-02-26&quot; NA &quot;1912-03-17&quot; &quot;1912-02-10&quot; NA &quot;1912-02-25&quot; NA [461] &quot;1912-02-27&quot; &quot;1912-03-12&quot; &quot;1912-02-28&quot; &quot;1912-02-27&quot; NA &quot;1912-03-08&quot; NA &quot;1912-02-19&quot; NA &quot;1912-04-14&quot; [471] NA &quot;1912-03-08&quot; &quot;1912-03-13&quot; &quot;1912-03-23&quot; &quot;1912-03-24&quot; NA &quot;1912-03-12&quot; &quot;1912-03-17&quot; &quot;1912-03-24&quot; &quot;1912-04-13&quot; [481] &quot;1912-04-06&quot; NA &quot;1912-02-25&quot; &quot;1912-02-12&quot; &quot;1912-03-21&quot; NA &quot;1912-03-11&quot; &quot;1912-02-17&quot; &quot;1912-03-16&quot; &quot;1912-04-06&quot; [491] NA &quot;1912-03-25&quot; &quot;1912-02-20&quot; &quot;1912-02-04&quot; &quot;1912-03-25&quot; NA &quot;1912-02-21&quot; NA &quot;1912-03-21&quot; &quot;1912-03-22&quot; [501] &quot;1912-03-29&quot; &quot;1912-03-25&quot; NA &quot;1912-03-09&quot; &quot;1912-03-30&quot; &quot;1912-03-28&quot; &quot;1912-03-13&quot; NA &quot;1912-03-18&quot; &quot;1912-03-20&quot; [511] &quot;1912-03-17&quot; NA &quot;1912-03-10&quot; &quot;1912-02-21&quot; &quot;1912-03-22&quot; &quot;1912-02-28&quot; &quot;1912-03-12&quot; NA &quot;1912-03-10&quot; &quot;1912-03-14&quot; [521] &quot;1912-03-16&quot; &quot;1912-03-24&quot; NA &quot;1912-03-02&quot; NA &quot;1912-03-05&quot; &quot;1912-02-25&quot; NA &quot;1912-03-07&quot; &quot;1912-03-23&quot; [531] &quot;1912-04-13&quot; NA &quot;1912-03-29&quot; NA &quot;1912-03-16&quot; &quot;1912-04-08&quot; &quot;1912-03-01&quot; &quot;1912-03-16&quot; NA &quot;1912-03-24&quot; [541] &quot;1912-03-10&quot; &quot;1912-04-06&quot; &quot;1912-04-04&quot; &quot;1912-03-14&quot; &quot;1912-02-25&quot; &quot;1912-02-11&quot; &quot;1912-03-27&quot; NA &quot;1912-03-13&quot; &quot;1912-04-07&quot; [551] &quot;1912-03-29&quot; &quot;1912-03-19&quot; NA &quot;1912-03-24&quot; &quot;1912-03-24&quot; &quot;1912-02-13&quot; &quot;1912-02-27&quot; NA &quot;1912-03-07&quot; &quot;1912-03-10&quot; [561] NA &quot;1912-03-06&quot; &quot;1912-03-18&quot; NA NA &quot;1912-03-22&quot; &quot;1912-03-27&quot; &quot;1912-03-17&quot; NA &quot;1912-03-14&quot; [571] &quot;1912-02-13&quot; &quot;1912-02-22&quot; &quot;1912-03-10&quot; NA &quot;1912-03-30&quot; &quot;1912-03-27&quot; &quot;1912-03-12&quot; &quot;1912-03-07&quot; NA &quot;1912-03-14&quot; [581] &quot;1912-03-21&quot; &quot;1912-03-07&quot; &quot;1912-02-21&quot; &quot;1912-03-10&quot; NA &quot;1912-03-28&quot; &quot;1912-02-28&quot; &quot;1912-02-15&quot; &quot;1912-03-24&quot; NA [591] &quot;1912-03-11&quot; &quot;1912-02-23&quot; &quot;1912-02-28&quot; NA &quot;1912-03-09&quot; &quot;1912-03-10&quot; NA &quot;1912-02-26&quot; NA &quot;1912-02-26&quot; [601] &quot;1912-03-22&quot; NA NA &quot;1912-03-02&quot; &quot;1912-03-11&quot; &quot;1912-03-10&quot; &quot;1912-03-16&quot; &quot;1912-03-19&quot; &quot;1912-03-24&quot; &quot;1912-03-06&quot; [611] &quot;1912-03-07&quot; NA NA NA &quot;1912-03-11&quot; &quot;1912-03-22&quot; &quot;1912-03-12&quot; &quot;1912-03-20&quot; &quot;1912-04-11&quot; &quot;1912-03-20&quot; [621] &quot;1912-03-19&quot; &quot;1912-03-04&quot; &quot;1912-03-26&quot; &quot;1912-03-25&quot; &quot;1912-03-25&quot; &quot;1912-02-14&quot; &quot;1912-02-18&quot; &quot;1912-03-25&quot; &quot;1912-03-20&quot; NA [631] &quot;1912-01-26&quot; &quot;1912-02-24&quot; &quot;1912-03-14&quot; NA &quot;1912-04-06&quot; &quot;1912-03-18&quot; &quot;1912-03-14&quot; &quot;1912-03-15&quot; &quot;1912-03-05&quot; NA [641] &quot;1912-03-26&quot; &quot;1912-03-22&quot; &quot;1912-04-13&quot; NA &quot;1912-04-14&quot; &quot;1912-02-27&quot; &quot;1912-03-27&quot; &quot;1912-02-19&quot; NA &quot;1912-03-23&quot; [651] NA &quot;1912-03-28&quot; &quot;1912-03-25&quot; NA &quot;1912-03-28&quot; &quot;1912-03-22&quot; NA &quot;1912-03-14&quot; &quot;1912-03-23&quot; &quot;1912-02-17&quot; [661] &quot;1912-02-25&quot; &quot;1912-03-06&quot; &quot;1912-02-28&quot; &quot;1912-03-10&quot; &quot;1912-03-26&quot; &quot;1912-03-14&quot; &quot;1912-03-21&quot; NA &quot;1912-03-03&quot; NA [671] &quot;1912-03-06&quot; &quot;1912-03-15&quot; &quot;1912-02-05&quot; &quot;1912-03-15&quot; NA &quot;1912-03-28&quot; &quot;1912-03-21&quot; &quot;1912-03-28&quot; &quot;1912-03-03&quot; &quot;1912-03-10&quot; [681] NA &quot;1912-03-19&quot; &quot;1912-03-26&quot; &quot;1912-04-01&quot; &quot;1912-02-15&quot; &quot;1912-03-21&quot; &quot;1912-04-01&quot; &quot;1912-03-27&quot; &quot;1912-03-28&quot; &quot;1912-03-31&quot; [691] &quot;1912-03-15&quot; &quot;1912-04-11&quot; NA &quot;1912-03-21&quot; &quot;1912-02-15&quot; &quot;1912-02-23&quot; &quot;1912-03-02&quot; NA &quot;1912-02-26&quot; &quot;1912-03-04&quot; [701] &quot;1912-03-28&quot; &quot;1912-03-11&quot; &quot;1912-03-28&quot; &quot;1912-03-21&quot; &quot;1912-03-20&quot; &quot;1912-03-07&quot; &quot;1912-03-01&quot; &quot;1912-03-04&quot; &quot;1912-03-24&quot; NA [711] &quot;1912-03-22&quot; NA &quot;1912-02-27&quot; &quot;1912-03-17&quot; &quot;1912-02-23&quot; &quot;1912-03-27&quot; &quot;1912-03-08&quot; &quot;1912-03-19&quot; NA &quot;1912-03-13&quot; [721] &quot;1912-04-09&quot; &quot;1912-03-29&quot; &quot;1912-03-12&quot; &quot;1912-02-25&quot; &quot;1912-03-19&quot; &quot;1912-03-26&quot; &quot;1912-03-16&quot; NA &quot;1912-03-21&quot; &quot;1912-03-21&quot; [731] &quot;1912-03-17&quot; &quot;1912-04-04&quot; NA &quot;1912-03-23&quot; &quot;1912-03-23&quot; &quot;1912-03-17&quot; &quot;1912-02-27&quot; &quot;1912-03-11&quot; NA NA [741] NA &quot;1912-03-10&quot; &quot;1912-03-25&quot; &quot;1912-03-22&quot; &quot;1912-03-15&quot; &quot;1912-02-05&quot; &quot;1912-03-30&quot; &quot;1912-03-16&quot; &quot;1912-03-27&quot; &quot;1912-03-15&quot; [751] &quot;1912-04-11&quot; &quot;1912-04-09&quot; &quot;1912-03-13&quot; &quot;1912-03-23&quot; &quot;1912-02-27&quot; &quot;1912-04-14&quot; &quot;1912-03-18&quot; &quot;1912-03-28&quot; &quot;1912-03-12&quot; &quot;1912-03-13&quot; [761] NA &quot;1912-03-05&quot; &quot;1912-03-26&quot; &quot;1912-03-10&quot; &quot;1912-03-30&quot; &quot;1912-02-24&quot; NA &quot;1912-03-15&quot; NA &quot;1912-03-14&quot; [771] &quot;1912-03-22&quot; &quot;1912-02-27&quot; &quot;1912-02-18&quot; NA &quot;1912-02-21&quot; &quot;1912-03-28&quot; NA &quot;1912-04-10&quot; NA &quot;1912-03-03&quot; [781] &quot;1912-04-02&quot; &quot;1912-03-29&quot; &quot;1912-03-17&quot; NA &quot;1912-03-21&quot; &quot;1912-03-21&quot; &quot;1912-03-28&quot; &quot;1912-04-07&quot; &quot;1912-04-14&quot; &quot;1912-02-29&quot; [791] NA &quot;1912-03-30&quot; NA NA &quot;1912-03-21&quot; &quot;1912-03-07&quot; &quot;1912-02-26&quot; &quot;1912-03-15&quot; &quot;1912-03-16&quot; &quot;1912-03-16&quot; [801] &quot;1912-03-12&quot; &quot;1912-03-15&quot; &quot;1912-04-04&quot; &quot;1912-04-14&quot; &quot;1912-03-19&quot; &quot;1912-03-15&quot; &quot;1912-03-07&quot; &quot;1912-03-28&quot; &quot;1912-03-07&quot; &quot;1912-03-13&quot; [811] &quot;1912-03-20&quot; &quot;1912-03-07&quot; &quot;1912-03-11&quot; &quot;1912-04-09&quot; &quot;1912-03-15&quot; NA &quot;1912-03-23&quot; &quot;1912-03-15&quot; &quot;1912-03-03&quot; &quot;1912-04-05&quot; [821] &quot;1912-02-23&quot; &quot;1912-03-19&quot; &quot;1912-03-08&quot; &quot;1912-03-19&quot; &quot;1912-04-13&quot; NA NA &quot;1912-04-14&quot; NA &quot;1912-02-13&quot; [831] &quot;1912-03-31&quot; &quot;1912-04-14&quot; NA &quot;1912-03-23&quot; &quot;1912-03-28&quot; &quot;1912-03-07&quot; &quot;1912-03-25&quot; NA &quot;1912-03-14&quot; NA [841] &quot;1912-03-26&quot; &quot;1912-03-30&quot; &quot;1912-03-16&quot; &quot;1912-03-11&quot; &quot;1912-03-29&quot; &quot;1912-03-04&quot; NA &quot;1912-03-11&quot; &quot;1912-03-18&quot; NA [851] &quot;1912-04-11&quot; &quot;1912-02-01&quot; &quot;1912-04-06&quot; &quot;1912-03-30&quot; &quot;1912-03-02&quot; &quot;1912-03-28&quot; &quot;1912-03-01&quot; &quot;1912-02-24&quot; &quot;1912-03-22&quot; NA [861] &quot;1912-03-05&quot; &quot;1912-03-25&quot; &quot;1912-02-27&quot; NA &quot;1912-03-22&quot; &quot;1912-03-04&quot; &quot;1912-03-19&quot; &quot;1912-03-15&quot; NA &quot;1912-04-11&quot; [871] &quot;1912-03-20&quot; &quot;1912-02-28&quot; &quot;1912-03-13&quot; &quot;1912-02-28&quot; &quot;1912-03-18&quot; &quot;1912-03-31&quot; &quot;1912-03-26&quot; &quot;1912-03-27&quot; NA &quot;1912-02-19&quot; [881] &quot;1912-03-21&quot; &quot;1912-03-13&quot; &quot;1912-03-24&quot; &quot;1912-03-18&quot; &quot;1912-03-21&quot; &quot;1912-03-07&quot; &quot;1912-03-19&quot; &quot;1912-03-27&quot; NA &quot;1912-03-20&quot; [891] &quot;1912-03-14&quot; "],["recursos-de-aprendizaje.html", " Recursos de aprendizaje Aprendizaje/docencia Manejo de datos Manejo de textos Datos. Importar/exportar dataviz Mapas y datos espaciales en R Colores y temas en dataviz (generales) Análisis exploratorio Modelización e inferencia Estadística Bayesiana Informes, tablas, webs, libros y diapositivas Paquetes/recursos curiosos", "  Recursos de aprendizaje Recopilación de recursos de aprendizaje para seguir profundizando. Aprendizaje/docencia cursos de R gratuitos. Recopilados y/o creados por Javier Alvarez Liébana. https://dadosdelaplace.github.io/cursos tutoriales de R gratuitos. De Javier Alvarez Liébana. https://dadosdelaplace.github.io/blog-R/ Lista de usuarios/as de Twitter especializados/as en dataviz. https://twitter.com/i/lists/1324478481338683392?s=20 Hashtag #TidyTuesday: todos los martes un reto de dataviz. https://twitter.com/search?q=%23tidytuesday&amp;src=hashtag_click. Repositorio oficial con los datos y retos: https://github.com/rfordatascience/tidytuesday swirl: paquete para aprender R y crear cursos. https://swirlstats.com/ Estadística y probabilidad para científicos de datos. De Raúl Vaquerizo https://analisisydecision.es/estadistica-data-scientist/index.html Manejo de datos tibble: simplificando data.frames. Entorno tidyverse. https://tibble.tidyverse.org/ tidyr: ordenando los datos. Entorno tidyverse. https://tibble.tidyverse.org/ dplyr: procesando/manipulando los datos. Entorno tidyverse. https://dplyr.tidyverse.org/ purrr: programación funcional con listas. Entorno tidyverse. https://purrr.tidyverse.org/ forcast: manejo de variables cualitativas. Entorno tidyverse. https://forcats.tidyverse.org/ lubridate: manejo de fechas y tiempos. Entorno tidyverse. https://lubridate.tidyverse.org/ Tidy data tutor. Visualizador del flujo de operaciones de las funciones del entorno tidyverse. https://tidydatatutor.com/ Tidyverse skill for data science. De Carrie Wright, Shannon E. Ellis, Stephanie C. Hicks y Roger D. Peng. https://jhudatascience.org/tidyversecourse/ Manejo de textos stringr: manipulación de textos. Entorno tidyverse. https://stringr.tidyverse.org/ glue: pegado de cadenas de texto. Entorno tidyverse. https://glue.tidyverse.org/ Text mining. De Julia Silge y David Robinson. https://tidytextmining.com Descarga de textos libres. De David Robinson. https://github.com/ropensci/gutenbergr Análisis de sentimientos en Twitter. De Harshvardhan. https://www.harsh17.in/twitter-sentiments/ Datos. Importar/exportar readr: importación de ficheros (.csv, .tsv, .txt). Entorno tidyverse. https://readr.tidyverse.org/ readxl: importación de ficheros formateados por Excel. Entorno tidyverse. https://readxl.tidyverse.org/ haven: importación de ficheros de SPSS, Stata y SAS. Entorno tidyverse. https://haven.tidyverse.org/ rvest: scrapping de páginas web sencillas. Entorno tidyverse. https://rvest.tidyverse.org/ RSelenium: scrapping web con navegación inteligente. De John Harrison y Ju Yeong Kim. https://docs.ropensci.org/RSelenium/ Paquetes para acceder a datos abiertos. https://ropensci.org/packages/data-access/ googledrive: interacción con ficheros de Google Drive. Entorno tidyverse. https://googledrive.tidyverse.org/ httr: comunicación webs http y API. De Hadley Wickham, Chief Scientist en RStudio. https://github.com/r-lib/httr fitbitr: datos de pulseras fitbit. De Matt Kaye https://mrkaye97.github.io/fitbitr/index.html rtweet: datos de Twitter. De Michael W. Kearney https://docs.ropensci.org/rtweet/ owidR: datos de Our World in Data. De OWiD. https://github.com/piersyork/owidR eurostat: datos de Eurostat. https://ropengov.github.io/eurostat/articles/articles/eurostat_tutorial.html climaemet: datos del AEMET. https://ropenspain.github.io/climaemet/ infoelectoral: datos electorales de España. https://ropenspain.github.io/infoelectoral/ rfishbase: datos de fishbase.org. https://github.com/ropensci/rfishbase dataviz Gramática de las gráficas: pistas para mejorarlas representaciones de datos. Libro de Joaquín Sevilla. http://academica-e.unavarra.es/bitstream/handle/2454/15785/Gram%C3%A1tica.pdf ggplot2: visualización de datos. Entorno tidyverse. https://ggplot2.tidyverse.org/. Manual oficial: https://ggplot2-book.org/index.html R Graph Gallery: colección de dataviz en R https://www.r-graph-gallery.com/ patchwork: agregar y componer gráficas. De Thomas Lin Pedersen. https://patchwork.data-imaginist.com/.&gt; plotly: gráficas interactivas. https://plotly.com/r/ ggplotly: convertir ggplot2 a plotly. https://www.rdocumentation.org/packages/plotly/versions/4.10.0/topics/ggplotly datawRappr: conectar R con datawrapper. De Benedict Witzenberger. https://munichrocker.github.io/DatawRappr/ ggtheme: paletas de colores y temas. De Edward Tufte. https://yutannihilation.github.io/allYourFigureAreBelongToUs/ggthemes/ geomtextpath: curvando el texto ajustándose a una gráfica. De Allan Cameron y Teun van den Brand. https://allancameron.github.io/geomtextpath/ El arte del dato: aprender a construir un ggplot. De Paula Casado. https://elartedeldato.com/ circlize: visualización de datos circulares. De Z. Gu. https://jokergoo.github.io/circlize_book/book/ ggstream: visualización de datos en flujo. De Z. Gu. https://github.com/davidsjoberg/ggstream Tutoriales de visualización de datos. De Cedric Scherer. https://www.cedricscherer.com/ Mapas y datos espaciales en R Visualización de datos geográficos. De Dominic Royé. https://dominicroye.github.io/en/ mapSpain: visualización de datos en mapas de España en R. De Diego Hernangómez. https://dieghernan.github.io/rpubs/mapSpain_RMadrid/#1 rasterpic: visualización de mapas con imágenes rasterizados de fondo. De Diego Hernangómez. https://dieghernan.github.io/rasterpic/ layer: paquete para crear capas de mapas. De Marco Sciaini y Cédric Scherer https://github.com/marcosci/layer Colores y temas en dataviz (generales) Uso de colores. De Lisa Charlotte Muth, experta en dataviz en Datawrapper. https://datawrapper.notion.site/Color-Book-Updates-54905c2bd0bb4c6bae15d99e31a9d5c4 Paletas de colores inspiradas en el Metropolitan Museum. De Blake Robert Mills. https://github.com/BlakeRMills/MetBrewer/tree/main Paletas de colores inspiradas paisajes de los parques nacionales. De Kevin Blake. https://github.com/kevinsblake/NatParksPalettes Paletas de colores de álbumes de Taylor Swift. De asteves https://github.com/asteves/tayloRswift Paletas de colores inspiradas en la fotografía de Harry Potter. De Alejandro Jiménez. https://github.com/aljrico/harrypotter colorblindcheck: herramientas para detectar paletas de colores aptas daltónicos/as. De Jakub Nowosad. https://github.com/Nowosad/colorblindcheck Análisis exploratorio skimr: generación de resúmenes estadísticos. Paquete de ropensci. https://docs.ropensci.org/skimr/ corrr: análisis y visualización de correlaciones. Entorno tidymodels. https://corrr.tidymodels.org/ DataExplorer: análisis exploratorio automatizado. Paquete DataExplorer. https://boxuancui.github.io/DataExplorer/ Modelización e inferencia Modelos lineales: regresión y GLM. De Paul Roback y Julie Legler. https://bookdown.org/roback/bookdown-BeyondMLR/ performance: diagnosis y evaluación de modelos. https://easystats.github.io/performance/ Estadística espacial y geoestadística. De Robin Lovelace. https://geocompr.robinlovelace.net/ entorno tidymodels: minería de datos y Machine Learning en R. De RStudio https://www.tidymodels.org/start/ Machine Learning en R. https://emilhvitfeldt.github.io/ISLR-tidymodels-labs/index.html vip: evaluar la importancia de las variables. https://github.com/koalaverse/vip/ infer: inferencia estadística. Entorno tidymodels. https://infer.tidymodels.org/ Inferencia estadística en ciencia de datos. De Chester Ismay y Albert Y. Kim. https://moderndive.com/ goffda: inferencia de datos funcionales (FDA). De Eduardo García Portugués y Javier Alvarez Liébana. https://github.com/egarpor/goffda Estadística Bayesiana Inferencia Bayesiana (y espacial). De Virgilio Gómez Rubio. https://becarioprecario.bitbucket.io/inla-gitbook/ tidybayes: estadística bayesiana y visualización. De Matthew Kay. http://mjskay.github.io/tidybayes/ tidyposterior: estadística bayesiana. Paquete del entorno tidymodels. https://tidyposterior.tidymodels.org/index.html Informes, tablas, webs, libros y diapositivas rmarkdown: creación de informes en R. De Yihui Xie, J. J. Allaire y Garrett Grolemund https://bookdown.org/yihui/rmarkdown/ bookdown: creación de libros y manuales en R. De Yihui Xie. https://bookdown.org/yihui/bookdown/ blogdown: creación de webs en R. De Yihui Xie, Amber Thomas y Alison Presmanes Hill. https://bookdown.org/yihui/blogdown/ shiny: webs interactivas con R. https://shiny.rstudio.com/tutorial/written-tutorial/lesson1/ gt: tablas en R. De RStudio https://gt.rstudio.com/ gtExtras: visualización de datos en tablas. De Thomas Mock. https://jthomasmock.github.io/gtExtras/index.html tablas visualmente atractivas en R con gt y gtextras. De Benjamin Nowak https://bjnnowak.netlify.app/2021/10/04/r-beautiful-tables-with-gt-and-gtextras/ Paquetes/recursos curiosos wordle. De coolbutuseless https://coolbutuseless.github.io/2022/01/04/wordle-v0.1.5-a-package-for-playing-and-helping-solve-wordle-puzzles/ Canciones de Taylor Swift. De W. Jake Thompson https://taylor.wjakethompson.com/ Datos de partidas de ajedrez. De Jason Zivkovic https://github.com/JaseZiv/chessR Visualizar el ciclo día/noche en el mundo. De Dominic Royé https://dominicroye.github.io/en/2021/visualize-the-day-night-cycle-on-a-world-map/ Visualización de la cuenca hídrica de Francia. De Etienne Bacher https://www.etiennebacher.com/posts/2021-12-27-mapping-french-rivers-network/ ggpattern: rellenos con patrones geométricos en ggplot2. De coolbutuseless y Trevor L. Davis. https://github.com/coolbutuseless/ggpattern Recreando en R la famosa espiral del NYT. De Ansgar Wolsing https://bydata.github.io/nyt-corona-spiral-chart/ "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
